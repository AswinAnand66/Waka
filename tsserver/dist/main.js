/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/PoIngestion/ingestion.ts":
/*!**************************************!*\
  !*** ./src/PoIngestion/ingestion.ts ***!
  \**************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_promise_router_1 = __importDefault(__webpack_require__(/*! express-promise-router */ \"express-promise-router\"));\r\nconst router = express_promise_router_1.default();\r\nconst settings = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst ingestion = __webpack_require__(/*! ../controllers/poIngestionController */ \"./src/controllers/poIngestionController.ts\");\r\nconst log = __webpack_require__(/*! ../log */ \"./src/log.ts\");\r\nconst config = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst userCtrl = __webpack_require__(/*! ../controllers/userController */ \"./src/controllers/userController.ts\");\r\nmodule.exports = router;\r\nfunction getRequestIP(req) {\r\n    var ip;\r\n    if (req.connection && req.connection.remoteAddress) {\r\n        ip = req.connection.remoteAddress;\r\n    }\r\n    else if (req.headers['x-forwarded-for']) {\r\n        ip = req.headers['x-forwarded-for'].split(\",\")[0];\r\n    }\r\n    else {\r\n        ip = req.ip;\r\n    }\r\n    return ip;\r\n}\r\nfunction accessLog(req, duration, status) {\r\n    log.accesslog(\"info\", `${getRequestIP(req)}, ${req.url}, ${status}, ${duration}`);\r\n}\r\nrouter.use((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const auth = req.headers['authorization'];\r\n    if (!auth) {\r\n        res.json({ success: false, invalidToken: true, message: 'No token provided' });\r\n    }\r\n    else {\r\n        let len = auth.substring(0, 2);\r\n        let keyLength = settings.hexToShort(len);\r\n        let token = auth.substring(2, auth.length - keyLength);\r\n        let result = userCtrl.validateToken(token);\r\n        result.decoded[\"keyEncryptDecrypt\"] = auth.substring(auth.length - keyLength);\r\n        if (result.success) {\r\n            req.decoded = result.decoded;\r\n            next();\r\n        }\r\n        else {\r\n            res.json(result);\r\n        }\r\n    }\r\n}));\r\nrouter.get('/getPoIngestionCards', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.decoded.userId;\r\n        let result = yield ingestion.getPoIngestionCards(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPoIngestionCards Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPoIngestionData', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.getPoIngestionData(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPoIngestionData Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/uploadDataSet', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.uploadDataSet(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.uploadDataSet Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPoIngestionMappingData', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.getPoIngestionMappingData(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPoIngestionData Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/deleUploadedFile', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.deleUploadedFile(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.deleUploadedFile Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validatePoiMapping', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.validatePoiMapping(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.validatePoiMapping Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/deleteMappings', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.deleteMappings(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.deleteMappings Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/viewPoiMappings', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.viewPoiMappings(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.viewPoiMappings Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/poIngestionTestRequest', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.poIngestionTestRequest(param.url, param.headers, param.body, param.method);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.poIngestionTestRequest Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getIngestionLookups', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.getIngestionLookups(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getIngestionLookups Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/schedulePoIngestion', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.schedulePoIngestion(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.schedulePoIngestion Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPoiScheduleData', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.getPoiScheduleData(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPoiScheduleData Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPoiRunningStatus', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.getPoiRunningStatus(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPoiRunningStatus Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPoiUnmappedTargets', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.getPoiUnmappedTargets(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPoiUnmappedTargets Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPoIngestionSchemaErrors', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.getPoIngestionSchemaErrors(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPoIngestionSchemaErrors Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPoIngestionMasterErrors', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.getPoIngestionMasterErrors(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPoIngestionMasterErrors Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validatePoiSchema', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.validatePoiSchema(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.validatePoiSchema Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getTotalCntForSchemaErrors', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield ingestion.getTotalCntForSchemaErrors(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getTotalCntForSchemaErrors Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getTotalCntForMasterErrors', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield ingestion.getTotalCntForMasterErrors(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getTotalCntForMasterErrors Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getTotalCntForRunningStatus', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield ingestion.getTotalCntForRunningStatus(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getTotalCntForRunningStatus Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getConsigneeListForMasterValidation', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.decoded.userId;\r\n        let result = yield ingestion.getConsigneeListForMasterValidation(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getConsigneeListForMasterValidation Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delInviteFromMasterValidation', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.param;\r\n        let result = yield ingestion.delInviteFromMasterValidation(JSON.parse(param));\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.delInviteFromMasterValidation Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updMasterErrors', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.param;\r\n        let result = yield ingestion.updMasterErrors(JSON.parse(param));\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.updMasterErrors Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getPortListForMasterValidation', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.decoded.userId;\r\n        let result = yield ingestion.getPortListForMasterValidation(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getPortListForMasterValidation Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validatePoiMaster', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.validatePoiMaster(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.validatePoiMaster Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addNewIncoterm', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield ingestion.addNewIncoterm(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.addNewIncoterm Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyInviteData', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.getCompanyInviteData(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getCompanyInviteData Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insInviteExistingSupplier', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield ingestion.insInviteExistingSupplier(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.insInviteExistingSupplier Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\n\n\n//# sourceURL=webpack://tsserver/./src/PoIngestion/ingestion.ts?");

/***/ }),

/***/ "./src/api/api.ts":
/*!************************!*\
  !*** ./src/api/api.ts ***!
  \************************/
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_promise_router_1 = __importDefault(__webpack_require__(/*! express-promise-router */ \"express-promise-router\"));\r\nconst router = express_promise_router_1.default();\r\nconst settings = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst userCtrl = __webpack_require__(/*! ../controllers/userController */ \"./src/controllers/userController.ts\");\r\nconst companyContact = __webpack_require__(/*! ../controllers/companyContactController */ \"./src/controllers/companyContactController.ts\");\r\nconst sopCntrl = __webpack_require__(/*! ../controllers/sopController */ \"./src/controllers/sopController.ts\");\r\nconst initCntrl = __webpack_require__(/*! ../controllers/initializeController */ \"./src/controllers/initializeController.ts\");\r\nconst manageOrderCntrl = __webpack_require__(/*! ../controllers/manageOrdersController */ \"./src/controllers/manageOrdersController.ts\");\r\nconst shipBook = __webpack_require__(/*! ../controllers/ShipmentBookingController */ \"./src/controllers/ShipmentBookingController.ts\");\r\nconst { getDocs, insReq, getRequirement, delRequirement } = __webpack_require__(/*! ../controllers/reqController */ \"./src/controllers/reqController.ts\");\r\nconst { getCHGrp, getCHForGrp } = __webpack_require__(/*! ../controllers/CargoHandleController */ \"./src/controllers/CargoHandleController.ts\");\r\nconst { getPOBGrp, getPOBForGrp } = __webpack_require__(/*! ../controllers/poBookingController */ \"./src/controllers/poBookingController.ts\");\r\nconst { getLicenseDetails, approveLicenseStatus, revokeLicenseStatus } = __webpack_require__(/*! ../controllers/licenseController */ \"./src/controllers/licenseController.ts\");\r\nconst modules = __webpack_require__(/*! ../controllers/moduleController */ \"./src/controllers/moduleController.ts\");\r\nconst shipmentBook = __webpack_require__(/*! ../controllers/ShipmentBookingController */ \"./src/controllers/ShipmentBookingController.ts\");\r\nconst scheduler = __webpack_require__(/*! ../scheduler/accountVerificationMonitor */ \"./src/scheduler/accountVerificationMonitor.ts\");\r\nconst log = __webpack_require__(/*! ../log */ \"./src/log.ts\");\r\nconst zip_a_folder_1 = __webpack_require__(/*! zip-a-folder */ \"zip-a-folder\");\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst config = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\r\nclass Queue {\r\n    constructor() {\r\n        this.a = [];\r\n    }\r\n    getLength() { return this.a.length; }\r\n    ;\r\n    isEmpty() { return 0 == this.a.length; }\r\n    ;\r\n    enqueue(item) { this.a.push(item); }\r\n    ;\r\n    dequeue() { return this.a.shift(); }\r\n    ;\r\n}\r\nconst pageAccessQueue = new Queue();\r\nlet isPageAccessQueRunning = false;\r\nmodule.exports = router;\r\ninitCntrl.checkDb();\r\nsetInterval(function () {\r\n    scheduler.deleteInactiveAccounts();\r\n}, 60 * 1000); // 60 * 1000 milsec\r\nfunction getRequestIP(req) {\r\n    var ip;\r\n    if (req.connection && req.connection.remoteAddress) {\r\n        ip = req.connection.remoteAddress;\r\n    }\r\n    else if (req.headers['x-forwarded-for']) {\r\n        ip = req.headers['x-forwarded-for'].split(\",\")[0];\r\n    }\r\n    else {\r\n        ip = req.ip;\r\n    }\r\n    return ip;\r\n}\r\nfunction accessLog(req, duration, status) {\r\n    log.accesslog(\"info\", `${getRequestIP(req)}, ${req.url}, ${status}, ${duration}`);\r\n}\r\nrouter.post('/login', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let user = JSON.parse(Buffer.from(req.body.data, 'base64').toString());\r\n        let result = yield userCtrl.login(user, getRequestIP(req));\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `login Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/savePageAccess', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        //pageAccessQueue.enqueue(JSON.stringify(req.body));\r\n        req.body[\"ip_address\"] = getRequestIP(req);\r\n        pageAccessQueue.enqueue(req.body);\r\n        res.json({ success: true, error: false, message: 'added in queue' });\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `login Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\n//Queues are cleared if data exist. Queue is checked for every 1s.\r\nsetInterval(() => {\r\n    try {\r\n        if (!isPageAccessQueRunning && pageAccessQueue.getLength() > 0) {\r\n            isPageAccessQueRunning = true;\r\n            drainDBInsQueue();\r\n        }\r\n    }\r\n    catch (e) {\r\n        isPageAccessQueRunning = false;\r\n        log.logger(\"error\", `login Exception ${e.message}, ${e.stack}`);\r\n    }\r\n}, 1000);\r\nfunction drainDBInsQueue() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let cnt = 0;\r\n        let strQry = [];\r\n        while (cnt < 1000 && pageAccessQueue.getLength() > 0) {\r\n            cnt++;\r\n            strQry.push(pageAccessQueue.dequeue());\r\n        }\r\n        isPageAccessQueRunning = false;\r\n        yield userCtrl.addPageAccessView(strQry);\r\n    });\r\n}\r\nrouter.post('/registerUser', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(Buffer.from(req.body.param, 'base64').toString());\r\n        let result = yield userCtrl.registerUser(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `registerUser Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getInviteUser', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield userCtrl.getInviteUser(req.body);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getInviteUser Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkEmail', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.param;\r\n        let result = yield userCtrl.checkEmail(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `CheckEmail Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkEmailLinkVerified', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.param;\r\n        let result = yield userCtrl.checkEmailLinkVerified(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `checkEmailLinkVerified Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/userValidation', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.user;\r\n        let result = yield userCtrl.userMailValidation(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `userValidation Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getOTP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.param;\r\n        let result = yield userCtrl.getOTP(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getOTP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validateOTP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.param;\r\n        let result = yield userCtrl.validateOTP(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getOTP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/changeForgottenPassword', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(Buffer.from(req.body.param, 'base64').toString());\r\n        let result = yield userCtrl.changeForgottenPassword(param);\r\n        if (result.success) {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json(result);\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.logger.error(process.pid + ' : ' + e.stack);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/logoutUser', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    let dt = new Date().getTime();\r\n    const token = req.headers['authorization'];\r\n    accessLog(req, new Date().getTime() - dt, true);\r\n    res.json({ success: true, message: 'Successfully logged out' });\r\n}));\r\nrouter.use((req, res, next) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const auth = req.headers['authorization'];\r\n    if (!auth) {\r\n        res.json({ success: false, invalidToken: true, message: 'No token provided' });\r\n    }\r\n    else {\r\n        let len = auth.substring(0, 2);\r\n        let keyLength = settings.hexToShort(len);\r\n        let token = auth.substring(2, auth.length - keyLength);\r\n        let result = userCtrl.validateToken(token);\r\n        result.decoded[\"keyEncryptDecrypt\"] = auth.substring(auth.length - keyLength);\r\n        if (result.success) {\r\n            req.decoded = result.decoded;\r\n            next();\r\n        }\r\n        else {\r\n            res.json(result);\r\n        }\r\n    }\r\n}));\r\nrouter.post('/getTotalCntByModule', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = [req.body];\r\n        param.push({ userId: req.decoded.userId });\r\n        let result = yield initCntrl.getTotalCntByModule(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getTotalCntByModule Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getBuyer', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getBuyer(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getBuyer Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getFF', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getFF(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getFF Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCarrier', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getCarrier();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCarrier Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getPorts', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getPorts();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getPorts Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCountry', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = initCntrl.getCountry();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json({ success: true, result: result });\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getCountry Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCountryCode', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getCountryCode();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getCountryCode Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validateEmail', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPContactByEmail(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `validateEmail Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/changePassword', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(Buffer.from(req.body.param, 'base64').toString());\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.changePassword(param);\r\n        if (result.success) {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json(result);\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.logger.error(process.pid + ' : ' + e.stack);\r\n        res.json({ success: false, error: true, message: e.stack });\r\n    }\r\n}));\r\nrouter.post('/updateProfile', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        req.body[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.updateProfile(req.body);\r\n        if (result.success) {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json(result);\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.logger.error(process.pid + ' : ' + e.stack);\r\n        res.json({ success: false, error: true, message: e.stack });\r\n    }\r\n}));\r\nrouter.post('/insUpdContact', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result;\r\n        if (param.contact_id == undefined) {\r\n            result = yield companyContact.insContact(param);\r\n        }\r\n        else {\r\n            result = yield companyContact.updContact(param);\r\n        }\r\n        if (result.success && param.sop_contact_id == undefined) {\r\n            if (param.contact_id == undefined)\r\n                param.contact_id = result.result[0].contact_id;\r\n            let result1 = yield sopCntrl.insSOPContact(param);\r\n            if (result1.success) {\r\n                param.sop_contact_id = result1.result[0].sop_contact_id;\r\n                if (param.origin_ports != undefined && param.origin_ports.length > 0) {\r\n                    let result2 = yield sopCntrl.insSOPContactPort(param);\r\n                    if (result2.success) {\r\n                        accessLog(req, new Date().getTime() - dt, true);\r\n                        res.json({ success: true, rowCount: result1.rowCount, message: \"Successfully added the contacts\" });\r\n                    }\r\n                    else {\r\n                        accessLog(req, new Date().getTime() - dt, false);\r\n                        res.json(result2);\r\n                    }\r\n                }\r\n                else {\r\n                    accessLog(req, new Date().getTime() - dt, true);\r\n                    res.json({ success: true, rowCount: result1.rowCount, message: \"Successfully added the contacts\" });\r\n                }\r\n            }\r\n            else {\r\n                accessLog(req, new Date().getTime() - dt, false);\r\n                res.json(result1);\r\n            }\r\n        }\r\n        else if (result.success && param.sop_contact_id != undefined) {\r\n            let result1 = yield sopCntrl.updSOPContact(param);\r\n            if (result1.success) {\r\n                yield sopCntrl.delSOPContactPorts(param);\r\n                if (param.origin_ports != undefined && param.origin_ports.length > 0) {\r\n                    let result3 = yield sopCntrl.insSOPContactPort(param);\r\n                    if (result3.success) {\r\n                        accessLog(req, new Date().getTime() - dt, true);\r\n                        res.json({ success: true, message: \"Successfully updated the contacts\" });\r\n                    }\r\n                    else {\r\n                        accessLog(req, new Date().getTime() - dt, false);\r\n                        res.json(result3);\r\n                    }\r\n                }\r\n                else {\r\n                    accessLog(req, new Date().getTime() - dt, true);\r\n                    res.json({ success: true, message: \"Successfully updated the contacts\" });\r\n                }\r\n            }\r\n            else {\r\n                accessLog(req, new Date().getTime() - dt, false);\r\n                res.json(result);\r\n            }\r\n        }\r\n        else {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json(result);\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insUpdContact Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.validateAndInsSOP(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPContacts', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPContacts(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSOPContacts Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOPContacts', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.delSOPContactPorts(param);\r\n        let result1 = yield sopCntrl.delSOPContact(param);\r\n        if (result.success && result1.success) {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json({ success: true, message: \"Contacts successfully removed from SOP\" });\r\n        }\r\n        else {\r\n            if (!result.success) {\r\n                accessLog(req, new Date().getTime() - dt, result.success);\r\n                res.json(result);\r\n            }\r\n            else if (!result1.success) {\r\n                accessLog(req, new Date().getTime() - dt, result1.success);\r\n                res.json(result1);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delSOPContacts Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPContactPorts', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPContactPorts(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSOPContactPorts Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPDocs', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPDocs(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSOPDocs Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getDocs', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield getDocs();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getDocs Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\n//not in use at 11/18/2021\r\nrouter.post('/saveDocs', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPDocs_old(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `saveDocs Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getSOPs', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield sopCntrl.getSOPs(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSOPs Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCountryLookup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = initCntrl.getCountry();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json({ success: true, result: result });\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getCountryLookup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getStateLookup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = initCntrl.stateColl();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json({ success: true, result: result });\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getStateLookup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCityLookup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = initCntrl.cityColl();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json({ success: true, result: result });\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getCityLookup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCompanyTypeLookup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let lvColl = initCntrl.lookupValueColl();\r\n        let accountType = lvColl.filter(x => x.lookup_type == 'account_type' && x.lookup_name != 'Freight Forwarder' && x.lookup_name != 'Consignee' && x.lookup_name != 'Enterprise');\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json({ success: true, result: accountType });\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getCompanyTypeLookup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyBasicDetails', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.getCompanyBasicDetails(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyBasicDetails Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insUpdCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let msg;\r\n        let result;\r\n        param[\"user_id\"] = req.decoded.userId;\r\n        if (param.company_id == undefined) {\r\n            result = yield companyContact.insCompany(param);\r\n            msg = \"Successfully Inserted Company\";\r\n        }\r\n        else {\r\n            result = yield companyContact.updCompany(param);\r\n            msg = \"Successfully Updated Company\";\r\n        }\r\n        if (result.success) {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json(result);\r\n        }\r\n        else {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json(result);\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insUpdCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSOPCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOPCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.delSOPCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delSOPCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getAllCompForSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getAllCompForSOPByCompType(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAllCompForSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addRemoveSOPCompanies', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPCompanies(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `addRemoveSOPCompanies Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCHForGroup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPCHForGroup(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSOPCHForGroup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkCreateCHForSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.checkSOPInCH(param);\r\n        if (result.success && result.rowCount == 0) {\r\n            param['userId'] = req.decoded.userId;\r\n            result = yield sopCntrl.insSOPCargoHandling(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `checkCreateCHForSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPCHIsSelected', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPCHIsSelected(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updSOPCHIsSelected Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPCHOptimalValue', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPCHOptimalValue(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updSOPCHOptimalValue Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPCHfields', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPCHfields(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updSOPCHfields Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getRoleStatForCompAdmin', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield userCtrl.getRoleStatForCompAdmin(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getRoleStatForCompAdmin Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getUserCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield userCtrl.getUserCompany(param.user_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getUserCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getInvitedCompaniesList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield companyContact.getInvitedCompaniesList(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getInvitedCompaniesList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getLicenseCompanyForRoles', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let userId = req.decoded.userId;\r\n        let result = yield userCtrl.getLicenseCompanyForRoles(userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getLicenseCompanyForRoles Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getRoleNameForCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield userCtrl.getRoleNameForCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getRoleNameForCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getExistingRoleDetails', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield userCtrl.getExistingRoleDetails(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getExistingRoleDetails Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getRolePermissionForExist', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield userCtrl.getRolePermissionForExist(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getRolePermissionForExist Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getRoleStatForAdmin', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield userCtrl.getRoleStatForAdmin();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getRoleStatForAdmin Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getUserStat', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield userCtrl.getUserStat();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getUserStat Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getAllUsers', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield userCtrl.getAllUsers(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAllUsers Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkUsrEmailExists', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield userCtrl.checkUsrEmailExists(param.email, param.user_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `checkUsrEmailExists Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updUser', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield userCtrl.updUser(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updUser Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/activateUser', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield userCtrl.activateUser(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `activateUser Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delUsr', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield userCtrl.delUsr(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delUsr Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getAllCompanyType', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let lvColl = initCntrl.lookupValueColl();\r\n        let accountType = lvColl.filter(x => x.lookup_type == 'account_type');\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json({ success: true, result: accountType });\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAllCompanyType Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insUserCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield userCtrl.insUserCompany(req.decoded.userId, param.user_id, param.data);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insUserCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getUserStatForCompAdmin', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield userCtrl.getUserStatForCompAdmin(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getUserStatForCompAdmin Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getUsersForCompAdmin', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield userCtrl.getUsersForCompAdmin(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getUsersForCompAdmin Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insUsrCompanyForCompAdmin', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield userCtrl.insUsrCompanyForCompAdmin(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insUsrCompanyForCompAdmin Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getAdminRoles', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield userCtrl.getAdminRoles(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAdminRoles Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getRoles', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.getRoles(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getRoles Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getModules', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield modules.getModules(param.is_licensed);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getModules Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getModulesList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield modules.getModulesList(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getModulesList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSubModules', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield modules.getSubModules(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `modules.getModules Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addModule', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield modules.addModule(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `modules.addModule Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updateModule', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield modules.updateModule(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `modules.updateModule Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getLicensedModulesForUser', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield modules.getLicensedModulesForUser(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getLicensedModulesForUser Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getAdminLookups', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getAdminLookups();\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getAdminLookups Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getLookup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield initCntrl.getLookup(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAdminLookups Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addLookupEntry', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        req.body['userId'] = req.decoded.userId;\r\n        let result = yield initCntrl.insLookupEntry(req.body);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.addLookupEntry Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updateLookupEntry', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        req.body['userId'] = req.decoded.userId;\r\n        let result = yield initCntrl.updateLookupEntry(req.body);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.updateLookupEntry Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addServiceEntry', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        req.body['userId'] = req.decoded.userId;\r\n        let result = yield initCntrl.addServiceEntry(req.body);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.addServiceEntry Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updateServiceEntry', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        req.body['userId'] = req.decoded.userId;\r\n        let result = yield initCntrl.updateServiceEntry(req.body);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.updateServiceEntry Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delServiceEntry', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        req.body['userId'] = req.decoded.userId;\r\n        let result = yield initCntrl.delServiceEntry(req.body);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.delServiceEntry Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delLookupName', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.delLookupName(req.body);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delLookupName Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield companyContact.delCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getAdminCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getAdminCompany();\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAdminCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getUsersCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getUsersCompany(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getUsersCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getInviteCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield companyContact.getInviteCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getInviteCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyLogo', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.filePath;\r\n        let result = yield companyContact.getCompanyLogo(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.sendFile(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyLogo Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: 'Image does not exists' });\r\n    }\r\n}));\r\nrouter.post('/removeCompanyLogo', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.removeImage;\r\n        let result = yield companyContact.removeCompanyLogo(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `removeCompanyLogo Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyRegDetails', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.company_id;\r\n        let result = yield companyContact.getCompanyRegDetails(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyRegDetails Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyAddressDetails', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.company_id;\r\n        let result = yield companyContact.getCompanyAddressDetails(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyAddressDetails Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyAllAddressDetails', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.company_id;\r\n        let result = yield companyContact.getCompanyAllAddressDetails(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyAddressDetails Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyUnqRoleName', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield userCtrl.getCompanyUnqRoleName(param.company_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyUnqRoleName Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getModulesAndRolesForCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield userCtrl.getModulesAndRolesForCompany(param.module_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getModulesAndRolesForCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validateRoleName', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield userCtrl.validateRoleName(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `validateRoleName Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insRole', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.insRole(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insRole Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updRole', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.updRole(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updRole Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/deleteRole', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield userCtrl.deleteRole(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `deleteEntries Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPContainer', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPContainer(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPContainer Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insSOPContainer', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPContainer(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.insSOPContainer Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPContainer', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPContainer(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPContainer Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/removeSOPContainer', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.removeSOPContainer(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.removeSOPContainer Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCarrierAlloc', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPCarrierAlloc(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCarrierAlloc Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insSOPCarrierAlloc', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPCarrierAlloc(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insSOPCarrierAlloc Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPCarrierAlloc', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPCarrierAlloc(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPCarrierAlloc Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/removeSOPCarrierAlloc', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.removeSOPCarrierAlloc(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.removeSOPCarrierAlloc Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCarrierAllocByPort', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPCarrierAllocByPort(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCarrierAllocByPort Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOPCarrierAllocForPort', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.delSOPCarrierAllocForPort(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delSOPCarrierAllocForPort Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPId', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPId(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPId Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCarrierPref', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPCarrierPref(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCarrierPref Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insSOPCarrierPref', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPCarrierPref(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.insSOPCarrierPref Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPCarrierPref', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPCarrierPref(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPCarrierPref Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/removeSOPCarrierPref', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.removeSOPCarrierPref(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.removeSOPCarrierPref Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCarrierPrefByPort', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPCarrierPrefByPort(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCarrierPrefByPort Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOPCarrierPrefForPort', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.delSOPCarrierPrefForPort(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delSOPCarrierPrefForPort Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCHGrp', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield getCHGrp();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCHGrp Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPPOBForGroup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPPOBForGroup(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPPOBForGroup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPDocForGroup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPDocForGroup(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPDocForGroup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPLCForGroup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPLCForGroup(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPLCForGroup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCarrierForGroup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPCarrierForGroup(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCarrierForGroup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSopPortCountryWiseList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSopPortCountryWiseList(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSopPortCountryWiseList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPConsigneeContacts', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPConsigneeContacts(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPConsigneeContacts Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPFFContacts', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPFFContacts(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPFFContacts Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPSchInvForGroup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSOPSchInvForGroup(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPSchInvForGroup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkCreatePOBForSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.checkSOPInPOB(param);\r\n        if (result.success && result.rowCount == 0) {\r\n            param['userId'] = req.decoded.userId;\r\n            result = yield sopCntrl.insSOPPOBooking(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.checkCreatePOBForSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkCreateLCForSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.checkSOPInLC(param);\r\n        if (result.success && result.rowCount == 0) {\r\n            param['userId'] = req.decoded.userId;\r\n            result = yield sopCntrl.insSOPLandingCost(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.checkCreateLCForSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkCreateCarrierForSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.checkSOPInCarrier(param);\r\n        if (result.success && result.rowCount == 0) {\r\n            param['userId'] = req.decoded.userId;\r\n            result = yield sopCntrl.insSOPCarrier(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.checkCreateCarrierForSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkCreateDocForSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        //let result = {success: true}\r\n        let result = yield sopCntrl.checkSOPInDoc(param);\r\n        if (result.success && result.rowCount == 0) {\r\n            param['userId'] = req.decoded.userId;\r\n            result = yield sopCntrl.insSOPDocs(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.checkCreateDocForSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkCreateInvForSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.checkSOPInSchInvoice(param);\r\n        if (result.success && result.rowCount == 0) {\r\n            param['userId'] = req.decoded.userId;\r\n            result = yield sopCntrl.insSOPSchInvoice(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.checkCreateInvForSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPPOBIsSelected', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPPOBIsSelected(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPPOBIsSelected Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPPOBfields', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPPOBfields(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPPOBfields Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPLCfields', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPLCfields(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPLCfields Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPCarrierfields', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPCarrierfields(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPCarrierfields Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPSchInvfields', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPSchInvfields(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPSchInvfields Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getPOBGrp', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield getPOBGrp();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getPOBGrp Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getDocGrp', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield sopCntrl.getDocGrp();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getDocGrp Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updDocFieldValue', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updDocFieldValue(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updDocFieldValue Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updDocisSelected', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updDocisSelected(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updDocisSelected Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updCarrierisSelected', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updCarrierisSelected(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updCarrierisSelected Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPContact', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPContact(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPContact Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPContactPort', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPContactPort(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPContactPort Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPDocs', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPDocs(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPDocs Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPPOBooking', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPPOBooking(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPPOBooking Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPCargoHandling', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPCargoHandling(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPCargoHandling Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPContainer', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPContainer(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPContainer Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPCarrierAlloc', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPCarrierAlloc(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPCarrierAlloc Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copySOPCarrierPref', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.copySOPCarrierPref(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.copySOPCarrierPref Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.delSOP(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyForId', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield companyContact.getCompanyForId(param.company_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyForId Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getLookupTypeList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getlookupTypeList();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getLookupTypeList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getServiceTypeList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getServiceTypeList();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getServiceTypeList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getserviceTypeColl', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        req.body['userId'] = req.decoded.userId;\r\n        let result = yield initCntrl.getserviceTypeColl(req.body);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getserviceTypeColl Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCompanyList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getCompanyList(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getCompanyList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getDocumentLookup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let lvColl = initCntrl.lookupValueColl();\r\n        let document = lvColl.filter(x => x.lookup_type == 'document');\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json({ success: true, result: document });\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getDocumentLookup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getLookupTypeId', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield initCntrl.getLookupTypeId(param.type);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getLookupTypeId Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insReq', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield insReq(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insReq Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getRequirement', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield getRequirement(param.type);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getRequirement Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delRequirement', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield delRequirement(param.req_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delRequirement Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyDataForInvite', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield companyContact.getCompanyData(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyDataForInvite Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkEmailInviteContact', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body.param;\r\n        let result = yield companyContact.checkEmailInviteContact(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `checkEmailInviteContact Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getAddressTypeList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getAddressTypeList();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAddressTypeList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getOfficeTypeList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getOfficeTypeList();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getOfficeTypeList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getParentCompanyList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param['userIds'].push(req.decoded.userId);\r\n        let result = yield companyContact.getParentCompanyList(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getParentCompanyList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getTaxRegistrationList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getTaxRegistrationList(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getTaxRegistrationList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCountryListForCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getCountryListForCompany();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCountryListForCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getStateListForCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getStateListForCompany(req.body.country_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getStateListForCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCityListForCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getCityListForCompany(req.body.state_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCityListForCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkParentCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield companyContact.checkParentCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `checkParentCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validateCompanyOwner', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"user_id\"] = req.decoded.userId;\r\n        let result = yield companyContact.validateCompanyOwner(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `validateCompanyOwner Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validateCompanyName', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield companyContact.validateCompanyName(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `validateCompanyName Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insCompanyLicense', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield companyContact.insCompanyLicense(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insCompanyLicense Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getlicenseModules', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.getlicenseModules(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getlicenseModules Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updCompanyLicense', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield companyContact.updCompanyLicense(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updCompanyLicense Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getLicenseDetails', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield getLicenseDetails();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getLicenseDetails Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/approveLicenseStatus', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield approveLicenseStatus(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `approveLicenseStatus Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/revokeLicenseStatus', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield revokeLicenseStatus(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `revokeLicenseStatus Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyContactDetails', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield companyContact.getCompanyContactDetails(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyContactDetails Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkPrevCompInvit', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield companyContact.checkPrevCompInvit(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `checkPrevCompInvit Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/inviteCompnay', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        req.body[\"userId\"] = req.decoded.userId;\r\n        let result = yield companyContact.addInviteCompany(req.body);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `addInviteCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPendingInviteForEmail', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield companyContact.getPendingInviteForEmail(param.email, param.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getPendingInviteForEmail Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPendingContactInviteForEmail', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield companyContact.getPendingContactInviteForEmail(param.email);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getPendingContactInviteForEmail Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updCompanyInviteAccept', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield companyContact.updCompanyInviteAccept(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updCompanyInviteAccept Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validateInviteeCompanyName', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.validateInviteeCompanyName(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `validateInviteeCompanyName Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updContactInviteAccept', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield companyContact.updContactInviteAccept(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updContactInviteAccept Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delCompanyContact', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.delCompanyContact(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delCompanyContact Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCompanyTypeList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getCompanyTypeList();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyTypeList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getInviteCompanyLicensedModulesList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.getInviteCompanyLicensedModulesList(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getInviteCompanyLicensedModulesList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updinviteCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.updInviteCompany(req.body);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updInviteCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delInviteCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.delInviteCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delInviteCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSharedLicenseModules', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.getSharedLicenseModules(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSharedLicenseModules Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getInviteCompanySharedLicensedModulesList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.getInviteCompanySharedLicensedModulesList(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getInviteCompanySharedLicensedModulesList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/inviteContactApproveRevoke', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.inviteContactApproveRevoke(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `inviteContactApproveRevoke Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/inviteCompanyApproveRevoke', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(req.body.param);\r\n        let result = yield companyContact.inviteCompanyApproveRevoke(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `inviteCompanyApproveRevoke Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insSOPCountry', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPCountry(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insSOPCountry Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCountries', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPCountries(param.sop_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSOPCountries Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getAllInvitedCompanyForCountry', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield companyContact.getAllInvitedCompanyForCountry(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAllInvitedCompanyForCountry Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getAddressForCompanyId', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield companyContact.getAddressForCompanyId(param.company_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAddressForCompanyId Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyContacts', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield companyContact.getCompanyContacts(param.company_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `companyContact.getCompanyContacts Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPServices', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPServices(param.sop_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPServices Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insSOPServices', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPServices(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.insSOPServices Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOPDoc', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.delSOPDoc(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delSOPDoc Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCommunication', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPCommunication(param.sop_id, param.instruction_type);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCommunication Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insSOPCommunication', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPCommunication(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.insSOPCommunication Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPCommunication', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPCommunication(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPCommunication Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOPCommunication', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.delSOPCommunication(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delSOPCommunication Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCommunicationForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPCommunicationForPrint(param.sop_id, param.instruction_type);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCommunicationForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPStakeholdersForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPStakeholdersForPrint(param.sop_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPStakeholdersForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPPOBForGroupForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPPOBForGroupForPrint(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPPOBForGroupForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCHForGroupForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPCHForGroupForPrint(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCHForGroupForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPDOCForGroupForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPDOCForGroupForPrint(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPDOCForGroupForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCRForGroupForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPCRForGroupForPrint(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCRForGroupForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getContactsEmailForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getContactsEmailForPrint(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getContactsEmailForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getContracts', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield sopCntrl.getContracts(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getContracts Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getServiceChargeGroup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getServiceChargeGroup();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getServiceChargeGroup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addContract', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param['user_id'] = req.decoded.userId;\r\n        let result = yield sopCntrl.addContract(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCHForGroupForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updateContract', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param['user_id'] = req.decoded.userId;\r\n        let result = yield sopCntrl.updateContract(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updateContract Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/validateContract', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.validateContract(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `validateContract Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPServiceChargeSummary', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPServiceChargeSummary(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPServiceChargeSummary Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPServiceChargeItemByGroup', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPServiceChargeItemByGroup(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPServiceChargeItemByGroup Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPServiceChargeItemByPortPair', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPServiceChargeItemByPortPair(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPServiceChargeItemByPortPair Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getChargeUom', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getChargeUom();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getChargeUom Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getLCLValidity', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getLCLValidity();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getLCLValidity Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getCurrency', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield initCntrl.getCurrency();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `initCntrl.getCurrency Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getAllocationIntervals', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield sopCntrl.getAllocationIntervals();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getAllocationIntervals Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCarrierList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPCarrierList(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCarrierList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCarrierForSOPPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPCarrierForSOPPrint(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCarrierForSOPPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insSOPServiceCharge', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"created_by\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insSOPServiceCharge(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.insSOPServiceCharge Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPServiceCharge', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"created_by\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPServiceCharge(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPServiceCharge Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOPServiceCharge', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"created_by\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.delSOPServiceCharge(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delSOPServiceCharge Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delContract', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"created_by\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.delContract(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delContract Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/extendContractValidity', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"created_by\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.extendContractValidity(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.extendContractValidity Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/downloadContractFiles', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"created_by\"] = req.decoded.userId;\r\n        let filePath = path_1.default.join(__dirname, config.settings[\"fileUploadPath\"], param.contract_id + \"\");\r\n        if (fs_1.default.existsSync(filePath + \".zip\")) {\r\n            fs_1.default.unlinkSync(filePath + \".zip\");\r\n        }\r\n        yield zip_a_folder_1.zip(filePath, filePath + \".zip\");\r\n        //let result = await sopCntrl.delContract(param);\r\n        //accessLog(req, new Date().getTime()-dt, result.success);\r\n        res.download(filePath + \".zip\");\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delContract Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delSOPPort', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.delSOPPort(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delSOPPort Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addSOPSHPort', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.addSOPSHPort(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `addSOPSHPort Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSopPortList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSopPortList(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSopPortList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSopContainerWeightForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield sopCntrl.getSopContainerWeightForPrint(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSopContainerWeightForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSopPortFreeStorageDetails', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield sopCntrl.getSopPortFreeStorageDetails(req.body);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSopPortFreeStorageDetails Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addSopPortFreeStorageValidity', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield sopCntrl.addSopPortFreeStorageValidity(req.body);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `addSopPortFreeStorageValidity Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addSopPortFreeStorageDays', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield sopCntrl.addSopPortFreeStorageDays(req.body);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `addSopPortFreeStorageDays Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getPrincipalListForSop', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getPrincipalListForSop(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `companyContact.getPrincipalListForSop Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getPrincipalListForContract', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getPrincipalListForContract(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `companyContact.getPrincipalListForContract Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCurrentContractByCompanyId', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getCurrentContractByCompanyId(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCurrentContractByCompanyId Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getStakeholderList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield companyContact.getStakeholderList(param.principal_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `companyContact.getStakeholderList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getFFListForAddSOP', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getFFListForAddSOP(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getFFListForAddSOP Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPStakeholderList', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPStakeholderList(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPStakeholderList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insNewSOPStakeholders', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.insNewSOPStakeholders(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.insNewSOPStakeholders Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updSOPStakeholders', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.updSOPStakeholders(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updSOPStakeholders Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSopPortCount', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSopPortCount(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSopPortCount Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delContractFile', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.delContractFile(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.delContractFile Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getMyCompanyAndType', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getMyCompanyAndType(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `companyContact.getMyCompanyAndType Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getWhoInvitedMe', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getWhoInvitedMe(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `companyContact.getWhoInvitedMe Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getMyParentCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield companyContact.getMyParentCompany(req.decoded.userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `companyContact.getMyParentCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insUpdSOPCarrierAllocation', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let msg;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result;\r\n        if (param.sop_ca_id == undefined) {\r\n            result = yield sopCntrl.insSOPCarrierAllocation(param);\r\n            msg = \"Successfully Inserted Carrier SOP\";\r\n        }\r\n        else {\r\n            result = yield sopCntrl.updSOPCarrierAllocation(param);\r\n            msg = \"Successfully Updated Carrier SOP\";\r\n        }\r\n        if (result.success) {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json(result);\r\n        }\r\n        else {\r\n            accessLog(req, new Date().getTime() - dt, result.success);\r\n            res.json(result);\r\n        }\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insUpdSOPCarrierAllocation Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updCAFieldValue', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.updCAFieldValue(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.updCAFieldValue Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPCarrierAllocation', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPCarrierAllocation(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPCarrierAllocation Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/saveCarrierPreference', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.saveCarrierPreference(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.saveCarrierPreference Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSOPSCHINVForGroupForPrint', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        let result = yield sopCntrl.getSOPSCHINVForGroupForPrint(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.getSOPSCHINVForGroupForPrint Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insShipmentTrackingIns', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.insShipmentTrackingIns(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `addRemoveSOPCompanies Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updShipmentTrackingIns', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.updShipmentTrackingIns(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updShipmentTrackingIns Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getShipmentTrackingIns', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.getShipmentTrackingIns(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getShipmentTrackingIns Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/fetchProfileInfo', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.fetchProfileInfo(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `fetchProfileInfo Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSubModulesForSelModule', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield userCtrl.getSubModulesForSelModule(param.module_id);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSubModulesForSelModule Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getEventsForSubModule', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        if (param.ismultiple) {\r\n            for (let i of param.sub_module_ids) {\r\n                param.sub_module_id = i.sub_module_id;\r\n                result = yield userCtrl.getEventsForSubModule(param);\r\n            }\r\n        }\r\n        else {\r\n            result = yield userCtrl.getEventsForSubModule(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getEventsForSubModule Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/createUpdateRole', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        if (param.role_id != undefined) {\r\n            result = yield userCtrl.updUserRole(param);\r\n        }\r\n        else {\r\n            result = yield userCtrl.insUserRole(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getEventsForSubModule Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getRolesForGrid', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.getRolesForGrid(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getRolesForGrid Exception ${e.message}, ${e.stack}`);\r\n    }\r\n}));\r\nrouter.post('/getRolesOfCompany', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield userCtrl.getRolesOfCompany(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getRolesOfCompany Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getEventForView', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield userCtrl.getEventForView(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getEventForView Exception ${e.message}, ${e.stack}`);\r\n    }\r\n}));\r\nrouter.post('/getEventsPermission', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield userCtrl.getEventsPermission(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getEventsPermission Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/deleteRoleUser', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield userCtrl.deleteRoleUser(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `deleteRoleUser Exception ${e.message}, ${e.stack}`);\r\n    }\r\n}));\r\nrouter.post('/getUserRoles', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield userCtrl.getUserRoles(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getUserRoles Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getModulesForRoles', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        result = yield companyContact.getModulesForRoles();\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getModulesForRoles Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSubModulesForRoles', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield companyContact.getSubModulesForRoles(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSubModulesForRoles Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getEventsPermissionForRole', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield userCtrl.getEventsPermissionForRole(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getEventsPermissionForRole Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getAdminModules', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield modules.getAdminModules();\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAdminModules Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insUpsCompanyContact', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        if (param.contact_invite_id == undefined && !param.is_admin) {\r\n            result = yield companyContact.insCompanyContact(param);\r\n        }\r\n        else if (param.contact_invite_id != undefined && param.is_update && !param.is_admin) {\r\n            result = yield companyContact.updCompanyContact(param);\r\n        }\r\n        else {\r\n            result = yield companyContact.insUserEventMapping(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insUpsCompanyContact Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSubModulesForView', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield userCtrl.getSubModulesForView(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getSubModulesForView Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getEventId', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let userId = req.decoded.userId;\r\n        result = yield modules.getEventId(userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getEventId Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getEventsForSelSubModules', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.getEventsForSelSubModules(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getEventsForSelSubModules Exception ${e.message}, ${e.stack}`);\r\n    }\r\n}));\r\nrouter.post('/getEventsSubModulesWise', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        result = yield sopCntrl.getEventsSubModulesWise(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getEventsSubModulesWise Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getAdminCompanyForRoles', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let userId = req.decoded.userId;\r\n        let result = yield userCtrl.getAdminCompanyForRoles(userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAdminCompanyForRoles Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getPurchaseOrders', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let userId = req.decoded.userId;\r\n        let result = yield manageOrderCntrl.getPurchaseOrders(userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getPurchaseOrders Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPurchaseOrdersCompanywise', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield manageOrderCntrl.getPurchaseOrdersCompanywise(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getPurchaseOrdersCompanywise Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addOrdersTransaction', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield manageOrderCntrl.addOrdersTransaction(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `addOrdersTransaction Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updOrdersTransaction', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield manageOrderCntrl.updOrdersTransaction(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updOrdersTransaction Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delTransaction', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield manageOrderCntrl.delTransaction(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delTransaction Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getOrderTransactions', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield manageOrderCntrl.getOrderTransactions(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getOrderTransactions Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/viewTransactionsAttachedFile', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield manageOrderCntrl.viewTransactionsAttachedFile(param);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.sendFile(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `viewTransactionsAttachedFile Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/mapServices', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield userCtrl.mapServices(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `mapServices Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updMappedServices', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield userCtrl.updMappedServices(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updMappedServices Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/viewMappedServices', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result, param;\r\n        let dt = new Date().getTime();\r\n        let userId = req.decoded.userId;\r\n        result = yield userCtrl.viewMappedServices(userId);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `viewMappedServices Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/delMappedServices', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        result = yield userCtrl.delMappedServices(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `delMappedServices Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getAvailableServices', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let result;\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        result = yield userCtrl.getAvailableServices(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAvailableServices Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/copyDataforServiceCharges', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.copyDataforServiceCharges(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `copyDataforServiceCharges Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getShipmentBooking', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let userId = req.decoded.userId;\r\n        let result = yield shipmentBook.getShipmentBooking(userId);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getModulesList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkCreateCommIns', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = req.body;\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.checkCreateCommIns(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `sopCntrl.checkCreateCommIns Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/addremoveCommunicationIns', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield sopCntrl.addremoveCommunicationIns(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `addremoveCommunicationIns Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCompanyLogoPaths', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield shipBook.getCompanyLogoPaths(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCompanyLogoPaths Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getPOListforAddPOs', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield shipBook.getPOListforAddPOs(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getPOListforAddPOs Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/updateTEUValue', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        let result = yield shipBook.updateTEUValue(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `updateTEUValue Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/insUpdCustomView', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result;\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        if (param.sbcv_id == undefined) {\r\n            result = yield shipBook.insCustomView(param);\r\n        }\r\n        else {\r\n            result = yield shipBook.updCustomView(param);\r\n        }\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `insUpdCustomView Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getCustomViews', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield shipBook.getCustomViews(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getCustomViews Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/deleteCustomView', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield shipBook.deleteCustomView(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `deleteCustomView Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/checkForSelfInvite', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let result = yield userCtrl.checkForSelfInvite(req.body.email);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `checkForSelfInvite Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getAccessProvidedUsers', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param['userId'] = req.decoded.userId;\r\n        let result = yield userCtrl.getAccessProvidedUsers(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getAccessProvidedUsers Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.get('/getRegisteredSchedulers', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let userId = req.decoded.userId;\r\n        let result = yield userCtrl.getRegisteredSchedulers(userId);\r\n        accessLog(req, new Date().getTime() - dt, true);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `getModulesList Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\nrouter.post('/getSchedulerLog', (req, res) => __awaiter(void 0, void 0, void 0, function* () {\r\n    try {\r\n        let dt = new Date().getTime();\r\n        let param = JSON.parse(settings.decrypt(req.decoded.keyEncryptDecrypt, req.body.param));\r\n        param[\"userId\"] = req.decoded.userId;\r\n        let result = yield userCtrl.getSchedulerLog(param);\r\n        accessLog(req, new Date().getTime() - dt, result.success);\r\n        res.json(result);\r\n    }\r\n    catch (e) {\r\n        log.logger(\"error\", `ingestion.getSchedulerLog Exception ${e.message}, ${e.stack}`);\r\n        res.json({ success: false, error: true, message: e.message });\r\n    }\r\n}));\r\n//getMyCompanyAndType, getWhoInvitedMe, getMyParentCompany\r\n\n\n//# sourceURL=webpack://tsserver/./src/api/api.ts?");

/***/ }),

/***/ "./src/config/constants.ts":
/*!*********************************!*\
  !*** ./src/config/constants.ts ***!
  \*********************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst rand = crypto_1.randomBytes(32).toString('hex');\r\nlet settings = {\r\n    // jwtKey: process.env.WAKA_JWT_KEY, //81d7cadc5912cc86e46c0534108fd4b26c36ea6c127bdc390a436f143314407f\r\n    jwtKey: '81d7cadc5912cc86e46c0534108fd4b26c36ea6c127bdc390a436f143314407f',\r\n    pgDbConfig: {\r\n        // user: process.env.WAKA_DATABASE_USERNAME,\r\n        // database: process.env.WAKA_DATABASE_NAME,\r\n        // port: process.env.WAKA_DATABASE_PORT,\r\n        // host: process.env.WAKA_DATABASE_HOST,\r\n        // password: process.env.WAKA_DATABASE_PASSWORD,\r\n        // max: process.env.WAKA_DATABASE_MAX_CONNECTION, //50\r\n        // idleTimeoutMillis: process.env.WAKA_DATABASE_IDLE_TIMEOUT, //300000\r\n        user: 'postgres',\r\n        database: 'waka',\r\n        port: 5432,\r\n        /*Appedo Test Env*/\r\n        host: '35.160.246.188',\r\n        password: 'n0#ntry@^pp#d0',\r\n        max: 50,\r\n        idleTimeoutMillis: 300000,\r\n    },\r\n    // tokenExpiresIn: process.env.WAKA_TOKEN_EXPIRES,\r\n    tokenExpiresIn: '12h',\r\n    fileUploadPath: '../../tsserver/fileuploads/',\r\n    ordersTransactionAttachementPath: '../../tsserver/fileuploads/ordersTransaction',\r\n    ingestionUploadPath: '../../tsserver/fileuploads/ingestion/'\r\n};\r\nconst MAIL_SERVICE_URL = process.env.WAKA_MAIL_SERVICE_URL;\r\nconst IV_LENGTH = process.env.WAKA_IV_LENGTH;\r\nconst WAKA_URL = process.env.WAKA_URL;\r\nconst isMailServiceEnabled = false;\r\nfunction encrypt(eKey, text) {\r\n    let startNum = hexToShort(eKey.substring(eKey.length - 2));\r\n    let key = eKey.substring(startNum, startNum + 32);\r\n    let iv = crypto_1.randomBytes(IV_LENGTH);\r\n    let cipher = crypto_1.createCipheriv('aes-256-cbc', Buffer.from(key), iv);\r\n    let encrypted = cipher.update(text);\r\n    encrypted = Buffer.concat([encrypted, cipher.final()]);\r\n    return iv.toString('hex') + ':' + encrypted.toString('hex');\r\n}\r\nfunction decrypt(dKey, text) {\r\n    let startNum = hexToShort(dKey.substring(dKey.length - 2));\r\n    let key = dKey.substring(startNum, startNum + 32);\r\n    let textParts = text.split(':');\r\n    let iv = Buffer.from(textParts.shift(), 'hex');\r\n    let encryptedText = Buffer.from(textParts.join(\":\"), 'hex');\r\n    let decipher = crypto_1.createDecipheriv('aes-256-cbc', Buffer.from(key), iv);\r\n    let decrypted = decipher.update(encryptedText);\r\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\r\n    return decrypted.toString();\r\n}\r\nfunction MD5Hash(msgBuffer) {\r\n    return crypto_1.createHash('md5').update(msgBuffer).digest(\"hex\");\r\n}\r\nfunction randomString(length) {\r\n    var result = '';\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$-#^&';\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return result;\r\n}\r\nfunction shortToHex(short) {\r\n    return short.toString(16).padStart(2, \"0\");\r\n}\r\nfunction hexToShort(hex) {\r\n    return parseInt(hex, 16);\r\n}\r\nfunction randBytes(length) {\r\n    return crypto_1.randomBytes(length);\r\n}\r\ndirAvailablityChecker();\r\nfunction dirAvailablityChecker() {\r\n    if (!fs.existsSync(path.join(__dirname, settings.ordersTransactionAttachementPath))) {\r\n        fs.mkdirSync(path.join(__dirname, settings.ordersTransactionAttachementPath));\r\n    }\r\n}\r\nmodule.exports = { decrypt, encrypt, settings, MD5Hash, MAIL_SERVICE_URL, WAKA_URL, randomString, shortToHex, hexToShort, randBytes, isMailServiceEnabled };\r\n\n\n//# sourceURL=webpack://tsserver/./src/config/constants.ts?");

/***/ }),

/***/ "./src/controllers/CargoHandleController.ts":
/*!**************************************************!*\
  !*** ./src/controllers/CargoHandleController.ts ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst cargoHandlingModel_1 = __webpack_require__(/*! ../models/cargoHandlingModel */ \"./src/models/cargoHandlingModel.ts\");\r\nconst docClass = new cargoHandlingModel_1.CHModel();\r\nfunction getCHGrp() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield docClass.getCHGrp();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCHForGrp(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield docClass.getCHForGrp(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { getCHGrp, getCHForGrp };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/CargoHandleController.ts?");

/***/ }),

/***/ "./src/controllers/ShipmentBookingController.ts":
/*!******************************************************!*\
  !*** ./src/controllers/ShipmentBookingController.ts ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst ShipmentBookingModel_1 = __webpack_require__(/*! ./../models/ShipmentBookingModel */ \"./src/models/ShipmentBookingModel.ts\");\r\nconst settings = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nlet shipBookClass = new ShipmentBookingModel_1.ShipmentBookingModel();\r\nfunction getShipmentBooking(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield shipBookClass.getShipmentBooking(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPOListforAddPOs(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield shipBookClass.getPOListforAddPOs(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyLogoPaths(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield shipBookClass.getCompanyLogoPaths(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updateTEUValue(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield shipBookClass.updateTEUValue(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insCustomView(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield shipBookClass.insCustomView(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, message: 'Custom View Created' };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updCustomView(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield shipBookClass.updCustomView(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, message: 'Custom View Updated' };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCustomViews(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield shipBookClass.getCustomViews(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction deleteCustomView(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield shipBookClass.deleteCustomView(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, message: `${param.view_name} Deleted` };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { getShipmentBooking, getCompanyLogoPaths, getPOListforAddPOs, updateTEUValue, insCustomView, updCustomView, getCustomViews, deleteCustomView };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/ShipmentBookingController.ts?");

/***/ }),

/***/ "./src/controllers/companyContactController.ts":
/*!*****************************************************!*\
  !*** ./src/controllers/companyContactController.ts ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst companyContactModel_1 = __webpack_require__(/*! ../models/companyContactModel */ \"./src/models/companyContactModel.ts\");\r\nconst settings = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst fetch = __webpack_require__(/*! node-fetch */ \"node-fetch\");\r\nconst companyContactClass = new companyContactModel_1.CompanyContactModel();\r\nfunction validateCompanyOwner(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.validateCompanyOwner(param);\r\n            if (result.success) {\r\n                if (result.rowCount > 0) {\r\n                    if (result.rows[0].owned_by == param.user_id) {\r\n                        return { success: true, rowCount: result.rowCount, result: result.rows, msg: 'his own company', own_company: true };\r\n                    }\r\n                    else {\r\n                        return { success: true, rowCount: result.rowCount, msg: 'owned by other', own_company: false };\r\n                    }\r\n                }\r\n                else {\r\n                    let msg = 'Company Name Available';\r\n                    return { success: true, rowCount: result.rowCount, result: msg, company_name_avl: true };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validateCompanyName(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.validateCompanyName(param);\r\n            if (result.success) {\r\n                let message = result.rowCount == 0 ? 'Available' : 'Company Name already exist';\r\n                return { success: true, rowCount: result.rows, result: message };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyData(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyData(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAddressTypeList() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getAddressTypeList();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getParentCompanyList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getParentCompanyList(param.userIds);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getTaxRegistrationList(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getTaxRegistrationList(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCountryListForCompany() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCountryListForCompany();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getStateListForCompany(country_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getStateListForCompany(country_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCityListForCompany(state_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCityListForCompany(state_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getOfficeTypeList() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getOfficeTypeList();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getBuyer(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getBuyer(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getFF(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getFF(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCarrier() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCarrier();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let filePath, relativePath, msg;\r\n            if (param[\"logo_file_name\"] != undefined) {\r\n                let image = param.company_logo.replace(/data:image\\/([A-Za-z]+);base64\\,/g, \"\");\r\n                let unqFileName = new Date().getTime().toString(36);\r\n                filePath = path.join(__dirname, \"../fileuploads/\", unqFileName + param[\"logo_file_name\"]);\r\n                relativePath = \"../fileuploads/\" + unqFileName + param[\"logo_file_name\"];\r\n                try {\r\n                    fs.writeFileSync(filePath, image, 'base64');\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n            param[\"relative_path\"] = relativePath;\r\n            param['invite_company'] = false;\r\n            let result = yield companyContactClass.insCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, message: 'Company Registered Successfully.' };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyBasicDetails(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyBasicDetails(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\n//not used after 18-10-2021\r\nfunction insCompany_old(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let filePath, relativePath, isResponse = false, msg;\r\n            if (param[\"logo_file_name\"] != undefined) {\r\n                let image = param.company_logo.replace(/data:image\\/([A-Za-z]+);base64\\,/g, \"\");\r\n                let unqFileName = new Date().getTime().toString(36);\r\n                filePath = path.join(__dirname, \"../fileuploads/\", unqFileName + param[\"logo_file_name\"]);\r\n                relativePath = \"../fileuploads/\" + unqFileName + param[\"logo_file_name\"];\r\n                try {\r\n                    fs.writeFileSync(filePath, image, 'base64');\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n            }\r\n            param[\"relative_path\"] = relativePath;\r\n            param['invite_company'] = false;\r\n            let result = yield companyContactClass.insCompany(param);\r\n            if (result.success) {\r\n                param.company_id = result.rows[0].company_id;\r\n                let res = yield companyContactClass.insTaxDetails(param);\r\n                let res1 = yield companyContactClass.insCompanyAddress(param);\r\n                if (res.success && res1.success) {\r\n                    isResponse = true;\r\n                    msg = \"Company added.\";\r\n                }\r\n                else if (res.success == false) {\r\n                    yield companyContactClass.delCompanyParent(param.company_id);\r\n                    yield companyContactClass.delCompanyAddress(res1.rows[0].comp_add_id);\r\n                    msg = \"Error in adding tax details \" + res.message;\r\n                }\r\n                else if (res1.success == false) {\r\n                    yield companyContactClass.delCompanyParent(param.company_id);\r\n                    if (param.tax_details.length != 0) {\r\n                        yield companyContactClass.delCompanyRegistrationParent(res.rows[0].comp_reg_id);\r\n                    }\r\n                    msg = \"Error in adding company address \" + res1.message;\r\n                }\r\n            }\r\n            else {\r\n                msg = result.message;\r\n            }\r\n            if (isResponse && result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, message: msg };\r\n            }\r\n            else {\r\n                return { success: false, message: msg };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let filePath, relativePath, isResponse = false, msg;\r\n            if (param[\"logo_file_name\"] != undefined) {\r\n                let image = param.company_logo.replace(/data:image\\/([A-Za-z]+);base64\\,/g, \"\");\r\n                let unqFileName = new Date().getTime().toString(36);\r\n                filePath = path.join(__dirname, \"../fileuploads/\", unqFileName + param[\"logo_file_name\"]);\r\n                relativePath = \"../fileuploads/\" + unqFileName + param[\"logo_file_name\"];\r\n                try {\r\n                    fs.writeFileSync(filePath, image, 'base64');\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n                param[\"relative_path\"] = relativePath;\r\n            }\r\n            else {\r\n                param[\"relative_path\"] = param.exist_logo_path;\r\n            }\r\n            let result = yield companyContactClass.updCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, message: 'Company Updated Successfully.' };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\n//not used after 18-10-2021\r\nfunction updCompany_old(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let filePath, relativePath, isResponse = false, msg;\r\n            if (param[\"logo_file_name\"] != undefined) {\r\n                let image = param.company_logo.replace(/data:image\\/([A-Za-z]+);base64\\,/g, \"\");\r\n                let unqFileName = new Date().getTime().toString(36);\r\n                filePath = path.join(__dirname, \"../fileuploads/\", unqFileName + param[\"logo_file_name\"]);\r\n                relativePath = \"../fileuploads/\" + unqFileName + param[\"logo_file_name\"];\r\n                try {\r\n                    fs.writeFileSync(filePath, image, 'base64');\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n                param[\"relative_path\"] = relativePath;\r\n            }\r\n            else {\r\n                param[\"relative_path\"] = param.exist_logo_path;\r\n            }\r\n            let result = yield companyContactClass.updCompany(param);\r\n            if (result.success) {\r\n                let res = yield companyContactClass.insCompanyAddress(param);\r\n                let res1 = yield companyContactClass.insTaxDetails(param);\r\n                if (res.success && res1.success) {\r\n                    isResponse = true;\r\n                    msg = \"Company updated.\";\r\n                }\r\n                else if (res.success == false) {\r\n                    msg = res.message;\r\n                }\r\n                else if (res1.success == false) {\r\n                    msg = res1.message;\r\n                }\r\n            }\r\n            else {\r\n                msg = result.message;\r\n            }\r\n            if (isResponse && result.success) {\r\n                return { success: true, rowCount: result.rowCount, message: msg };\r\n            }\r\n            else {\r\n                return { success: false, message: msg };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyLogo(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let imagePath = path.join(__dirname, param);\r\n            if (fs.existsSync(imagePath)) {\r\n                return imagePath;\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction removeCompanyLogo(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            if (param != undefined) {\r\n                let oldfilePath1 = path.join(__dirname, param);\r\n                if (fs.existsSync(oldfilePath1)) {\r\n                    fs.unlinkSync(oldfilePath1);\r\n                    return { success: true, message: 'Image Deleted.' };\r\n                }\r\n                else {\r\n                    return { success: true, message: 'Image Not Deleted.' };\r\n                }\r\n            }\r\n            else {\r\n                return { success: true, message: 'Image Not Deleted' };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyRegDetails(company_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyRegDetails(company_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyAddressDetails(company_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyAddressDetails(company_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyAllAddressDetails(company_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyAllAddressDetails(company_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAdminCompany() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getAdminCompany();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getUsersCompany(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getUsersCompany(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getInvitedCompaniesList(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getInvitedCompaniesList(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getInviteCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getInviteCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.delCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insCompanyLicense(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.insCompanyLicense(param);\r\n            if (result.success) {\r\n                param['cl_id'] = result.rows[0].cl_id;\r\n                let res = yield companyContactClass.insCompanyLicenseModule(param);\r\n                if (res.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    yield companyContactClass.delCompanyLicenseParent(result.rows[0].cl_id);\r\n                    return { success: false, message: res.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insCompanySharedLicense(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.insCompanySharedLicense(param);\r\n            if (result.success) {\r\n                param['sl_id'] = result.rows[0].sl_id;\r\n                param['cl_id'] = result.rows[0].cl_id;\r\n                let res = yield companyContactClass.insCompanySharedLicenseModule(param);\r\n                if (res.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    yield companyContactClass.delInsCompanySharedLicenseParent(result.rows[0].sl_id);\r\n                    return { success: false, message: res.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getlicenseModules(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getlicenseModules(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSharedLicenseModules(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getSharedLicenseModules(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updCompanyLicense(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.delCompanyLicense(param);\r\n            if (result.success) {\r\n                let res = yield companyContactClass.insCompanyLicenseModule(param);\r\n                if (res.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: res.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyForId(companyId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyForId(companyId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkPrevCompInvit(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.checkPrevCompInvit(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addInviteCompany_wrong_changes(param) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            param.poi_me_id ? param[\"poi_master_error_id\"] = param.poi_me_id : '';\r\n            let rest = yield companyContactClass.checkCompanyLicense(param.invitee_company_id);\r\n            if (rest.rows.length != 0 && ((_a = rest.rows[0]) === null || _a === void 0 ? void 0 : _a.is_approved)) {\r\n                let result = yield companyContactClass.addInviteCompanyDetails(param);\r\n                if (result.success) {\r\n                    if (result.rowCount > 0) {\r\n                        param[\"company_invite_id\"] = result.rows[0].company_invite_id;\r\n                        let result1 = yield companyContactClass.addInviteCompanyModules(param);\r\n                        if (result1.success) {\r\n                            return { success: true, message: \"Successfully company has been invited with modules\" };\r\n                        }\r\n                        else {\r\n                            yield companyContactClass.delInviteCompanyPerm(result.rows[0].company_invite_id);\r\n                            return { success: false, message: \"Could not invite Company Err\" + result1.message };\r\n                        }\r\n                    }\r\n                    else\r\n                        return { success: false, message: \"Could not invite company\" };\r\n                }\r\n                else {\r\n                    return { success: false, message: result.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: param.invitee_company_name + ' Has No License' };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addInviteCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            param.poi_me_id ? param[\"poi_master_error_id\"] = param.poi_me_id : '';\r\n            let result = yield companyContactClass.addInviteCompanyDetails(param);\r\n            if (result.success) {\r\n                if (result.rowCount > 0) {\r\n                    param[\"company_invite_id\"] = result.rows[0].company_invite_id;\r\n                    let result1 = yield companyContactClass.addInviteCompanyModules(param);\r\n                    if (result1.success) {\r\n                        return { success: true, message: \"Successfully company has been invited with modules\" };\r\n                    }\r\n                    else {\r\n                        yield companyContactClass.delInviteCompanyPerm(result.rows[0].company_invite_id);\r\n                        return { success: false, message: \"Could not invite Company Err\" + result1.message };\r\n                    }\r\n                }\r\n                else\r\n                    return { success: false, message: \"Could not invite company\" };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insCompanyContact(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.insCompanyContact(param);\r\n            if (result.success) {\r\n                let data = yield companyContactClass.insUserEventMapping(param);\r\n                if (data.success) {\r\n                    return { success: true, message: `Successfully Invited ${param.name} as a contact` };\r\n                }\r\n                else {\r\n                    return { success: false, message: data.message };\r\n                }\r\n            }\r\n            else {\r\n                if (result.message.includes('duplicate key value violates unique constraint')) {\r\n                    result.message = \"Already Exists !\";\r\n                }\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updInviteCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.updInviteCompany(param);\r\n            if (result.success) {\r\n                let licModule = yield companyContactClass.updInviteCompanyModules(param);\r\n                if (licModule.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: licModule.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updCompanyContact(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.updCompanyContact(param);\r\n            if (result.success) {\r\n                yield insUserEventMapping(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, message: \"Successfully updated contact details\" };\r\n                // let del = await companyContactClass.deleteUserEventMapping(param);\r\n                // if(del.success){\r\n                //     let data = await companyContactClass.insUserEventMapping(param);\r\n                //     return {success:true,rowCount:result.rowCount, result:result.rows , message:\"Successfully updated contact details\"};\r\n                // } else {\r\n                //     return {success:false, message:result.message };\r\n                // }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insUserEventMapping(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.deleteUserEventMapping(param);\r\n            if (result.success) {\r\n                let data = yield companyContactClass.insUserEventMapping(param);\r\n                if (data.success) {\r\n                    return { success: true, rowCount: data.rowCount, result: data.rows, message: `Roles Updated Succesfully for ${param.name}` };\r\n                }\r\n                else {\r\n                    return { success: false, message: data.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delCompanyContact(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.deleteUserEventMapping(param);\r\n            if (result.success) {\r\n                let data = yield companyContactClass.delCompanyContactPerm(param);\r\n                if (data.success) {\r\n                    return { success: true, rowCount: data.rowCount, result: data.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: data.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delInviteCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.delInviteCompanyPerm(param.company_invite_id);\r\n            if (result.success) {\r\n                if (param.poi_master_error_id) {\r\n                    yield companyContactClass.updMasterError(param.poi_master_error_id);\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyTypeList() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyTypeList();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getInviteCompanyLicensedModulesList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getInviteCompanyLicensedModulesList_old(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getInviteCompanySharedLicensedModulesList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getInviteCompanySharedLicensedModulesList(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction sendInviteCompanyMail(email, user_id, inviteCompanyName, inviteeName, route) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let encryptData = {\r\n                user_id: user_id,\r\n                email_id: email\r\n            };\r\n            let queryData = settings.encrypt(JSON.stringify(encryptData));\r\n            const emailId = {\r\n                emailId: email,\r\n                cc: '',\r\n                bcc: ''\r\n            };\r\n            let mailDetails = {\r\n                inviteename: inviteeName,\r\n                companyname: inviteCompanyName,\r\n                LINK: ''\r\n            };\r\n            route == 'login' ? mailDetails.LINK = settings.WAKA_URL + \"?data=\" + queryData : mailDetails.LINK = settings.WAKA_URL + \"/signup?data=\" + queryData;\r\n            let emailParam = {\r\n                htmlFile: '',\r\n                mailDetails: JSON.stringify(mailDetails),\r\n                emailIds: JSON.stringify(emailId),\r\n                mailSubject: 'Invite Company',\r\n            };\r\n            route == 'login' ? emailParam.htmlFile = 'waka_invitation_login' : emailParam.htmlFile = 'waka_invitation';\r\n            let url = settings.MAIL_SERVICE_URL + \"/getMailParam\";\r\n            let response = yield fetch(url, {\r\n                method: 'POST',\r\n                body: JSON.stringify(emailParam),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            let jsonRes = yield response.json();\r\n            if (jsonRes.success) {\r\n                return { success: true };\r\n            }\r\n            else {\r\n                return { success: false, message: jsonRes.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyContactDetails(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyContactDetails(param);\r\n            if (result.success) {\r\n                let data = yield companyContactClass.getCompanyAdminAsContact(param);\r\n                if (data.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows, data: data.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: data.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPendingInviteForEmail(email, userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getPendingInviteForEmail(email, userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPendingContactInviteForEmail(email) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getPendingContactInviteForEmail(email);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updCompanyInviteAccept(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.updCompanyInviteAccept(param);\r\n            if (result.success && param.type == \"accept\") {\r\n                if (param.poi_master_error_id != undefined) {\r\n                    if (param.master_error_type == 'MASTER_SUPPLIER_NAME') {\r\n                        let insSupRef = yield companyContactClass.insSupplierRef(param);\r\n                        if (insSupRef.success && insSupRef.rowCount > 0) {\r\n                            let delaction = yield companyContactClass.delActiontakenMasterError(param.poi_master_error_id);\r\n                            if (delaction.success) {\r\n                                let error = yield companyContactClass.getMasterErrors(param);\r\n                                if (error.success && error.rows[0].error_count == 0) {\r\n                                    param['is_master_under_process'] = false;\r\n                                    let upd = yield companyContactClass.updMasterUnderProcess(param);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (param.master_error_type == 'MASTER_FACTORY_NAME') {\r\n                        let insFacRef = yield companyContactClass.insFactoryRef(param);\r\n                        if (insFacRef.success && insFacRef.rowCount > 0) {\r\n                            let delaction = yield companyContactClass.delActiontakenMasterError(param.poi_master_error_id);\r\n                            if (delaction.success) {\r\n                                let error = yield companyContactClass.getMasterErrors(param);\r\n                                if (error.success && error.rows[0].error_count == 0) {\r\n                                    param['is_master_under_process'] = false;\r\n                                    let upd = yield companyContactClass.updMasterUnderProcess(param);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (param.master_error_type == 'MASTER_BUYER_NAME') {\r\n                        let insBuyerRef = yield companyContactClass.insBuyerRef(param);\r\n                        if (insBuyerRef.success && insBuyerRef.rowCount > 0) {\r\n                            let delaction = yield companyContactClass.delActiontakenMasterError(param.poi_master_error_id);\r\n                            if (delaction.success) {\r\n                                let error = yield companyContactClass.getMasterErrors(param);\r\n                                if (error.success && error.rows[0].error_count == 0) {\r\n                                    param['is_master_under_process'] = false;\r\n                                    let upd = yield companyContactClass.updMasterUnderProcess(param);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                yield insUserCompany(param);\r\n                yield insCompanySharedLicense(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else if (result.success && param.type == \"deny\") {\r\n                yield companyContactClass.delCompanyInviteModules(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkParentCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.checkParentCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insUserCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.insUserCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction inviteContactApproveRevoke(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.inviteContactApproveRevoke(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction inviteCompanyApproveRevoke(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.inviteCompanyApproveRevoke(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAllInvitedCompanyForCountry(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getAllInvitedCompanyForCountry(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updContactInviteAccept(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.updContactInviteAccept(param);\r\n            if (result.success && param.type != 'deny') {\r\n                yield companyContactClass.insContactInviteUserCompany(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAddressForCompanyId(company_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getAddressForCompanyId(company_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyContacts(company_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyContacts(company_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkEmailInviteContact(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.checkEmailInviteContact(param);\r\n            if (result.success) {\r\n                let msg = result.rowCount > 0 ? \"available\" : \"Not available\";\r\n                return { success: true, result: msg, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyList(user_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getCompanyList(user_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPrincipalListForSop(user_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getPrincipalListForSop(user_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPrincipalListForContract(user_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getPrincipalListForContract(user_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getStakeholderList(principal_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getStakeholderList(principal_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validateInviteeCompanyName(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.validateInviteeCompanyName(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getMyCompanyAndType(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getMyCompanyAndType(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getWhoInvitedMe(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getWhoInvitedMe(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getMyParentCompany(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getMyParentCompany(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getModulesForRoles() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getModulesForRoles();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSubModulesForRoles(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield companyContactClass.getSubModulesForRoles(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { validateCompanyName, validateCompanyOwner, getAddressTypeList, getCompanyData, getCompanyLogo, getCompanyBasicDetails, removeCompanyLogo, getCompanyRegDetails, getCompanyAddressDetails, getUsersCompany, insUserCompany, getStateListForCompany, getParentCompanyList, getTaxRegistrationList, getCountryListForCompany, getCityListForCompany, getOfficeTypeList, getBuyer, getFF, getCarrier, insCompany, updCompany, getAdminCompany, getCompanyForId, insCompanyLicense, getlicenseModules, updCompanyLicense, addInviteCompany, getCompanyContactDetails, getInviteCompany, updCompanyContact, delCompany, delCompanyContact, getCompanyTypeList, getInviteCompanyLicensedModulesList, updInviteCompany, delInviteCompany, insCompanySharedLicense, getSharedLicenseModules, getInviteCompanySharedLicensedModulesList, checkPrevCompInvit, getPendingInviteForEmail, getPendingContactInviteForEmail, updCompanyInviteAccept, updContactInviteAccept, getAddressForCompanyId, getCompanyContacts, inviteContactApproveRevoke, inviteCompanyApproveRevoke, getAllInvitedCompanyForCountry, checkEmailInviteContact, getCompanyAllAddressDetails, getCompanyList, getPrincipalListForSop, getStakeholderList, validateInviteeCompanyName, getInvitedCompaniesList, checkParentCompany, getMyCompanyAndType, getWhoInvitedMe, getMyParentCompany, getModulesForRoles, getSubModulesForRoles, insCompanyContact, insUserEventMapping, getPrincipalListForContract };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/companyContactController.ts?");

/***/ }),

/***/ "./src/controllers/initializeController.ts":
/*!*************************************************!*\
  !*** ./src/controllers/initializeController.ts ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst initialize_1 = __webpack_require__(/*! ../models/initialize */ \"./src/models/initialize.ts\");\r\nlet log = __webpack_require__(/*! ../log */ \"./src/log.ts\");\r\nconst settings = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nlet initClass = new initialize_1.Initialize();\r\nlet dbConnected = false;\r\nlet lookupValue = [];\r\nlet countryArr = [];\r\nlet stateArr = [];\r\nlet cityArr = [];\r\nfunction setLookupValueColl() {\r\n    return lookupValue;\r\n}\r\nfunction setCountryColl() {\r\n    return countryArr;\r\n}\r\nfunction setStateColl() {\r\n    return stateArr;\r\n}\r\nfunction setCityColl() {\r\n    return cityArr;\r\n}\r\nfunction setDbConnected() {\r\n    return dbConnected;\r\n}\r\nfunction checkDb() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let result = yield initClass.checkDB();\r\n        if (result.success) {\r\n            dbConnected = true;\r\n            console.log(\"Database connected to\", settings.settings.pgDbConfig.host);\r\n            if (lookupValue.length == 0) {\r\n                yield getLookupValues();\r\n            }\r\n            if (countryArr.length == 0) {\r\n                getCountry();\r\n            }\r\n            if (stateArr.length == 0) {\r\n                getState();\r\n            }\r\n            if (cityArr.length == 0) {\r\n                getCity();\r\n            }\r\n        }\r\n        else {\r\n            dbConnected = false;\r\n            log.logger(\"error\", `checkDb(), PSQL Connection Error ${result.message}, trying to connect in 10 sec`);\r\n            setTimeout(() => {\r\n                checkDb();\r\n            }, 10000);\r\n        }\r\n        console.log(\"DbConnected\", dbConnected);\r\n    });\r\n}\r\nfunction getLookupValues() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getLookupValues();\r\n            if (result.success) {\r\n                lookupValue = result.rows;\r\n            }\r\n            else {\r\n                if (result.qry_error) {\r\n                    log.logger(\"error\", `getLookupValues(), Query Error ${result.message}`);\r\n                }\r\n                else if (result.connection_error) {\r\n                    log.logger(\"error\", `getLookupValues(), PSQL Connection Error ${result.message}`);\r\n                    checkDb();\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.logger(\"error\", `getLookupValues(), function Error ${e.message}`);\r\n        }\r\n    });\r\n}\r\nfunction getCountry() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getCountry();\r\n            if (result.success) {\r\n                countryArr = result.rows;\r\n            }\r\n            else {\r\n                if (result.qry_error) {\r\n                    log.logger(\"error\", `getCountry(), Query Error ${result.message}`);\r\n                }\r\n                else if (result.connection_error) {\r\n                    log.logger(\"error\", `getCountry(), PSQL Connection Error ${result.message}`);\r\n                    checkDb();\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.logger(\"error\", `getCountry(), function Error ${e.message}`);\r\n        }\r\n    });\r\n}\r\nfunction getState() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getState();\r\n            if (result.success) {\r\n                stateArr = result.rows;\r\n            }\r\n            else {\r\n                if (result.qry_error) {\r\n                    log.logger(\"error\", `getState(), Query Error ${result.message}`);\r\n                }\r\n                else if (result.connection_error) {\r\n                    log.logger(\"error\", `getState(), PSQL Connection Error ${result.message}`);\r\n                    checkDb();\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.logger(\"error\", `getState(), function Error ${e.message}`);\r\n        }\r\n    });\r\n}\r\nfunction getCity() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getCity();\r\n            if (result.success) {\r\n                cityArr = result.rows;\r\n            }\r\n            else {\r\n                if (result.qry_error) {\r\n                    log.logger(\"error\", `getCity(), Query Error ${result.message}`);\r\n                }\r\n                else if (result.connection_error) {\r\n                    log.logger(\"error\", `getCity(), PSQL Connection Error ${result.message}`);\r\n                    checkDb();\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.logger(\"error\", `getCity(), function Error ${e.message}`);\r\n        }\r\n    });\r\n}\r\nfunction getTotalCntByModule(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getTotalCntByModule(param);\r\n            if (result.success) {\r\n                return { success: true, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.logger(\"error\", `getPorts(), function Error ${e.message}`);\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPorts() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getPorts();\r\n            if (result.success) {\r\n                return { success: true, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.logger(\"error\", `getPorts(), function Error ${e.message}`);\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCountryCode() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getCountryCode();\r\n            if (result.success) {\r\n                return { success: true, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.logger(\"error\", `getCountryCode(), function Error ${e.message}`);\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAdminLookups() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getAdminLookups();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getLookup(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getLookup(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getlookupTypeList() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getlookupTypeList();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getServiceTypeList() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getServiceTypeList();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getserviceTypeColl(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getserviceTypeColl(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getCompanyList(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insLookupEntry(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.addLookup(param);\r\n            if (result.success) {\r\n                yield getLookupValues();\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updateLookupEntry(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.updateLookup(param);\r\n            if (result.success) {\r\n                yield getLookupValues();\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addServiceEntry(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.addServiceEntry(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updateServiceEntry(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.updateServiceEntry(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delServiceEntry(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.delServiceEntry(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delLookupName(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.delLookupName(param);\r\n            if (result.success) {\r\n                yield getLookupValues();\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getLookupTypeId(type) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getLookupTypeId(type);\r\n            if (result.success) {\r\n                yield getLookupValues();\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getServiceChargeGroup() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getServiceChargeGroup();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getChargeUom() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getChargeUom();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getLCLValidity() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getLCLValidity();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCurrency() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield initClass.getCurrency();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { getTotalCntByModule, lookupValueColl: setLookupValueColl, countryColl: setCountryColl, stateColl: setStateColl, cityColl: setCityColl, dbConnected: setDbConnected, checkDb, getPorts, getCountryCode, insLookupEntry, updateLookupEntry, delLookupName, getAdminLookups, getLookup, getlookupTypeList, getServiceTypeList, getCompanyList, getLookupTypeId, getServiceChargeGroup, getCurrency, getChargeUom, getLCLValidity, delServiceEntry, getserviceTypeColl, addServiceEntry, updateServiceEntry };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/initializeController.ts?");

/***/ }),

/***/ "./src/controllers/licenseController.ts":
/*!**********************************************!*\
  !*** ./src/controllers/licenseController.ts ***!
  \**********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst licenseModel_1 = __webpack_require__(/*! ../models/licenseModel */ \"./src/models/licenseModel.ts\");\r\nconst companyContactModel_1 = __webpack_require__(/*! ../models/companyContactModel */ \"./src/models/companyContactModel.ts\");\r\nconst companyContactClass = new companyContactModel_1.CompanyContactModel();\r\nlet licenseClass = new licenseModel_1.LicenseModel();\r\nfunction getLicenseDetails() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield licenseClass.getLicenseDetails();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction approveLicenseStatus(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield licenseClass.approveLicenseStatus(param);\r\n            if (result.success) {\r\n                let res = yield companyContactClass.delCompanyLicense(param);\r\n                let res1 = yield companyContactClass.insCompanyLicenseModule(param);\r\n                let uc = yield licenseClass.insUserCompanyOnLicenseApproval(param);\r\n                if (res.success && res1.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else if (!res.success) {\r\n                    return { success: false, message: res.message };\r\n                }\r\n                else if (!res1.success) {\r\n                    return { success: false, message: res1.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction revokeLicenseStatus(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield licenseClass.revokeLicenseStatus(param);\r\n            if (result.success) {\r\n                let res = yield companyContactClass.delCompanyLicense(param);\r\n                let res1 = yield companyContactClass.insCompanyLicenseModule(param);\r\n                if (res.success && res1.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else if (!res.success) {\r\n                    return { success: false, message: res.message };\r\n                }\r\n                else if (!res1.success) {\r\n                    return { success: false, message: res1.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { getLicenseDetails, approveLicenseStatus, revokeLicenseStatus };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/licenseController.ts?");

/***/ }),

/***/ "./src/controllers/manageOrdersController.ts":
/*!***************************************************!*\
  !*** ./src/controllers/manageOrdersController.ts ***!
  \***************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst manageOrdersModel_1 = __webpack_require__(/*! ./../models/manageOrdersModel */ \"./src/models/manageOrdersModel.ts\");\r\nconst settings = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nlet manageOrderClass = new manageOrdersModel_1.manageOrdersModel();\r\nfunction getPurchaseOrders(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield manageOrderClass.getCompaniesForPO(userId);\r\n            if (result.success) {\r\n                let company_ids = result.rows[0].company_ids;\r\n                if (company_ids) {\r\n                    let result2 = yield manageOrderClass.getPurchaseOrders(company_ids, userId);\r\n                    if (result2.success) {\r\n                        return { success: true, is_po_assigned: true, rowCount: result2.rowCount, result: result2.rows };\r\n                    }\r\n                    else {\r\n                        return { success: false, message: result2.message };\r\n                    }\r\n                }\r\n                else {\r\n                    return { success: true, is_po_assigned: false, message: 'PO not assigned' };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPurchaseOrdersCompanywise(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield manageOrderClass.getCompaniesForPO(param.userId);\r\n            if (result.success) {\r\n                param[\"company_ids\"] = result.rows[0].company_ids;\r\n                let result2 = yield manageOrderClass.getPurchaseOrdersCompanywise(param);\r\n                if (result2.success) {\r\n                    return { success: true, rowCount: result2.rowCount, result: result2.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: result2.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addOrdersTransaction(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let filePath, relativePath, image;\r\n            if (param[\"file_name\"] != undefined) {\r\n                if (param[\"file_type\"] == 'PDF') {\r\n                    image = param.file.replace(/^data:(.*?);base64,/, \"\");\r\n                }\r\n                else {\r\n                    image = param.file.replace(/data:image\\/([A-Za-z]+);base64\\,/g, \"\");\r\n                }\r\n                let unqFileName = new Date().getTime().toString(36);\r\n                let userId = param.userId.toString();\r\n                let FileName = param[\"file_name\"].replace(/ /g, \"\");\r\n                filePath = path.join(__dirname, settings.settings.ordersTransactionAttachementPath, userId, unqFileName + FileName);\r\n                relativePath = unqFileName + FileName;\r\n                try {\r\n                    if (!fs.existsSync(path.join(__dirname, settings.settings.ordersTransactionAttachementPath, userId))) {\r\n                        fs.mkdirSync(path.join(__dirname, settings.settings.ordersTransactionAttachementPath, userId));\r\n                    }\r\n                    fs.writeFileSync(filePath, image, 'base64');\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n                param[\"relative_path\"] = relativePath;\r\n            }\r\n            ;\r\n            let result = yield manageOrderClass.addOrdersTransaction(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updOrdersTransaction(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let filePath, relativePath, image;\r\n            if (param[\"file_name\"] != undefined) {\r\n                if (param[\"file_type\"] == 'PDF') {\r\n                    image = param.file.replace(/^data:(.*?);base64,/, \"\");\r\n                }\r\n                else {\r\n                    image = param.file.replace(/data:image\\/([A-Za-z]+);base64\\,/g, \"\");\r\n                }\r\n                let unqFileName = new Date().getTime().toString(36);\r\n                let userId = param.userId.toString();\r\n                let FileName = param[\"file_name\"].replace(/ /g, \"\");\r\n                filePath = path.join(__dirname, settings.settings.ordersTransactionAttachementPath, userId, unqFileName + FileName);\r\n                relativePath = unqFileName + FileName;\r\n                try {\r\n                    if (!fs.existsSync(path.join(__dirname, settings.settings.ordersTransactionAttachementPath, userId))) {\r\n                        fs.mkdirSync(path.join(__dirname, settings.settings.ordersTransactionAttachementPath, userId));\r\n                    }\r\n                    fs.writeFileSync(filePath, image, 'base64');\r\n                }\r\n                catch (e) {\r\n                    console.log(e);\r\n                }\r\n                param[\"relative_path\"] = relativePath;\r\n            }\r\n            else {\r\n                param[\"relative_path\"] = null;\r\n            }\r\n            let result = yield manageOrderClass.updOrdersTransaction(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delTransaction(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield manageOrderClass.delTransaction(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getOrderTransactions(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield manageOrderClass.getOrderTransactions(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction viewTransactionsAttachedFile(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let userId = param.userId.toString();\r\n            let FilePath = path.join(__dirname, settings.settings.ordersTransactionAttachementPath, userId, param.filePath);\r\n            if (fs.existsSync(FilePath)) {\r\n                return FilePath;\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { getPurchaseOrders, getPurchaseOrdersCompanywise, addOrdersTransaction, getOrderTransactions, viewTransactionsAttachedFile, updOrdersTransaction, delTransaction };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/manageOrdersController.ts?");

/***/ }),

/***/ "./src/controllers/moduleController.ts":
/*!*********************************************!*\
  !*** ./src/controllers/moduleController.ts ***!
  \*********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst moduleModel_1 = __webpack_require__(/*! ../models/moduleModel */ \"./src/models/moduleModel.ts\");\r\nlet moduleClass = new moduleModel_1.ModuleModel();\r\nfunction getModules(is_licensed) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield moduleClass.getModules(is_licensed);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getModulesList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield moduleClass.getModulesList(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSubModules(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield moduleClass.getSubModules(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addModule(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield moduleClass.addModule(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updateModule(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield moduleClass.updateModule(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getLicensedModulesForUser(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield moduleClass.getLicensedModulesForUser(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAdminModules(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield moduleClass.getAdminModules();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getEventId(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield moduleClass.getEventId();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows[0].event_ids };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { addModule, updateModule, getModules, getSubModules, getLicensedModulesForUser, getModulesList, getAdminModules, getEventId };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/moduleController.ts?");

/***/ }),

/***/ "./src/controllers/poBookingController.ts":
/*!************************************************!*\
  !*** ./src/controllers/poBookingController.ts ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst poBookingModel_1 = __webpack_require__(/*! ../models/poBookingModel */ \"./src/models/poBookingModel.ts\");\r\nconst pobClass = new poBookingModel_1.POBModel();\r\nfunction getPOBGrp() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPOBGrp();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPOBForGrp(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPOBForGrp(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { getPOBGrp, getPOBForGrp };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/poBookingController.ts?");

/***/ }),

/***/ "./src/controllers/poIngestionController.ts":
/*!**************************************************!*\
  !*** ./src/controllers/poIngestionController.ts ***!
  \**************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst poIngestionModel_1 = __webpack_require__(/*! ../models/poIngestionModel */ \"./src/models/poIngestionModel.ts\");\r\nconst settings = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst fetch = __webpack_require__(/*! node-fetch */ \"node-fetch\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst xml2js = __webpack_require__(/*! xml2js */ \"xml2js\");\r\nconst pobClass = new poIngestionModel_1.POIModel();\r\nconst PO_keys = ['ordernumber', 'consigneecode', 'consigneename', 'suppliername', 'suppliercode', 'factorycode', 'factoryname', 'buyercode', 'buyername', 'incoterms', 'category', 'transportmode', 'originportcode', 'originportname', 'destinationportcode', 'destinationportname', 'destinationdccode', 'destinationdcname', 'shipdate', 'deliverydate', 'cargoreadydate', 'product', 'description', 'productcategory', 'commoditycode', 'sku', 'colour', 'primarysize', 'secondarysize', 'quantity', 'cartons', 'cube', 'weight', 'packtype'];\r\nfunction getPath(object, value) {\r\n    try {\r\n        return Object\r\n            .keys(object)\r\n            .reduce((r, k) => {\r\n            var kk = Array.isArray(object) ? `[${k}]` : `${k}`;\r\n            if (object[k] === value) {\r\n                r.push(kk);\r\n            }\r\n            if (object[k] && typeof object[k] === 'object') {\r\n                r.push(...getPath(object[k], value).map((p) => kk + (p[0] === '[' ? '' : '.') + p));\r\n            }\r\n            return r;\r\n        }, []);\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\nfunction JsonObjIteration(Obj, achivedKeys, achivedMissingKeys) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            for (let key in Obj) {\r\n                key.includes('$') ? delete Obj[key] : '';\r\n                if (Array.isArray(Obj[key])) {\r\n                    if (Obj[key].some((val) => { return typeof val == \"object\"; })) {\r\n                        yield JsonObjIteration(Obj[key][0], achivedKeys, achivedMissingKeys);\r\n                        Obj[key].length > 1 ? Obj[key].splice(1, Obj[key].length - 1) : '';\r\n                    }\r\n                    else {\r\n                        if (PO_keys.includes(key.toLowerCase())) {\r\n                            Obj[key] = 'po_raw.' + key.toLowerCase();\r\n                            achivedKeys.push(key.toLowerCase());\r\n                        }\r\n                        else {\r\n                            Obj[key] = '';\r\n                        }\r\n                    }\r\n                }\r\n                else if (!key.includes('$')) {\r\n                    yield JsonObjIteration(Obj[key], achivedKeys, achivedMissingKeys);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    });\r\n}\r\nfunction getPoIngestionMissingData(fileName, param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let targetMissingKeys;\r\n            let sourceMissingKeys;\r\n            let UploadedFilePath = path.join(__dirname, settings.settings.ingestionUploadPath, param.userId.toString(), fileName);\r\n            let xmlData = fs.readFileSync(UploadedFilePath, 'utf8');\r\n            let jsonData = yield xml2js.parseStringPromise(xmlData);\r\n            let achivedMissingKeys = [];\r\n            let achivedKeys = [];\r\n            if (!Array.isArray(jsonData)) {\r\n                yield JsonObjIteration(jsonData, achivedKeys, achivedMissingKeys);\r\n            }\r\n            sourceMissingKeys = getPath(jsonData, '').map((key) => key.toString().replaceAll('[0]', ''));\r\n            targetMissingKeys = PO_keys.filter(val => !achivedKeys.includes(val));\r\n            yield pobClass.updatePoTemplate(jsonData, param.company_id);\r\n            return { success: true, result: { sourceMissingKeys: sourceMissingKeys, targetMissingKeys: targetMissingKeys } };\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    });\r\n}\r\nfunction getPoIngestionData(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoIngestionData(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPoIngestionMappingData(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoIngestionFileName(param);\r\n            if (result.success) {\r\n                return getPoIngestionMissingData(result.rows[0].filepath, param);\r\n                //return {success:true, rowCount:result.rowCount, result:result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction uploadDataSet(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let dataset = param.dataset.replace(/^data:(.*?);base64,/, \"\").replace(/ /g, '+');\r\n        let unqFileName = new Date().getTime().toString(36);\r\n        let user_id = param.userId.toString();\r\n        let filePath = path.join(__dirname, settings.settings.ingestionUploadPath, user_id, unqFileName + param[\"fileName\"]);\r\n        let relativePath = unqFileName + param[\"fileName\"];\r\n        param[\"relativePath\"] = relativePath;\r\n        try {\r\n            if (!fs.existsSync(path.join(__dirname, settings.settings.ingestionUploadPath, user_id))) {\r\n                fs.mkdirSync(path.join(__dirname, settings.settings.ingestionUploadPath, user_id));\r\n            }\r\n            fs.writeFileSync(filePath, dataset, 'base64');\r\n            let result = yield pobClass.uploadDataSet(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: relativePath };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction deleUploadedFile(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoIngestionFileName(param);\r\n            if (result.success) {\r\n                let fileDel = yield pobClass.deleUploadedFile(param);\r\n                if (fileDel.success) {\r\n                    let fileName = result.rows[0].filepath;\r\n                    let user_id = param.userId.toString();\r\n                    if (!fs.existsSync(path.join(__dirname, settings.settings.ingestionUploadPath, 'Recycle Bin'))) {\r\n                        fs.mkdirSync(path.join(__dirname, settings.settings.ingestionUploadPath, 'Recycle Bin'));\r\n                    }\r\n                    if (!fs.existsSync(path.join(__dirname, settings.settings.ingestionUploadPath, 'Recycle Bin', user_id))) {\r\n                        fs.mkdirSync(path.join(__dirname, settings.settings.ingestionUploadPath, 'Recycle Bin', user_id));\r\n                    }\r\n                    var oldPath = path.join(__dirname, settings.settings.ingestionUploadPath, user_id, fileName);\r\n                    var recyclePath = path.join(__dirname, settings.settings.ingestionUploadPath, 'Recycle Bin', user_id, fileName);\r\n                    fs.rename(oldPath, recyclePath, function (err) {\r\n                        if (err)\r\n                            throw err;\r\n                    });\r\n                    return { success: true, rowCount: fileDel.rowCount, result: fileDel.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: fileDel.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validatePoTemplate(path, object, mappedKey, company_id, newColumns) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let objCopy = object;\r\n            let arrKey = path.split('.');\r\n            for (let key of arrKey) {\r\n                var regex = new RegExp(/\\[.\\]/, 'g');\r\n                //key = key.replaceAll('[0]', '');\r\n                key = key.replaceAll(regex, '');\r\n                if (key in objCopy) {\r\n                    if (Array.isArray(objCopy[key])) {\r\n                        objCopy = objCopy[key][0];\r\n                    }\r\n                    else if (typeof objCopy[key] == 'object') {\r\n                        objCopy = objCopy[key];\r\n                    }\r\n                    else {\r\n                        //mappedKey == '' ? delete objCopy[key] : (mappedKey.toLowerCase() == 'new_column_po_raw' ? objCopy[key] = 'po_raw_' + company_id + '.' + key.toLowerCase() : objCopy[key] = 'po_raw.' + mappedKey);\r\n                        mappedKey == '' ? objCopy[key] = '' : (mappedKey.toLowerCase() == 'new_column_po_raw' ? objCopy[key] = 'po_raw_' + company_id + '.' + key.toLowerCase() : objCopy[key] = 'po_raw.' + mappedKey);\r\n                        mappedKey.toLowerCase() == 'new_column_po_raw' ? newColumns.push(key.toLowerCase()) : '';\r\n                    }\r\n                }\r\n                else {\r\n                    mappedKey == '' ? objCopy[key] = '' : (mappedKey.toLowerCase() == 'new_column_po_raw' ? objCopy[key] = 'po_raw_' + company_id + '.' + key.toLowerCase() : objCopy[key] = 'po_raw.' + mappedKey);\r\n                    mappedKey.toLowerCase() == 'new_column_po_raw' ? newColumns.push(key.toLowerCase()) : '';\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    });\r\n}\r\nfunction iterate(obj, mappedKeys, company_id, str) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let prev = '';\r\n        for (var property in obj) {\r\n            if (obj.hasOwnProperty(property)) {\r\n                if (typeof obj[property] == \"object\") {\r\n                    //const s = isArray(obj) ? prev + str + '[' + property + ']' + '.' : prev + property + (isArray(obj[property]) ? '' : '.');\r\n                    const s = isArray(obj) ? prev + str + '[' + property + ']' + '.' : (str != undefined ? str : '') + property + (isArray(obj[property]) ? '' : '.');\r\n                    iterate(obj[property], mappedKeys, company_id, s);\r\n                }\r\n                else {\r\n                    prev = (str != undefined ? str : '');\r\n                    //console.log(prev + property, '- ' + obj[property]);\r\n                    if (obj[property] != '') {\r\n                        mappedKeys.push({ sourceKeys: prev + property, targetKeys: obj[property].replace('po_raw.', '').replace('po_raw_' + company_id + '.', '') });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return obj;\r\n    });\r\n}\r\nfunction isArray(obj) {\r\n    return obj instanceof Array;\r\n}\r\nfunction validatePoiMapping(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let newColumns = [];\r\n            let result = yield pobClass.getPoiTemplate(param);\r\n            if (result.success) {\r\n                let jsonData = result.rows[0].po_template;\r\n                let objCopy = jsonData;\r\n                for (let key in param.mappedKeys) {\r\n                    yield validatePoTemplate(key, objCopy, param.mappedKeys[key], param.company_id, newColumns);\r\n                }\r\n                let updateResult = yield pobClass.validatePoiMapping(jsonData, param.unMappedTargetKeys, param.company_id);\r\n                if (updateResult.success) {\r\n                    let res = yield pobClass.createPOChildTables(newColumns, param.company_id);\r\n                    return { success: true, result: updateResult.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: 'Unable to validate mapping.' };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction deleteMappings(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.deleteMappings(param);\r\n            let result2 = yield pobClass.deleteSchedule(param);\r\n            if (result.success && result2.success) {\r\n                yield pobClass.dropPORawChildTables(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: 'Unable to remove schedule records.' };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction viewPoiMappings(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let mappedkeys = [];\r\n            let result = yield pobClass.getPoiTemplate({ company_id: param.company_id });\r\n            if (result.success) {\r\n                let jsonData = result.rows[0].po_template;\r\n                yield iterate(jsonData, mappedkeys, param.company_id);\r\n                return { success: true, result: mappedkeys };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction poIngestionTestRequest(url, headers, body, method) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            return fetch(url, { method: method, headers: JSON.parse(headers), body: body })\r\n                .then((res) => __awaiter(this, void 0, void 0, function* () {\r\n                let bodyContent = yield res.text();\r\n                let headerArry = {};\r\n                res.headers.forEach((header, index) => {\r\n                    headerArry[index] = header;\r\n                });\r\n                return { success: res.ok, error: false, res: res, resBody: bodyContent, statusCode: res.status, statusText: res.statusText, headers: headerArry };\r\n            }))\r\n                .then((fullResponse) => {\r\n                return fullResponse;\r\n            });\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPoIngestionCards(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoIngestionCards(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getIngestionLookups(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getIngestionLookups(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction schedulePoIngestion(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.schedulePoIngestion(param);\r\n            let result2 = yield pobClass.validatePoiSchedule(param);\r\n            if (result.success && result2.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPoiScheduleData(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoiScheduleData(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPoiRunningStatus(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoiRunningStatus(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPoiUnmappedTargets(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoiUnmappedTargets(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPoIngestionSchemaErrors(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoIngestionSchemaErrors(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPoIngestionMasterErrors(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPoIngestionMasterErrors(param);\r\n            if (result.success) {\r\n                if (result.rowCount > 0) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    yield updMasterErrorStatus(param);\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validatePoiSchema(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let newColumns = [];\r\n            let mappedColumns = [];\r\n            let result = yield pobClass.getPoiTemplate(param);\r\n            if (result.success) {\r\n                let jsonData = result.rows[0].po_template;\r\n                let objCopy = jsonData;\r\n                for (let key in param.mappedKeys) {\r\n                    yield validatePoTemplate(key, objCopy, param.mappedKeys[key], param.company_id, newColumns);\r\n                    let arrData = key.split('.');\r\n                    mappedColumns.push(arrData[arrData.length - 1]);\r\n                }\r\n                let updateResult = yield pobClass.validatePoiMapping(jsonData, param.unMappedTargetKeys, param.company_id);\r\n                if (updateResult.success) {\r\n                    console.log(newColumns);\r\n                    yield pobClass.AddColumnInPOChildTables(newColumns, param.company_id);\r\n                    yield pobClass.delPOSchemaError(mappedColumns, param.company_id);\r\n                    yield statusUpdOnPoiSchedule(param);\r\n                    return { success: true, result: updateResult.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: 'Unable to validate mapping.' };\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction statusUpdOnPoiSchedule(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let res = yield pobClass.getCountOfSchemaError(param.company_id);\r\n            if (res.success) {\r\n                if (parseInt(res.rows[0].count) == 0) {\r\n                    let upd = yield pobClass.updPOSchemaStatus(param.company_id);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    });\r\n}\r\nfunction getTotalCntForSchemaErrors(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getTotalCntForSchemaErrors(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getTotalCntForMasterErrors(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getTotalCntForMasterErrors(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getTotalCntForRunningStatus(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getTotalCntForRunningStatus(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getConsigneeListForMasterValidation() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getConsigneeListForMasterValidation();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delInviteFromMasterValidation(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let delResult = yield pobClass.delInviteCompanyPerm(param);\r\n            if (delResult.success) {\r\n                yield pobClass.delInviteFromMasterValidation(param);\r\n                return { success: true, rowCount: delResult.rowCount, result: delResult.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: \"Delete Invite Failed\" };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updMasterErrors(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.updMasterErrors(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getPortListForMasterValidation() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getPortListForMasterValidation();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validatePoiMaster(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            if (param.error_type == 'MASTER_SUPPLIER_NAME') {\r\n                let res1 = yield pobClass.checkCompanyInvite(param);\r\n                if (res1.success && res1.rowCount > 0) {\r\n                    if (res1.rows[0].is_accepted) {\r\n                        let res2 = yield pobClass.poiMasterMapSupplier(param);\r\n                        if (res2.success) {\r\n                            let res3 = yield pobClass.delValidatedMasterError(param);\r\n                            if (res3.success) {\r\n                                let error = yield pobClass.getMasterErrors(param);\r\n                                if (error.success && error.rows[0].error_count == 0) {\r\n                                    param['is_master_under_process'] = false;\r\n                                    let upd = yield pobClass.updMasterUnderProcess(param);\r\n                                }\r\n                                return { success: true, rowCount: res3.rowCount, result: res3.rows, message: 'Supplier mapped Successfully!' };\r\n                            }\r\n                            else {\r\n                                return { success: false, message: res3.message };\r\n                            }\r\n                        }\r\n                        else {\r\n                            return { success: false, message: res2.message };\r\n                        }\r\n                    }\r\n                    else if (!res1.rows[0].is_accepted) {\r\n                        param['is_invite_sent'] = true;\r\n                        let res5 = yield pobClass.updInviteSendInMasterError(param);\r\n                        if (res5.success) {\r\n                            return { success: true, rowCount: res5.rowCount, result: res5.rows, message: \"Supplier mapped Successfully!\" };\r\n                        }\r\n                        else {\r\n                            return { success: false, message: res5.message };\r\n                        }\r\n                    }\r\n                    else {\r\n                        return { success: false, message: res1.message };\r\n                    }\r\n                }\r\n                else if (res1.success && res1.rowCount == 0) {\r\n                    let res4 = yield pobClass.insInviteCompany(param);\r\n                    if (res4.success) {\r\n                        param['is_invite_sent'] = true;\r\n                        let res5 = yield pobClass.updInviteSendInMasterError(param);\r\n                        if (res5.success) {\r\n                            return { success: true, rowCount: res5.rowCount, result: res5.rows, message: \"Supplier mapped and Invited Successfully!\" };\r\n                        }\r\n                        else {\r\n                            return { success: false, message: res5.message };\r\n                        }\r\n                    }\r\n                    else {\r\n                        return { success: false, message: res4.message };\r\n                    }\r\n                }\r\n                else {\r\n                    return { success: false, message: res1.message };\r\n                }\r\n            }\r\n            else if (param.error_type == 'MASTER_FACTORY_NAME') {\r\n                let res1 = yield pobClass.checkCompanyInvite(param);\r\n                if (res1.success && res1.rowCount > 0) {\r\n                    if (res1.rows[0].is_accepted) {\r\n                        let res2 = yield pobClass.poiMasterMapFactory(param);\r\n                        if (res2.success) {\r\n                            let res3 = yield pobClass.delValidatedMasterError(param);\r\n                            if (res3.success) {\r\n                                return { success: true, rowCount: res3.rowCount, result: res3.rows, message: 'Factory mapped Successfully!' };\r\n                            }\r\n                            else {\r\n                                return { success: false, message: res3.message };\r\n                            }\r\n                        }\r\n                        else {\r\n                            return { success: false, message: res2.message };\r\n                        }\r\n                    }\r\n                    else if (!res1.rows[0].is_accepted) {\r\n                        param['is_invite_sent'] = true;\r\n                        let res5 = yield pobClass.updInviteSendInMasterError(param);\r\n                        if (res5.success) {\r\n                            return { success: true, rowCount: res5.rowCount, result: res5.rows, message: \"Factory mapped Successfully!\" };\r\n                        }\r\n                        else {\r\n                            return { success: false, message: res5.message };\r\n                        }\r\n                    }\r\n                    else {\r\n                        return { success: false, message: res1.message };\r\n                    }\r\n                }\r\n                else if (res1.success && res1.rowCount == 0) {\r\n                    let res4 = yield pobClass.insInviteCompany(param);\r\n                    if (res4.success) {\r\n                        param['is_invite_sent'] = true;\r\n                        let res5 = yield pobClass.updInviteSendInMasterError(param);\r\n                        if (res5.success) {\r\n                            return { success: true, rowCount: res5.rowCount, result: res5.rows, message: \"Factory mapped and Invited Successfully!\" };\r\n                        }\r\n                        else {\r\n                            return { success: false, message: res5.message };\r\n                        }\r\n                    }\r\n                    else {\r\n                        return { success: false, message: res4.message };\r\n                    }\r\n                }\r\n                else {\r\n                    return { success: false, message: res1.message };\r\n                }\r\n            }\r\n            else if (param.error_type == 'MASTER_ORIGIN_PORT' || param.error_type == 'MASTER_DESTINATION_PORT') {\r\n                let res1 = yield pobClass.checkPortRef(param);\r\n                if (res1.success && res1.rowCount > 0) {\r\n                    // port ref available\r\n                    yield pobClass.delValidatedMasterError(param);\r\n                    let msg = param.error_type == 'MASTER_ORIGIN_PORT' ? 'Origin port mapped Successfully!' : 'Destination port mapped Successfully!';\r\n                    return { success: true, rowCount: res1.rowCount, result: res1.rows, message: msg };\r\n                }\r\n                else if (res1.success && res1.rowCount == 0) {\r\n                    let res3 = yield pobClass.poiMasterMapPort(param);\r\n                    if (res3.success) {\r\n                        yield pobClass.delValidatedMasterError(param);\r\n                        let msg = param.error_type == 'MASTER_ORIGIN_PORT' ? 'Origin port mapped Successfully!' : 'Destination port mapped Successfully!';\r\n                        return { success: true, rowCount: res3.rowCount, result: res3.rows, message: msg };\r\n                    }\r\n                    else {\r\n                        return { success: false, message: res3.message };\r\n                    }\r\n                }\r\n                else {\r\n                    return { success: false, message: res1.message };\r\n                }\r\n            }\r\n            else if (param.error_type == 'MASTER_INCOTERMS_NAME') {\r\n                let res1 = yield pobClass.poiMasterMapIncoterm(param);\r\n                if (res1.success && res1.rowCount > 0) {\r\n                    let res2 = yield pobClass.delValidatedMasterError(param);\r\n                    if (res2.success) {\r\n                        return { success: true, rowCount: res2.rowCount, result: res2.rows, message: 'Incoterms mapped Successfully!' };\r\n                    }\r\n                    else {\r\n                        return { success: false, message: res2.message };\r\n                    }\r\n                }\r\n                else {\r\n                    return { success: false, message: res1.message };\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\n// async function validatePoiMaster(param: any) {\r\n//     try {\r\n//         let result = await pobClass.validatePoiMaster(param);\r\n//         if (result.success) {\r\n//             return { success: true, rowCount: result.rowCount, result: result.rows };\r\n//         }\r\n//         else {\r\n//             return { success: false, message: result.message };\r\n//         }\r\n//     }\r\n//     catch (e: any) {\r\n//         return { success: false, message: e.message };\r\n//     }\r\n// }\r\nfunction addNewIncoterm(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.addNewIncoterm(param);\r\n            if (result.success && result.rowCount > 0) {\r\n                let res2 = yield pobClass.delValidatedMasterError(param);\r\n                if (res2.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: res2.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updMasterErrorStatus(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.updMasterErrorStatus(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyInviteData(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.getCompanyInviteData(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insInviteExistingSupplier(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield pobClass.insInviteExistingSupplier(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { getPoIngestionData, uploadDataSet, getPoIngestionMappingData, deleUploadedFile, validatePoiMapping, deleteMappings, viewPoiMappings, poIngestionTestRequest, getPoIngestionCards, getIngestionLookups, schedulePoIngestion, getPoiScheduleData, getPoiRunningStatus, getPoiUnmappedTargets, getPoIngestionSchemaErrors, getPoIngestionMasterErrors, validatePoiSchema, getTotalCntForSchemaErrors, getTotalCntForMasterErrors, getTotalCntForRunningStatus, getConsigneeListForMasterValidation, delInviteFromMasterValidation, updMasterErrors, getPortListForMasterValidation, validatePoiMaster, addNewIncoterm, updMasterErrorStatus, getCompanyInviteData, insInviteExistingSupplier };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/poIngestionController.ts?");

/***/ }),

/***/ "./src/controllers/reqController.ts":
/*!******************************************!*\
  !*** ./src/controllers/reqController.ts ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst requirementModel_1 = __webpack_require__(/*! ../models/requirementModel */ \"./src/models/requirementModel.ts\");\r\nconst reqClass = new requirementModel_1.ReqModel();\r\nfunction getDocs() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield reqClass.getDocs();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insReq(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield reqClass.insReq(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRequirement(type) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield reqClass.getRequirement(type);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delRequirement(req_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield reqClass.delRequirement(req_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { getDocs, insReq, getRequirement, delRequirement };\r\n//\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/reqController.ts?");

/***/ }),

/***/ "./src/controllers/sopController.ts":
/*!******************************************!*\
  !*** ./src/controllers/sopController.ts ***!
  \******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\r\nconst sopModel_1 = __webpack_require__(/*! ../models/sopModel */ \"./src/models/sopModel.ts\");\r\nconst config = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst sopClass = new sopModel_1.SOPModel();\r\nfunction insSOPContact(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPContact(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPContact(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPContact(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPContactPorts(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPContactPorts(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPContactPort(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPContactPort(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPId(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPId(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validateAndInsSOP(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        // let result = await getSOPId(param);\r\n        // let msg = '';\r\n        // if (result.success && result.rowCount > 0){\r\n        //     result.result.map((row: any)=>{\r\n        //         if (param.sop_id != row.sop_id){\r\n        //             if ((new Date(param.valid_from) >= new Date(row.valid_from) && new Date(param.valid_from) <= new Date(row.valid_to)) ||(new Date(param.valid_to) >= new Date(row.valid_from) && new Date(param.valid_to) <= new Date(row.valid_to))){\r\n        //                 msg += 'Dates are overlapping with other SOPs' ;\r\n        //             }\r\n        //         }\r\n        //     });\r\n        //     if (msg.length > 0){\r\n        //         return({success:true,rowCount:result.rowCount, message:'Dates are overlapping with other SOPs' });\r\n        //     }\r\n        // }\r\n        // if (!result.success){\r\n        //     return {success:false, message:result.message};\r\n        // }\r\n        //if msg length zero or no sop found for ff and principal selection\r\n        if (param.sop_id == undefined) {\r\n            let result1 = yield insSOP(param);\r\n            if (result1.success) {\r\n                param[\"sop_id\"] = result1.result[0].sop_id;\r\n                yield sopClass.insSOPServicesOnSOPCreation(param);\r\n                return { success: true, rowCount: result1.rowCount, result: result1.result };\r\n            }\r\n            else {\r\n                return { success: false, message: result1.message };\r\n            }\r\n        }\r\n        else {\r\n            let result1 = yield sopClass.updSOPValidity(param);\r\n            if (result1.success) {\r\n                return ({ success: true, rowCount: result1.rowCount });\r\n            }\r\n            else {\r\n                return { success: false, message: result1.message };\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction insSOP(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOP(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPContacts(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result;\r\n            if (param.company_id != undefined) {\r\n                result = yield sopClass.getSOPContactsForCompany(param);\r\n            }\r\n            else {\r\n                result = yield sopClass.getSOPContactsAllCompany(param);\r\n            }\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPContact(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPContact(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPContactPorts(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPContactPorts(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPs(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPs(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPContactsByCompId(param);\r\n            if (result.success) {\r\n                let result1 = yield sopClass.delSOPCompany(param);\r\n                if (result1.success) {\r\n                    return { success: true, rowCount: result1.rowCount, result1: result.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: result1.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAllCompForSOPByCompType(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getAllCompForSOPByCompType(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCompanies(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let r = yield sopClass.delSOPCompany(param);\r\n            if (!r.success)\r\n                return { success: false, message: r.message };\r\n            let result = yield sopClass.insSOPCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction removeSOPCompanies(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.removeSOPCompanies(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPDocs(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPDocs(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPDocs(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result;\r\n            for (let idx = 0; param.sop_port_ids.length > idx; idx++) {\r\n                result = yield sopClass.insSOPDocs(param, idx);\r\n            }\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPContactByEmail(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result;\r\n            if (param.sop_contact_id == undefined) {\r\n                result = yield sopClass.getSOPContactByEmail(param);\r\n            }\r\n            else {\r\n                result = yield sopClass.validateEmail(param);\r\n            }\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCargoHandling(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPCargoHandling(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCHForGroup(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCHForGroup(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkSOPInCH(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.checkSOPInCH(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCHIsSelected(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCHIsSelected(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCHOptimalValue(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCHOptimalValue(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCHfields(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCHfields(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPContainer(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPContainer(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPContainer(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPContainer(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPContainer(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPContainer(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction removeSOPContainer(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.removeSOPContainer(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCarrierAlloc(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCarrierAlloc(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCarrierAlloc(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPCarrierAlloc(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCarrierAlloc(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCarrierAlloc(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction removeSOPCarrierAlloc(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.removeSOPCarrierAlloc(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCarrierAllocByPort(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCarrierAllocByPort(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPCarrierAllocForPort(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPCarrierAllocForPort(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCarrierPref(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCarrierPref(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCarrierPref(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPCarrierPref(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCarrierPref(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCarrierPref(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction removeSOPCarrierPref(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.removeSOPCarrierPref(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCarrierPrefByPort(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCarrierPrefByPort(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPCarrierPrefForPort(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPCarrierPrefForPort(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPPOBooking(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPPOBooking(param);\r\n            let pobd = yield sopClass.insPOBookingDetails(param);\r\n            if (result.success && pobd.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPLandingCost(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPLandingCost(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCarrier(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPCarrier(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPSchInvoice(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPSchInvoice(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPPOBForGroup(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPPOBForGroup(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPDocForGroup(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPDocForGroup(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPLCForGroup(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPLCForGroup(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCarrierForGroup(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCarrierForGroup(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSopPortCountryWiseList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSopPortCountryWiseList(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getDocGrp(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getDocGrp(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPSchInvForGroup(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPSchInvForGroup(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkSOPInPOB(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.checkSOPInPOB(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkSOPInLC(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.checkSOPInLC(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkSOPInCarrier(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.checkSOPInCarrier(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkSOPInSchInvoice(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.checkSOPInSchInvoice(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkSOPInDoc(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.checkSOPInDoc(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updDocFieldValue(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updDocFieldValue(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updDocisSelected(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updDocisSelected(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updCarrierisSelected(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updCarrierisSelected(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPPOBIsSelected(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPPOBIsSelected(param);\r\n            if (result.success) {\r\n                console.log(param);\r\n                if (param.control_name == 'GBCToSupplier' && param.is_selected) {\r\n                    let fields = result.rows[0];\r\n                    let genDate = fields.fields[0].field0.field[0].value;\r\n                    let genColumn = fields.fields[0].field0.field[0].child[0].field[0].value;\r\n                    param['generate_date'] = { date: genDate, mapped_column: genColumn };\r\n                    yield sopClass.updSOPPOBGenerateDate(param);\r\n                }\r\n                else if (param.control_name == 'GBCToSupplier' && !param.is_selected) {\r\n                    param['generate_date'] = null;\r\n                    yield sopClass.updSOPPOBGenerateDate(param);\r\n                }\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPPOBfields(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPPOBfields(param);\r\n            if (result.success) {\r\n                if (param.controlname == 'RemainderToGenerate') {\r\n                    let fields = result.rows[0];\r\n                    let genDate = fields.fields[0].field0.field[0].value;\r\n                    let genColumn = fields.fields[0].field0.field[0].child[0].field[0].value;\r\n                    param['generate_date'] = { date: genDate, mapped_column: genColumn };\r\n                    yield sopClass.updSOPPOBGenerateDate(param);\r\n                }\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPLCfields(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPLCfields(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCarrierfields(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCarrierfields(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPSchInvfields(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPSchInvfields(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPContact(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPContact(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPContactPort(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPContactPort(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPDocs(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPDocs(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPPOBooking(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPPOBooking(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPCargoHandling(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPCargoHandling(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPContainer(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPContainer(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPCarrierAlloc(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPCarrierAlloc(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copySOPCarrierPref(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.copySOPCarrierPref(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOP(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOP(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPCountry(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPCountry(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCountry(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield delSOPCountry(param);\r\n            if (!result.success)\r\n                return { success: false, message: result.message };\r\n            let result1 = yield sopClass.insSOPCountry(param);\r\n            if (result1.success) {\r\n                return { success: true, rowCount: result1.rowCount, result: result1.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result1.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCountries(sop_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCountries(sop_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPServices(sop_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPServices(sop_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPServices(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let delStat = yield sopClass.delSOPServices(param.sop_id);\r\n            if (!delStat.success)\r\n                return { success: false, message: delStat.message };\r\n            let result = yield sopClass.insSOPServices(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPDoc(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPDoc(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCommunication(sop_id, instruction_type) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCommunication(sop_id, instruction_type);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCommunication(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPCommunication(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCommunication(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCommunication(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPCommunication(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPCommunication(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCommunicationForPrint(sop_id, instruction_type) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCommunicationForPrint(sop_id, instruction_type);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPStakeholdersForPrint(sop_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPStakeholdersForPrint(sop_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPPOBForGroupForPrint(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPPOBForGroupForPrint(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCHForGroupForPrint(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCHForGroupForPrint(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPDOCForGroupForPrint(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPDOCForGroupForPrint(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCRForGroupForPrint(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCRForGroupForPrint(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getContactsEmailForPrint(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getContactsEmailForPrint(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getContracts(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getContracts(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPServiceChargeSummary(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPServiceChargeSummary(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addContract(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insContract(param);\r\n            if (result.success && result.rowCount > 0) {\r\n                param.contract_id = result.rows[0].contract_id;\r\n                let uploadedFileNames = yield fileUpload(param);\r\n                param.uploadedFileNames = uploadedFileNames;\r\n                yield sopClass.updContractFileName(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updateContract(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updateContract(param);\r\n            if (result.success && result.rowCount > 0) {\r\n                let uploadedFileNames = yield fileUpload(param);\r\n                param.uploadedFileNames = uploadedFileNames;\r\n                yield sopClass.updContractFileName(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction fileUpload(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let fileNames = [];\r\n            let filePath = path_1.default.join(__dirname, config.settings[\"fileUploadPath\"], param.contract_id + \"\");\r\n            if (!fs_1.default.existsSync(filePath)) {\r\n                fs_1.default.mkdirSync(filePath);\r\n            }\r\n            for (var i = 0; i < param.fileDetails.length; i++) {\r\n                let file = param.fileDetails[i].data.replace(/^data:(.*?);base64,/, \"\").replace(/ /g, '+');\r\n                fs_1.default.writeFileSync(filePath + \"/\" + param.fileDetails[i].name, file, 'base64');\r\n                fileNames.push(param.fileDetails[i].name);\r\n            }\r\n            return fileNames;\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n        }\r\n    });\r\n}\r\nfunction delContract(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delContract(param);\r\n            if (result.success) {\r\n                let filePath = path_1.default.join(__dirname, config.settings[\"fileUploadPath\"], param.contract_id + \"\");\r\n                fs_1.default.rmdirSync(filePath, { recursive: true });\r\n                let zipfilePath = path_1.default.join(__dirname, config.settings[\"fileUploadPath\"], param.contract_id + \".zip\");\r\n                if (fs_1.default.existsSync(zipfilePath)) {\r\n                    fs_1.default.unlinkSync(zipfilePath);\r\n                }\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction extendContractValidity(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insContractExtendData(param);\r\n            if (result.success) {\r\n                param.c_f_id = result.rows[0].c_f_id;\r\n                let uploadedFileNames = yield UpdExtendContractFiles(param);\r\n                param.uploadedFileNames = uploadedFileNames;\r\n                let updResult = yield sopClass.updExtendContractData(param);\r\n                if (updResult.success) {\r\n                    return { success: true, rowCount: updResult.rowCount, result: updResult.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: updResult.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction UpdExtendContractFiles(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let filePath = path_1.default.join(__dirname, config.settings[\"fileUploadPath\"], param.contract_id + \"/\");\r\n            let extendPath = path_1.default.join(__dirname, config.settings[\"fileUploadPath\"], param.contract_id + \"/\" + param.c_f_id + \"/\");\r\n            if (!fs_1.default.existsSync(extendPath)) {\r\n                fs_1.default.mkdirSync(extendPath);\r\n            }\r\n            let files = fs_1.default.readdirSync(filePath);\r\n            for (var i = 0; i < files.length; i++) {\r\n                if (!fs_1.default.lstatSync(filePath + files[i]).isDirectory()) {\r\n                    fs_1.default.renameSync(filePath + files[i], extendPath + files[i]);\r\n                }\r\n            }\r\n            return fileUpload(param);\r\n        }\r\n        catch (e) {\r\n            //console.log(e);\r\n        }\r\n    });\r\n}\r\nfunction validateContract(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.validateContract(param);\r\n            if (result.success) {\r\n                let message = result.rowCount == 0 ? 'Available' : 'Contract already exist';\r\n                return { success: true, rowCount: result.rowCount, result: message };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPServiceChargeItemByGroup(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPServiceChargeItemByGroup(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPServiceChargeItemByPortPair(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPServiceChargeItemByPortPair(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPServiceCharge(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPServiceCharge(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, msg: 'Service charge created' };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPServiceCharge(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPServiceCharge(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, msg: 'Service charge updated' };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            // notes : found updation failed error in sop service charges will moniter and will remove after that\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPServiceCharge(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPServiceCharge(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delSOPPort(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.delSOPPort(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addSOPSHPort(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result;\r\n            for (let idx = 0; param.orgPortIds.length > idx; idx++) {\r\n                result = yield sopClass.addSOPSHPort(param, param.orgPortIds[idx]);\r\n            }\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSopPortList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSopPortList(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSopContainerWeightForPrint(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSopContainerWeightForPrint(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSopPortFreeStorageDetails(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSopPortFreeStorageDetails(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addSopPortFreeStorageValidity(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.addSopPortFreeStorageValidity(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addSopPortFreeStorageDays(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.addSopPortFreeStorageDays(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCurrentContractByCompanyId(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getCurrentContractByCompanyId(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPStakeholderList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPStakeholderList(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getFFListForAddSOP(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getFFListForAddSOP(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insNewSOPStakeholders(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insNewSOPStakeholders(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPStakeholders(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPStakeholders(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSopPortCount(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSopPortCount(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delContractFile(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let filePath = path_1.default.join(__dirname, config.settings[\"fileUploadPath\"], param.contract_id.toString(), param.fileName);\r\n            try {\r\n                fs_1.default.unlinkSync(filePath);\r\n            }\r\n            catch (_a) { }\r\n            let result = yield sopClass.updContractFiles(param);\r\n            if (result.success) {\r\n                return { success: true, result: \"Successfully removed the file\" };\r\n            }\r\n            else {\r\n                return { success: false, result: \"Failed to update the database\" };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPConsigneeContacts(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPConsigneeContacts(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPFFContacts(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPFFContacts(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insSOPCarrierAllocation(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insSOPCarrierAllocation(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updSOPCarrierAllocation(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updSOPCarrierAllocation(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updCAFieldValue(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updCAFieldValue(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCarrierAllocation(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCarrierAllocation(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAllocationIntervals() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getAllocationIntervals();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCarrierList(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCarrierList(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPCarrierForSOPPrint(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPCarrierForSOPPrint(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction saveCarrierPreference(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.saveCarrierPreference(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSOPSCHINVForGroupForPrint(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getSOPSCHINVForGroupForPrint(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insShipmentTrackingIns(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.insShipmentTrackingIns(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updShipmentTrackingIns(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.updShipmentTrackingIns(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getShipmentTrackingIns(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getShipmentTrackingIns(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getEventsSubModulesWise(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.getEventsSubModulesWise(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction copyDataforServiceCharges(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result1 = yield sopClass.delSOPServiceChargesbyPort(param);\r\n            if (result1.success) {\r\n                let result2 = yield sopClass.copyDataforServiceCharges(param);\r\n                if (result2.success) {\r\n                    return { success: true, rowCount: result2.rowCount, result: result2.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: result2.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result1.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkCreateCommIns(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.checkCreateCommIns(param);\r\n            if (result.success) {\r\n                if (result.rowCount > 0 && result.rows[0].comm_ins_count == 0) {\r\n                    let result2 = yield sopClass.createSOPCommuniation(param);\r\n                    if (result2.success) {\r\n                        return { success: true, rowCount: result2.rowCount, result: result2.rows };\r\n                    }\r\n                    else {\r\n                        return { success: false, message: result2.message };\r\n                    }\r\n                }\r\n                else if (result.rowCount > 0 && result.rows[0].comm_ins_count > 0) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addremoveCommunicationIns(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield sopClass.addremoveCommunicationIns(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { insSOPContact, updSOPContact, delSOPContactPorts, insSOPContactPort, getSOPId, insSOP, getSOPContacts, delSOPContact, getSOPContactPorts, getSOPs, getSOPCompany, delSOPCompany, getAllCompForSOPByCompType, insSOPCompanies, removeSOPCompanies, insSOPCompany, updSOPCompany, getSOPDocs, insSOPDocs, getSOPContactByEmail, insSOPCargoHandling, getSOPCHForGroup, checkSOPInCH, updSOPCHOptimalValue, updSOPCHIsSelected, updSOPCHfields, getSOPContainer, insSOPContainer, updSOPContainer, removeSOPContainer, getSOPCarrierAlloc, insSOPCarrierAlloc, updSOPCarrierAlloc, removeSOPCarrierAlloc, getSOPCarrierAllocByPort, delSOPCarrierAllocForPort, validateAndInsSOP, delSOPCarrierPrefForPort, getSOPCarrierPrefByPort, removeSOPCarrierPref, updSOPCarrierPref, insSOPCarrier, insSOPCarrierPref, getSOPCarrierPref, insSOPPOBooking, insSOPLandingCost, insSOPSchInvoice, getSOPPOBForGroup, getSOPLCForGroup, getSOPCarrierForGroup, getSopPortCountryWiseList, getSOPSchInvForGroup, checkSOPInPOB, checkSOPInLC, checkSOPInCarrier, checkSOPInSchInvoice, updSOPPOBIsSelected, updSOPPOBfields, updSOPLCfields, updSOPCarrierfields, updSOPSchInvfields, copySOPCompany, copySOPContact, copySOPContactPort, copySOPDocs, copySOPPOBooking, copySOPCargoHandling, copySOPContainer, copySOPCarrierAlloc, copySOPCarrierPref, delSOP, insSOPCountry, getSOPCountries, getSOPServices, insSOPServices, delSOPDoc, getSOPCommunication, insSOPCommunication, updSOPCommunication, delSOPCommunication, getSOPCommunicationForPrint, getSOPStakeholdersForPrint, getSOPPOBForGroupForPrint, getSOPCHForGroupForPrint, getSOPServiceChargeSummary, getSOPServiceChargeItemByGroup, getSOPServiceChargeItemByPortPair, insSOPServiceCharge, updSOPServiceCharge, delSOPServiceCharge, getContracts, addContract, updateContract, delContract, extendContractValidity, delSOPPort, addSOPSHPort, getSopPortList, getCurrentContractByCompanyId, getSOPStakeholderList, getFFListForAddSOP, insNewSOPStakeholders, updSOPStakeholders, getSopPortCount, validateContract, delContractFile, getDocGrp, checkSOPInDoc, getSOPDocForGroup, updDocFieldValue, updDocisSelected, updCarrierisSelected, getSOPConsigneeContacts, getSOPFFContacts, getSopPortFreeStorageDetails, insSOPCarrierAllocation, updSOPCarrierAllocation, getSOPCarrierAllocation, updCAFieldValue, getAllocationIntervals, getSOPCarrierList, saveCarrierPreference, getSOPDOCForGroupForPrint, getContactsEmailForPrint, getSOPSCHINVForGroupForPrint, getSOPCRForGroupForPrint, getSopContainerWeightForPrint, getSOPCarrierForSOPPrint, addSopPortFreeStorageValidity, addSopPortFreeStorageDays, insShipmentTrackingIns, updShipmentTrackingIns, getShipmentTrackingIns, getEventsSubModulesWise, copyDataforServiceCharges, checkCreateCommIns, addremoveCommunicationIns };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/sopController.ts?");

/***/ }),

/***/ "./src/controllers/userController.ts":
/*!*******************************************!*\
  !*** ./src/controllers/userController.ts ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst userModel_1 = __webpack_require__(/*! ../models/userModel */ \"./src/models/userModel.ts\");\r\nconst settings = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst { checkDb, dbConnected } = __webpack_require__(/*! ../controllers/initializeController */ \"./src/controllers/initializeController.ts\");\r\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\r\nconst fetch = __webpack_require__(/*! node-fetch */ \"node-fetch\");\r\nlet userClass = new userModel_1.UserModel();\r\nfunction getAccess(details, user, ip) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const token = jwt.sign({ userId: details[0].user_id, ip: ip }, settings.settings.jwtKey, { expiresIn: settings.settings.tokenExpiresIn });\r\n        let randLen = Math.floor(Math.random() * 32 + 50);\r\n        let startChar = Math.floor(Math.random() * 15);\r\n        let randString = settings.randomString(randLen);\r\n        addLoginHistory(user, ip, \"Successfully logged\", true, token);\r\n        delete details[0][\"password\"];\r\n        delete details[0]['salt'];\r\n        let sendData = { token: settings.shortToHex(randLen + 2) + token + randString + settings.shortToHex(startChar), user: details[0] };\r\n        let response = { success: true, result: Buffer.from(JSON.stringify(sendData), 'binary').toString('base64') };\r\n        return response;\r\n    });\r\n}\r\nfunction addLoginHistory(user, ipAddress, message, status, token) {\r\n    if (dbConnected()) {\r\n        userClass.addLoginHistory(user.email, ipAddress, message, status, token);\r\n    }\r\n    else {\r\n        checkDb();\r\n    }\r\n}\r\nfunction login(user, ipAdd) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            if (dbConnected()) {\r\n                let response;\r\n                let result = yield userClass.login(user.email);\r\n                if (result.success) {\r\n                    if (result.rowCount > 0) {\r\n                        if (result.rows[0].active_flag) {\r\n                            let details = result.rows;\r\n                            let hashPass = settings.MD5Hash(Buffer.concat([Buffer.from(user.password, 'base64'), Buffer.from(details[0].salt, 'hex')]));\r\n                            if (hashPass === details[0].password) {\r\n                                response = yield getAccess(details, user, ipAdd);\r\n                            }\r\n                            else {\r\n                                addLoginHistory(user, ipAdd, \"Invalid password \" + user.password, false, null);\r\n                                response = { success: false, invalidToken: false, message: \"Invalid password\" };\r\n                            }\r\n                        }\r\n                        else {\r\n                            response = { success: false, invalidToken: false, message: \"Verification email is pending, Please verify and try Login again\" };\r\n                        }\r\n                    }\r\n                    else {\r\n                        addLoginHistory(user, ipAdd, \"Invalid login Name \" + user.email, false, null);\r\n                        response = { success: false, message: \"You don't have account here, Please Signup!\" };\r\n                    }\r\n                    return response;\r\n                }\r\n                else {\r\n                    return { success: false, message: result.message };\r\n                }\r\n            }\r\n            else {\r\n                checkDb();\r\n                return { success: false, message: \"DB connection failure, please try after some time\" };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, status: 400, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validateToken(token) {\r\n    try {\r\n        let decoded = jwt.verify(token, settings.settings.jwtKey);\r\n        if (!dbConnected()) {\r\n            return { success: false, invalidToken: false, message: 'DB Connection Failure' };\r\n        }\r\n        else {\r\n            return { success: true, decoded: decoded };\r\n        }\r\n    }\r\n    catch (e) {\r\n        return { success: false, invalidToken: true, message: 'Session Expired' };\r\n    }\r\n}\r\nfunction logout(token) {\r\n    userClass.logout(token);\r\n}\r\nfunction getUserAllRole(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getUserAllRole(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRoleStatForAdmin() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getRoleStatForAdmin();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction addPageAccessView(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.addPageAccessView(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getUserCompany(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getUserCompany(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRoleStatForCompAdmin(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getRoleStatForCompAdmin(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getUserStat() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getUserStat();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAllUsers() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getAllUsers();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\n//This function not used on 10/21/2021\r\nfunction checkUsrEmailExists(email, user_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.checkUsrEmailExists(email);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction userMailValidation(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let user_id = parseInt(Buffer.from(param, 'base64').toString());\r\n            let result = yield userClass.userMailValidation(user_id);\r\n            if (result.success && result.rowCount > 0) {\r\n                if (result.rows[0].active_flag) {\r\n                    return { success: true, message: 'account already activated' };\r\n                }\r\n                else {\r\n                    yield userClass.UpdMailVerifiedOn(user_id);\r\n                    return { success: true, message: 'account activate' };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: \"account doesn't exist\" };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction registerUser(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let userExists = yield userClass.checkUsrEmailExists(param.email);\r\n            if (userExists.success && userExists.rowCount > 0) {\r\n                if (settings.isMailServiceEnabled) {\r\n                    if (!userExists.rows[0].active_flag) {\r\n                        let user = Buffer.from(userExists.rows[0].user_id + '', 'binary').toString('base64');\r\n                        let link = settings.WAKA_URL + \"/login?user=\" + user;\r\n                        let mailDetails = {\r\n                            LINK: link,\r\n                            SIGNUP_LINK: settings.WAKA_URL + '/signup'\r\n                        };\r\n                        sendVerificationMail(param.email, mailDetails, 'waka_signup');\r\n                    }\r\n                    else {\r\n                        let link = settings.WAKA_URL + \"/login\";\r\n                        let mailDetails = {\r\n                            LINK: link\r\n                        };\r\n                        sendVerificationMail(param.email, mailDetails, 'waka_user_exist');\r\n                    }\r\n                }\r\n                else {\r\n                    yield userClass.UpdMailVerifiedOn((userExists.rows[0].user_id));\r\n                }\r\n                return { success: true };\r\n            }\r\n            else {\r\n                let salt = settings.randBytes(32);\r\n                param[\"hash_password\"] = settings.MD5Hash(Buffer.concat([Buffer.from(param.password, 'base64'), salt]));\r\n                param[\"salt\"] = salt.toString('hex');\r\n                let result = yield userClass.registerUser(param);\r\n                if (result.success) {\r\n                    if (settings.isMailServiceEnabled) {\r\n                        let user = Buffer.from(result.rows[0].user_id + '', 'binary').toString('base64');\r\n                        let link = settings.WAKA_URL + \"/login?user=\" + user;\r\n                        let mailDetails = {\r\n                            LINK: link,\r\n                            SIGNUP_LINK: settings.WAKA_URL + '/signup'\r\n                        };\r\n                        sendVerificationMail(param.email, mailDetails, 'waka_signup');\r\n                    }\r\n                    else {\r\n                        yield userClass.UpdMailVerifiedOn(result.rows[0].user_id);\r\n                        yield userClass.addDetailsForUserMapping(result.rows[0].user_id, param.email);\r\n                        yield userClass.updContactInviteDetails(result.rows[0].user_id, param.email);\r\n                        return { success: true, message: 'account activate' };\r\n                    }\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: result.message };\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getInviteUser(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getInviteUser(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updUser(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.updUser(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction activateUser(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.activateUsr(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delUsr(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.delUsr(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insUserCompany(userId, user_id, data) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.delAllUsrCompanyForUser(user_id);\r\n            if (result.success) {\r\n                let result1 = yield userClass.addUsrCompanyForUser(userId, data);\r\n                if (result1.success)\r\n                    return { success: true, rowCount: result1.rowCount, result: result1.rows };\r\n                else\r\n                    return { success: false, message: result1.message };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getUserStatForCompAdmin(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getUserStatForCompAdmin(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getUsersForCompAdmin(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getUsersForCompAdmin(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insUsrCompanyForCompAdmin(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.insUsrCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAdminRoles(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getAdminRoles(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRoles(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getRoles(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getCompanyUnqRoleName(companyId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getCompanyUnqRoleName(companyId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getModulesAndRolesForCompany(moduleId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getModulesAndRolesForCompany(moduleId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insRole(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.insRole(param);\r\n            if (result.success) {\r\n                if (result.rowCount > 0) {\r\n                    param[\"role_id\"] = result.rows[0].role_id;\r\n                    let result1 = yield userClass.insRoleModuleMapping(param);\r\n                    if (result1.success) {\r\n                        return { success: true, message: \"Role \" + param.role_name + \" Added\" };\r\n                    }\r\n                    else {\r\n                        yield userClass.deleteRole(result.rows[0].role_id);\r\n                        return { success: false, message: \"Role Insertion Failed \" + result1.message };\r\n                    }\r\n                }\r\n                else\r\n                    return { success: false, message: \"Role Insertion Failed\" };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updRole(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            yield userClass.deleteRoleModuleMapping(param.rmm_id);\r\n            let result = yield userClass.updRole(param);\r\n            if (result.success) {\r\n                let result1 = yield userClass.insRoleModuleMapping(param);\r\n                return { success: true, rowCount: result.rowCount, message: 'Role ' + param.role_name + ' Updated' };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRolePermissionForExist(role_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getRolePermissionForExist(role_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction deleteRole(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.deleteRoleModuleMapping(param.rmm_id);\r\n            if (result.success) {\r\n                if (param.isDeleteRole) {\r\n                    let detail = yield userClass.deleteRole(param.role_id);\r\n                    if (detail.success) {\r\n                        return { success: true, message: 'Role Deleted Permanently' };\r\n                    }\r\n                }\r\n                else {\r\n                    return { success: true, message: 'Role Deleted' };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getLicenseCompanyForRoles(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getLicenseCompanyForRoles(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRoleNameForCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getRoleNameForCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getExistingRoleDetails(role_id) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getExistingRoleDetails(role_id);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validateRoleName(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.validateRoleName(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkEmail(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.checkEmail(param);\r\n            if (result.success) {\r\n                let msg = result.rowCount > 0 ? \"available\" : \"Not available\";\r\n                return { success: true, result: msg, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkEmailLinkVerified(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.checkEmailLinkVerified(param);\r\n            if (result.success && result.rowCount > 0) {\r\n                let msg = result.rows[0].active_flag ? \"verified\" : \"Not verified\";\r\n                return { success: true, result: msg };\r\n            }\r\n            else {\r\n                let msg = \"Not Available\";\r\n                return { success: false, message: msg };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getOTP(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let msg;\r\n            let is_valid_on = false, IsResSuccess = false;\r\n            let verify_code = Math.floor(Math.random() * (9999 - 1000) + 1000);\r\n            param[\"verify_code\"] = verify_code;\r\n            let result = yield userClass.getVerifyLinkDetails(param.email);\r\n            if (result.success && result.rowCount > 0) {\r\n                is_valid_on = result.rows[0].is_valid_on;\r\n                IsResSuccess = is_valid_on;\r\n                if (!is_valid_on) {\r\n                    let updateResult = yield userClass.updVerifyLink(param);\r\n                    IsResSuccess = updateResult.success;\r\n                }\r\n            }\r\n            else {\r\n                let insResult = yield userClass.insVerifyLink(param);\r\n                IsResSuccess = insResult.success;\r\n            }\r\n            if (IsResSuccess) {\r\n                let mailResponse = is_valid_on ? { success: true } : { success: true }; //await sendEmail(param.email, verify_code);\r\n                //let mailResponse = is_valid_on ? { success: true } : await sendEmail(param.email, verify_code);\r\n                msg = !mailResponse.success ? \"Failed to send PIN, Please try again after some time\" : is_valid_on ? \"Generated PIN : \" + result.rows[0].verify_code : \"Generated PIN : \" + verify_code;\r\n                //msg = !mailResponse.success ? \"Failed to send PIN, Please try again after some time\" : \"Verification PIN has been sent to your email.\";\r\n                return { success: mailResponse.success, is_valid_on: is_valid_on, message: msg, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: \"Failed to send PIN Please Try Again\" };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction validateOTP(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let msg = '', result;\r\n            result = yield userClass.getVerifyLinkDetails(param.email);\r\n            if (result.rows[0].verify_code == param.otp) {\r\n                if (result.rows[0].is_valid_on == true) {\r\n                    yield userClass.validateOTP(param);\r\n                    msg = \"Validation Successful\";\r\n                }\r\n                else if (result.rows[0].is_valid_on == false) {\r\n                    msg = \"PIN Expired, Please generate PIN again\";\r\n                }\r\n                return { success: true, message: msg };\r\n            }\r\n            else {\r\n                return { success: false, message: \"PIN match failed, Please Check\" };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction changeForgottenPassword(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let salt = settings.randBytes(32);\r\n            param[\"hash_password\"] = settings.MD5Hash(Buffer.concat([Buffer.from(param.password, 'base64'), salt]));\r\n            param[\"salt\"] = salt.toString('hex');\r\n            let result = yield userClass.changeForgottenPassword(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction changePassword(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let salt = settings.randBytes(32);\r\n            param[\"hash_password\"] = settings.MD5Hash(Buffer.concat([Buffer.from(param.password, 'base64'), salt]));\r\n            param[\"salt\"] = salt.toString('hex');\r\n            let result = yield userClass.changePassword(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updateProfile(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.updateProfile(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction sendVerificationMail(email, mailDetails, htmlFileName) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const emailId = {\r\n                emailId: email,\r\n                cc: '',\r\n                bcc: ''\r\n            };\r\n            const emailParam = {\r\n                htmlFile: htmlFileName,\r\n                mailDetails: JSON.stringify(mailDetails),\r\n                emailIds: JSON.stringify(emailId),\r\n                mailSubject: 'Waka - SignUp Verification',\r\n            };\r\n            let url = settings.MAIL_SERVICE_URL + \"/getMailParam\";\r\n            let response = yield fetch(url, {\r\n                method: 'POST',\r\n                body: JSON.stringify(emailParam),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            let jsonRes = yield response.json();\r\n            if (jsonRes.success) {\r\n                return { success: true };\r\n            }\r\n            else {\r\n                return { success: false, message: jsonRes.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction sendEmail(email, verify_code) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let sNumber = verify_code.toString().split(\"\");\r\n            let code = sNumber.map(Number);\r\n            let mailDetails = {\r\n                code1: code[0],\r\n                code2: code[1],\r\n                code3: code[2],\r\n                code4: code[3],\r\n                //LINK: \"http://localhost:4200/forgotpassword\"\r\n                LINK: \"https://test.appedo.com:9999/forgotpassword\"\r\n            };\r\n            const emailId = {\r\n                emailId: email,\r\n                cc: '',\r\n                bcc: ''\r\n            };\r\n            const emailParam = {\r\n                htmlFile: 'waka_forgot_password',\r\n                mailDetails: JSON.stringify(mailDetails),\r\n                emailIds: JSON.stringify(emailId),\r\n                mailSubject: 'Waka Password Reset',\r\n            };\r\n            let url = settings.MAIL_SERVICE_URL + \"/getMailParam\";\r\n            let response = yield fetch(url, {\r\n                method: 'POST',\r\n                body: JSON.stringify(emailParam),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            });\r\n            let jsonRes = yield response.json();\r\n            if (jsonRes.success) {\r\n                return { success: true };\r\n            }\r\n            else {\r\n                return { success: false, message: jsonRes.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction fetchProfileInfo(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.fetchProfileInfo(param);\r\n            if (result.success) {\r\n                return { success: true, result: result.message, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSubModulesForSelModule(moduleId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getSubModulesForSelModule(moduleId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getEventsForSubModule(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getEventsForSubModule(param);\r\n            if (result.success) {\r\n                let data = yield userClass.getSectionNames(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, data: data.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRolesForGrid(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result1 = yield userClass.getCompanyIds(param);\r\n            if (result1.success) {\r\n                param['company_ids'] = result1.rows[0].company_ids;\r\n                let result = yield userClass.getRolesForGrid(param);\r\n                if (result.success) {\r\n                    return { success: true, rowCount: result.rowCount, result: result.rows };\r\n                }\r\n                else {\r\n                    return { success: false, message: result.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result1.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction insUserRole(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let insresult = yield userClass.insUserRole(param);\r\n            if (insresult.success) {\r\n                param[\"role_id\"] = insresult.rows[0].role_id;\r\n                let delevents = yield userClass.delUserRoleModuleMapping(param);\r\n                if (delevents.success) {\r\n                    yield userClass.insUserRoleModuleMapping(param);\r\n                    let insevent = yield userClass.insUserRoleEventMapping(param);\r\n                    if (insevent.success) {\r\n                        return { success: true, rowCount: insevent.rowCount, result: insresult.rows, message: 'Role ' + param.role_name + ' Added Successfully' };\r\n                    }\r\n                    else {\r\n                        return { success: false, message: insevent.message };\r\n                    }\r\n                }\r\n                else {\r\n                    return { success: false, message: delevents.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: insresult.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRolesOfCompany(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getRolesOfCompany(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getEventForView(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getEventForView(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getEventsPermission(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getRoleModuleMapping(param);\r\n            if (result.success) {\r\n                let rmm_ids = result.rows[0].rmm_ids;\r\n                param['rmm_ids'] = rmm_ids;\r\n                let data = yield userClass.getEventsPermission(param);\r\n                return { success: true, rowCount: result.rowCount, result: result.rows, data: data };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction deleteRoleUser(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.deleteRoleUser(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getUserRoles(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getUserRoles(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updUserRole(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.deleteRoleModuleMapping(param.role_id);\r\n            if (result.success) {\r\n                let rolemodres = yield userClass.insUserRoleModuleMapping(param);\r\n                param['rmm_ids'] = rolemodres.rows;\r\n                let insevent = yield userClass.insUserRoleEventMapping(param);\r\n                if (insevent.success) {\r\n                    return { success: true, message: 'Role ' + param.role_name + ' Updated Successfully' };\r\n                }\r\n                else {\r\n                    return { success: false, message: insevent.message };\r\n                }\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getEventsForSelSubModules(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getEventsForSelSubModules(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSubModulesForView(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getSubModulesForView(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getEventsPermissionForRole(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getEventsPermissionForRole(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAdminCompanyForRoles(userId) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getAdminCompanyForRoles(userId);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction mapServices(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.mapServices(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction updMappedServices(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.updMappedServices(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction delMappedServices(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.delMappedServices(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction viewMappedServices(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.viewMappedServices(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAvailableServices(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getAvailableServices(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction checkForSelfInvite(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.checkForSelfInvite(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getAccessProvidedUsers(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getAccessProvidedUsers(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, rows: result.rows[0] };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getRegisteredSchedulers() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getRegisteredSchedulers();\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nfunction getSchedulerLog(param) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            let result = yield userClass.getSchedulerLog(param);\r\n            if (result.success) {\r\n                return { success: true, rowCount: result.rowCount, result: result.rows };\r\n            }\r\n            else {\r\n                return { success: false, message: result.message };\r\n            }\r\n        }\r\n        catch (e) {\r\n            return { success: false, message: e.message };\r\n        }\r\n    });\r\n}\r\nmodule.exports = { login, userMailValidation, validateToken, addPageAccessView, getRolePermissionForExist, logout, getUserAllRole, getRoleStatForCompAdmin, getUserCompany, getRoleStatForAdmin, getUserStat, getAllUsers, checkUsrEmailExists, registerUser, updUser, delUsr, activateUser, insUserCompany, getUserStatForCompAdmin, getExistingRoleDetails, getUsersForCompAdmin, insUsrCompanyForCompAdmin, getRoleNameForCompany, getAdminRoles, getCompanyUnqRoleName, getModulesAndRolesForCompany, insRole, sendEmail, getOTP, validateOTP, changeForgottenPassword, checkEmail, checkEmailLinkVerified, changePassword, updateProfile, getLicenseCompanyForRoles, getRoles, updRole, deleteRole, getInviteUser, validateRoleName, fetchProfileInfo, getSubModulesForSelModule, getEventsForSubModule, insUserRole, getRolesOfCompany, getEventsPermission, updUserRole, getUserRoles, getRolesForGrid, getEventForView, deleteRoleUser, getEventsForSelSubModules, getEventsPermissionForRole, getSubModulesForView, getAdminCompanyForRoles, mapServices, viewMappedServices, updMappedServices, delMappedServices, getAvailableServices, checkForSelfInvite, getAccessProvidedUsers, getRegisteredSchedulers, getSchedulerLog };\r\n\n\n//# sourceURL=webpack://tsserver/./src/controllers/userController.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\r\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\r\nconst cors_1 = __importDefault(__webpack_require__(/*! cors */ \"cors\"));\r\nconst compression_1 = __importDefault(__webpack_require__(/*! compression */ \"compression\"));\r\nconst mountApiRoutes = __webpack_require__(/*! ./api/api */ \"./src/api/api.ts\");\r\nconst mountIngestionRoutes = __webpack_require__(/*! ./PoIngestion/ingestion */ \"./src/PoIngestion/ingestion.ts\");\r\nconst log = __webpack_require__(/*! ./log */ \"./src/log.ts\");\r\nlog.logger(\"info\", \"Log Service Started\");\r\nlog.dblog(\"info\", \"Db Log Service Started\");\r\nconst app = express_1.default();\r\napp.use(compression_1.default());\r\napp.use(cors_1.default({\r\n    origin: ['http://localhost:4200', 'http://localhost:5443', 'http://localhost:5400']\r\n}));\r\napp.use(function (req, res, next) {\r\n    res.setHeader('Access-Control-Allow-Orgin', '*');\r\n    res.setHeader('Access-Control-Allow-Headers', 'Orgin, X-Requested-With, Content-Type, Accept');\r\n    res.setHeader('Access-Control-Allow-Methods', ['GET', 'POST']);\r\n    res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\r\n    next();\r\n});\r\napp.use(express_1.default.json({ limit: '30mb' }));\r\napp.use(express_1.default.urlencoded({\r\n    limit: '30mb',\r\n    extended: true\r\n}));\r\napp.use(express_1.default.static(path_1.default.join(__dirname, '../../waka-sop-ui/dist/waka-sop-ui/')));\r\napp.use('/api', mountApiRoutes);\r\napp.use('/ingestion', mountIngestionRoutes);\r\napp.get('*', (req, res) => res.sendFile(path_1.default.join(__dirname, '../../waka-sop-ui/dist/waka-sop-ui/index.html')));\r\napp.use(function applyXFrame(req, res, next) {\r\n    res.set('X-Frame-Options', 'SAMEORIGIN');\r\n    next();\r\n});\r\nvar httpPort = 3000;\r\napp.listen(httpPort, () => console.log('WAKA Node Server listening on port ' + httpPort + '!'));\r\nprocess.on('unhandledRejection', (err) => {\r\n    console.error(`Uncaught Exception: ${err.message}`);\r\n    log.logger('error', `unhandledRejection ${err.message} in process ${process.pid}`);\r\n});\r\nprocess.on('uncaughtException', (err) => {\r\n    log.logger('error', `uncaughtException ${err.message} in process ${process.pid}`);\r\n    console.error(`Uncaught Exception: ${err.message}`);\r\n});\r\n\n\n//# sourceURL=webpack://tsserver/./src/index.ts?");

/***/ }),

/***/ "./src/log.ts":
/*!********************!*\
  !*** ./src/log.ts ***!
  \********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\nconst { createLogger, format, transports } = __webpack_require__(/*! winston */ \"winston\");\r\n__webpack_require__(/*! winston-daily-rotate-file */ \"winston-daily-rotate-file\");\r\nlet accessLog = createLogger({\r\n    format: format.combine(format.errors({ stack: true }), format.splat(), format.simple()),\r\n    transports: [\r\n        new (transports.DailyRotateFile)({\r\n            filename: './log/wakasop/info/access-%DATE%.log',\r\n            datePattern: 'YYYY-MM-DD',\r\n            zippedArchive: true,\r\n            maxSize: '20m',\r\n            maxFiles: '14d',\r\n            level: 'info',\r\n        })\r\n    ]\r\n});\r\nlet logger = createLogger({\r\n    format: format.combine(format.errors({ stack: true }), format.splat(), format.simple()),\r\n    transports: [\r\n        new (transports.DailyRotateFile)({\r\n            filename: './log/wakasop/error/error-%DATE%.log',\r\n            datePattern: 'YYYY-MM-DD',\r\n            zippedArchive: true,\r\n            maxSize: '20m',\r\n            maxFiles: '14d',\r\n            level: 'error',\r\n        }),\r\n        new (transports.DailyRotateFile)({\r\n            filename: './log/wakasop/info/info-%DATE%.log',\r\n            datePattern: 'YYYY-MM-DD',\r\n            zippedArchive: true,\r\n            maxSize: '20m',\r\n            maxFiles: '14d',\r\n            level: 'info',\r\n        })\r\n    ]\r\n});\r\nlet dbServiceLog = createLogger({\r\n    format: format.combine(format.errors({ stack: true }), format.splat(), format.simple()),\r\n    transports: [\r\n        new (transports.DailyRotateFile)({\r\n            filename: './log/wakasop/error/errordb-%DATE%.log',\r\n            datePattern: 'YYYY-MM-DD',\r\n            zippedArchive: true,\r\n            maxSize: '20m',\r\n            maxFiles: '14d',\r\n            level: 'error',\r\n        }),\r\n        new (transports.DailyRotateFile)({\r\n            filename: './log/wakasop/info/infodb-%DATE%.log',\r\n            datePattern: 'YYYY-MM-DD',\r\n            zippedArchive: true,\r\n            maxSize: '20m',\r\n            maxFiles: '14d',\r\n            level: 'info',\r\n        })\r\n    ]\r\n});\r\nfunction fnAccessLog(level, message) {\r\n    let dt = new Date();\r\n    let date = dt.getFullYear() + \"-\" + (dt.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" + dt.getDate().toString().padStart(2, \"0\") + \"T\" + dt.getHours().toString().padStart(2, \"0\") + \":\" + dt.getMinutes().toString().padStart(2, \"0\") + \":\" + dt.getSeconds().toString().padStart(2, \"0\");\r\n    accessLog.log(level, `${date}, ${message}`);\r\n}\r\nfunction wlogger(level, message) {\r\n    let dt = new Date();\r\n    let date = dt.getFullYear() + \"-\" + (dt.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" + dt.getDate().toString().padStart(2, \"0\") + \"T\" + dt.getHours().toString().padStart(2, \"0\") + \":\" + dt.getMinutes().toString().padStart(2, \"0\") + \":\" + dt.getSeconds().toString().padStart(2, \"0\");\r\n    logger.log(level, `${date}, ${message}`);\r\n}\r\nfunction dblogger(level, message) {\r\n    let dt = new Date();\r\n    let date = dt.getFullYear() + \"-\" + (dt.getMonth() + 1).toString().padStart(2, \"0\") + \"-\" + dt.getDate().toString().padStart(2, \"0\") + \"T\" + dt.getHours().toString().padStart(2, \"0\") + \":\" + dt.getMinutes().toString().padStart(2, \"0\") + \":\" + dt.getSeconds().toString().padStart(2, \"0\");\r\n    dbServiceLog.log(level, `${date}, ${message}`);\r\n}\r\nmodule.exports = { logger: wlogger, dblog: dblogger, accesslog: fnAccessLog };\r\n// if (process.env.NODE_ENV !== 'production') {\r\n//   logger.add(new transports.Console({\r\n//     format: format.simple()\r\n//   }));\r\n// }\r\n\n\n//# sourceURL=webpack://tsserver/./src/log.ts?");

/***/ }),

/***/ "./src/models/ShipmentBookingModel.ts":
/*!********************************************!*\
  !*** ./src/models/ShipmentBookingModel.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ShipmentBookingModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass ShipmentBookingModel {\r\n    constructor() { }\r\n    ;\r\n    getShipmentBooking(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //SELECT array_agg(po_raw_id) as pos FROM waka.po_raw WHERE company_id = consignee_id\r\n            const queryText = \"SELECT DISTINCT sb.sb_id as so_no, (CASE WHEN sb.sb_id %2=0 THEN 'Shipment Authorized' ELSE 'Awaiting Confirmation' END) as status, (SELECT array_agg(sbd.po_id) FROM waka.shipment_booking_details sbd WHERE sbd.sb_id = sb.sb_id) as pos, sb.ff_id as logistics_provider, sb.consignee_id as principal, sb.supplier_id as supplier, sb.total_cbm, sb.total_weight_kgs, total_teu, 'Out of tolerance' as quantity_tolerance, 'In tolerance' as cargo_ready_date_tolerance, sb.cargo_ready_date, sb.ship_date, sb.delivery_date,'LCL' as type, 'sea' as mode, (SELECT port_name FROM waka.port WHERE port_id = sb.origin_port_id) as loading_port, (SELECT port_name FROM waka.port WHERE port_id = sb.dest_port_id) as discharging_port, (SELECT full_name from waka.login_user WHERE user_id IN (SELECT owned_by FROM waka.company WHERE company_id = sb.ff_id)) as principal_contact_name, sb.created_by, sb.modified_by, sb.modified_on, sb.created_on FROM waka.shipment_booking sb WHERE sb.supplier_id IN (SELECT company_id FROM waka.company WHERE owned_by = $1);\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getPurchaseOrders', queryText, queryParam);\r\n        });\r\n    }\r\n    getPOListforAddPOs(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT product_description, product, po_id as po_no, 'QC Confirmed' as status, SUM(shipment_qty) as po_qty, 0 as mfg_qty, 0 as ready_qty, 0 as total_volume FROM waka.shipment_booking_details WHERE sb_id = $1 GROUP BY product,product_description, sb_id, po_id;\";\r\n            const queryParam = [param.so_no];\r\n            return yield psqlAPM.fnDbQuery('getPOListforAddPOs', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyLogoPaths(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT company_logo_path  FROM waka.company WHERE company_id = $1;\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getCompanyLogoPaths', queryText, queryParam);\r\n        });\r\n    }\r\n    updateTEUValue(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.shipment_booking SET total_teu = $1 WHERE sb_id = $2\";\r\n            const queryParam = [param.total_teu, param.so_no];\r\n            return yield psqlAPM.fnDbQuery('updateTEUValue', queryText, queryParam);\r\n        });\r\n    }\r\n    insCustomView(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.shipment_booking_custom_view (view_name, is_default, display_columns, created_by) VALUES($1, $2, $3, $4);\";\r\n            const queryParam = [param.view_name, param.is_default, param.display_columns, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insCustomView', queryText, queryParam);\r\n        });\r\n    }\r\n    updCustomView(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.shipment_booking_custom_view SET view_name = $1, is_default = $2, display_columns = $3, modified_by = $4, modified_on = NOW() WHERE sbcv_id = $5\";\r\n            const queryParam = [param.view_name, param.is_default, param.display_columns, param.userId, param.sbcv_id];\r\n            return yield psqlAPM.fnDbQuery('updCustomView', queryText, queryParam);\r\n        });\r\n    }\r\n    getCustomViews(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sbcv_id, view_name, is_default, display_columns, created_by, created_on, modified_by, modified_on, false as is_selected FROM waka.shipment_booking_custom_view WHERE created_by = $1\";\r\n            const queryParam = [param.userId];\r\n            return yield psqlAPM.fnDbQuery('getCustomViews', queryText, queryParam);\r\n        });\r\n    }\r\n    deleteCustomView(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.shipment_booking_custom_view WHERE sbcv_id= $1\";\r\n            const queryParam = [param.sbcv_id];\r\n            return yield psqlAPM.fnDbQuery('deleteCustomView', queryText, queryParam);\r\n        });\r\n    }\r\n}\r\nexports.ShipmentBookingModel = ShipmentBookingModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/ShipmentBookingModel.ts?");

/***/ }),

/***/ "./src/models/cargoHandlingModel.ts":
/*!******************************************!*\
  !*** ./src/models/cargoHandlingModel.ts ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CHModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass CHModel {\r\n    constructor() { }\r\n    ;\r\n    getCHGrp() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT distinct grp_seq,grp, html_template FROM waka.cargo_handling WHERE NOT is_deleted ORDER BY 1\";\r\n            const queryParam = [];\r\n            return yield psqlAPM.fnDbQuery('getCHGrp', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getCHForGrp(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ch_id, ch_seq, sub_grp_seq, sub_grp, ch_name, control_name, has_child, view_text, fields,ui_img_file_name FROM waka.cargo_handling WHERE NOT is_deleted AND grp=$1 ORDER BY 3,2\";\r\n            const queryParam = [param.grp];\r\n            return yield psqlAPM.fnDbQuery('getCHForGrp', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n}\r\nexports.CHModel = CHModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/cargoHandlingModel.ts?");

/***/ }),

/***/ "./src/models/companyContactModel.ts":
/*!*******************************************!*\
  !*** ./src/models/companyContactModel.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.CompanyContactModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass CompanyContactModel {\r\n    constructor() { }\r\n    ;\r\n    validateCompanyOwner(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT company_id,company_name,owned_by,office_category_id FROM waka.company where lower(REGEXP_REPLACE(company_name,'\\\\s+', '', 'g')) = $1 ORDER BY created_on ASC\";\r\n            let queryParam = [param.company_name];\r\n            return yield psqlAPM.fnDbQuery('validateCompanyOwner', queryText, queryParam);\r\n        });\r\n    }\r\n    validateCompanyName(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (param.company_id == undefined) {\r\n                let queryText = \"SELECT company_id FROM waka.company WHERE lower(REGEXP_REPLACE(company_name,'\\\\s+', '', 'g')) = $1 AND office_category_id = $2\";\r\n                return yield psqlAPM.fnDbQuery('validateCompanyName', queryText, [param.company_name, param.office_type]);\r\n            }\r\n            else {\r\n                let queryText = \"SELECT company_id FROM waka.company WHERE lower(REGEXP_REPLACE(company_name,'\\\\s+', '', 'g')) = $1 AND office_category_id = $2 AND company_id <> $3\";\r\n                return yield psqlAPM.fnDbQuery('validateCompanyName', queryText, [param.company_name, param.office_type, param.company_id]);\r\n            }\r\n        });\r\n    }\r\n    getAddressTypeList() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ln.lookup_name_id, ln.lookup_name, ln.display_name FROM waka.lookup_name ln JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE lt.lookup_type = 'address_type'\";\r\n            return yield psqlAPM.fnDbQuery('getAddressTypeList', queryText, []);\r\n        });\r\n    }\r\n    getParentCompanyList(userIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `SELECT company_id, company_name FROM waka.company WHERE parent_company_id is null AND owned_by IN (${userIds})`;\r\n            // let queryParam = [userIds];\r\n            return yield psqlAPM.fnDbQuery('getParentCompanyList', queryText, []);\r\n        });\r\n    }\r\n    getTaxRegistrationList(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ln.lookup_name_id, ln.lookup_name, ln.display_name FROM waka.lookup_name ln JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE lt.lookup_type = 'registration_type'\";\r\n            return yield psqlAPM.fnDbQuery('getTaxRegistrationList', queryText, []);\r\n        });\r\n    }\r\n    getCountryListForCompany() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT country_id, name, iso3, iso2 FROM waka.country order by name\";\r\n            return yield psqlAPM.fnDbQuery('getCountryListForCompany', queryText, []);\r\n        });\r\n    }\r\n    getStateListForCompany(country_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT state_id, name, country_id FROM waka.state WHERE country_id = $1\";\r\n            return yield psqlAPM.fnDbQuery('getStateListForCompany', queryText, [country_id]);\r\n        });\r\n    }\r\n    getCityListForCompany(state_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT city_id, name, state_id, country_id FROM waka.city WHERE state_id = $1\";\r\n            return yield psqlAPM.fnDbQuery('getCityListForCompany', queryText, [state_id]);\r\n        });\r\n    }\r\n    getOfficeTypeList() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ln.lookup_name_id, ln.lookup_name, ln.display_name FROM waka.lookup_name ln JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE lt.lookup_type = 'office_category'\";\r\n            return yield psqlAPM.fnDbQuery('getOfficeTypeList', queryText, []);\r\n        });\r\n    }\r\n    getAllInvitedCompanyForCountry(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.company_name, a.company_id, ln.lookup_name company_type, ln.lookup_name_id company_type_id, con.name as country_name,ca.country_id, ca.name, ca.email,ca.mobile FROM (SELECT distinct ci.invited_company_id as company_id, ci.invited_company_type_id as company_type_id FROM waka.company_invite ci JOIN waka.lookup_name ln ON ci.invited_company_type_id = ln.lookup_name_id AND ci.invited_company_id IN (select invited_company_id FROM waka.company_invite WHERE invited_user_id = $1 OR invitee_user_id =$1) UNION SELECT distinct ci.invitee_company_id, ci.invitee_company_type_id FROM waka.company_invite ci JOIN waka.lookup_name ln ON ci.invitee_company_type_id = ln.lookup_name_id WHERE ci.invited_company_id IN (select invited_company_id FROM waka.company_invite WHERE invitee_user_id = $1 OR invited_user_id = $1)) as a JOIN waka.company c ON c.company_id = a.company_id JOIN waka.lookup_name ln ON ln.lookup_name_id = a.company_type_id JOIN waka.company_address ca ON ca.company_id = a.company_id JOIN waka.country con ON con.country_id = ca.country_id WHERE ca.address_type_id = (SELECT lookup_name_id from waka.lookup_name WHERE lookup_name ='communication') AND ca.country_id IN (\";\r\n            param.countryIds.map((id, i) => {\r\n                if (i != 0)\r\n                    queryText += \",\";\r\n                queryText += id;\r\n            });\r\n            queryText += \")\";\r\n            let queryParam = [param.userId];\r\n            return yield psqlAPM.fnDbQuery('getAllInvitedCompanyForCountry', queryText, queryParam);\r\n        });\r\n    }\r\n    getBuyer(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sq.company_id, c.company_name, sq.company_type_id FROM (select invitee_company_id as company_id, invitee_company_type_id as company_type_id from waka.company_invite WHERE (invited_company_id IN (SELECT company_id FROM my_company WHERE user_id = $1 AND office_category = 'head quarters') OR invitee_company_id IN (SELECT company_id FROM my_company WHERE user_id = $1 AND office_category = 'head quarters')) AND invitee_company_type_id IN (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_name ='Consignee') UNION select invited_company_id as company_id, invited_company_type_id as company_type_id from waka.company_invite WHERE (invited_company_id IN (SELECT company_id FROM my_company WHERE user_id = $1 AND office_category = 'head quarters') OR invitee_company_id IN (SELECT company_id FROM my_company WHERE user_id = $1 AND office_category = 'head quarters')) AND invited_company_type_id IN (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_name ='Consignee')) as sq JOIN waka.company c on c.company_id = sq.company_id;\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getBuyer', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getFF(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sq.company_id, c.company_name, sq.company_type_id FROM (select invitee_company_id as company_id, invitee_company_type_id as company_type_id from waka.company_invite WHERE (invited_company_id IN (SELECT company_id FROM my_company WHERE user_id =$1 AND office_category = 'head quarters') OR invitee_company_id IN (SELECT company_id FROM my_company WHERE user_id =$1 AND office_category = 'head quarters')) AND invitee_company_type_id IN (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_name ='Freight Forwarder') UNION select invited_company_id as company_id, invited_company_type_id as company_type_id from waka.company_invite WHERE (invited_company_id IN (SELECT company_id FROM my_company WHERE user_id =$1 AND office_category = 'head quarters') OR invitee_company_id IN (SELECT company_id FROM my_company WHERE user_id =$1 AND office_category = 'head quarters')) AND invited_company_type_id IN (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_name ='Freight Forwarder')) as sq JOIN waka.company c on c.company_id = sq.company_id;\";\r\n            let queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getFF', queryText, queryParam);\r\n        });\r\n    }\r\n    getCarrier() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.company_id, c.company_name, c.company_local_name, c.company_type_id, ln.lookup_name as company_type, ca.country_id, co.name as country_name FROM waka.company c JOIN waka.lookup_name ln ON ln.lookup_name_id = c.company_type_id JOIN waka.company_address ca ON ca.company_id = c.company_id AND ca.address_type_id IN (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_name ='communication') JOIN waka.country co on co.country_id=ca.country_id WHERE ln.lookup_name IN ('Carrier')\";\r\n            let queryParam = [];\r\n            return yield psqlAPM.fnDbQuery('getCarrier', queryText, queryParam);\r\n        });\r\n    }\r\n    //not used after 18-10-2021\r\n    insCompany_old(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText, queryParam;\r\n            if (!param.inviteCompany) {\r\n                queryText = \"INSERT INTO waka.company (company_name, parent_company_id, office_category_id, company_type_id, company_local_name, website_address, company_logo_path, created_by, owned_by, is_deleted, created_on, company_invite_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $8, false, now(), $9) returning company_id\";\r\n                queryParam = [param.company_name, param.parent_company, param.office_type, param.company_type_id, param.company_local_name, param.company_website, param.relative_path, param.user_id, param.company_invite_id];\r\n            }\r\n            else {\r\n                queryText = \"INSERT INTO waka.company (company_name, company_type_id, created_by, owned_by) VALUES ($1, $2, $3,$4) returning company_id\";\r\n                queryParam = [param.company_name, param.company_type, param.user_id];\r\n            }\r\n            return yield psqlAPM.fnDbQuery('insCompany_old', queryText, queryParam);\r\n        });\r\n    }\r\n    insCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText, queryParam;\r\n            if (!param.invite_company) {\r\n                queryText = \"INSERT INTO waka.company (company_name, company_type_id, office_category_id, parent_company_id, company_logo_path, website_address, owned_by, created_by, company_invite_id, country_id, state_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $7, $8, $9, $10) returning company_id\";\r\n                queryParam = [param.company_name, param.company_type_id, param.office_type, param.parent_company, param.relative_path, param.company_website, param.user_id, param.company_invite_id, parseInt(param.country_id), parseInt(param.state_id)];\r\n            }\r\n            else {\r\n                queryText = \"INSERT INTO waka.company (company_name, company_type_id, created_by, owned_by) VALUES ($1, $2, $3, $3) returning company_id\";\r\n                queryParam = [param.company_name, param.company_type, param.user_id];\r\n            }\r\n            return yield psqlAPM.fnDbQuery('insCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyBasicDetails(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT * FROM waka.company WHERE company_id =$1;\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getCompanyBasicDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    delCompanyParent(company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.company WHERE company_id = $1\";\r\n            const queryParam = [company_id];\r\n            return yield psqlAPM.fnDbQuery('delInviteCompanyPerm', queryText, queryParam);\r\n        });\r\n    }\r\n    addInviteCompanyDetails(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.company_invite (invited_company_id, invited_user_id,invitee_company_name,invitee_contact_name,invitee_email,invitee_user_id,invitee_company_type_id,invited_company_type_id, invitee_company_id, created_by, poi_master_error_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) returning company_invite_id\";\r\n            let queryParam = [param.invited_company_id, param.userId, param.invitee_company_name, param.invitee_contact_name, param.invitee_email, param.invitee_user_id, param.invitee_company_type_id, param.invited_company_type_id, param.invitee_company_id, param.userId, param.poi_master_error_id];\r\n            return yield psqlAPM.fnDbQuery('addInviteCompanyDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    checkPrevCompInvit(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT company_invite_id FROM waka.company_invite WHERE invited_company_id = $1 AND LOWER(REPLACE(invitee_company_name,' ','')) = LOWER(REPLACE($2,' ',''));\";\r\n            let queryParam = [param.invited_company_id, param.invitee_company_name];\r\n            return yield psqlAPM.fnDbQuery('checkPrevCompInvit', queryText, queryParam);\r\n        });\r\n    }\r\n    addInviteCompanyModules(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.company_invited_modules (company_invite_id, module_id) SELECT \" + param.company_invite_id + \", UNNEST(ARRAY[\" + param.shared_modules + \"])\";\r\n            return yield psqlAPM.fnDbQuery('addInviteCompanyModules', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    updInviteCompanyModules(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.company_invited_modules SET module_id = \" + param.shared_modules + \" where company_invite_id = \" + param.company_invite_id + \";\";\r\n            return yield psqlAPM.fnDbQuery('updInviteCompanyModules', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    insCompanyContact(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.contact_invite (company_id, contact_name, email, mobile, invitee_user_id, created_by, created_on) VALUES ($1, $2, $3, $4, $5, $6, NOW());\";\r\n            let queryParam = [param.company_id, param.name, param.email, param.mobile, param.invitee_user_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('addInviteContact', queryText, queryParam);\r\n        });\r\n    }\r\n    insUserEventMapping(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.invitee_user_id != undefined) {\r\n                queryText = \"INSERT INTO waka.role_user_mapping (company_id,assigned_user_id,email,role_id,created_by,created_on) VALUES \";\r\n                for (let idx in param.role_ids) {\r\n                    queryText += `(${param.company_id},${param.invitee_user_id},'${param.email}',${param.role_ids[idx]},${param.userId},NOW())`;\r\n                    if (parseInt(idx) < param.role_ids.length - 1) {\r\n                        queryText += ',';\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                queryText = \"INSERT INTO waka.role_user_mapping (company_id,email,role_id,created_by,created_on) VALUES \";\r\n                for (let idx in param.role_ids) {\r\n                    queryText += `(${param.company_id},'${param.email}',${param.role_ids[idx]},${param.userId},NOW())`;\r\n                    if (parseInt(idx) < param.role_ids.length - 1) {\r\n                        queryText += ',';\r\n                    }\r\n                }\r\n            }\r\n            queryText += ';';\r\n            return yield psqlAPM.fnDbQuery('insUserEventMapping', queryText, []);\r\n        });\r\n    }\r\n    deleteUserEventMapping(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM waka.role_user_mapping WHERE company_id = $1 AND assigned_user_id = $2\";\r\n            let queryParam = [param.company_id, param.invitee_user_id];\r\n            return yield psqlAPM.fnDbQuery('insUserEventMapping', queryText, queryParam);\r\n        });\r\n    }\r\n    // async updUserEventMapping(param:any){\r\n    //     let queryText = \"UPDATE waka.role_user_mapping SET role_id =$1, event_ids = (SELECT array_agg(event_id) as event_ids FROM waka.role_module_event_mapping WHERE rmm_id IN (SELECT rmm_id from waka.role_module_mapping_new WHERE role_id = $1)), modified_by = $2, modified_on = NOW() WHERE invitee_user_id = $3;\"\r\n    //     let queryParam = [param.role_id,param.userId,param.invitee_user_id];\r\n    //     return await psqlAPM.fnDbQuery('insUserEventMapping', queryText, queryParam);\r\n    // }\r\n    updCompanyContact(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.contact_invite SET contact_name = $1, mobile = $2 , modified_by = $3, modified_on = NOW() where contact_invite_id = $4\";\r\n            let queryParam = [param.name, param.mobile, param.userId, param.contact_invite_id];\r\n            return yield psqlAPM.fnDbQuery('updCompanyContact', queryText, queryParam);\r\n        });\r\n    }\r\n    delCompanyContactPerm(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.contact_invite WHERE contact_invite_id = $1\";\r\n            let queryParam = [param.contact_invite_id];\r\n            return yield psqlAPM.fnDbQuery('delInviteCompanyPerm', queryText, queryParam);\r\n        });\r\n    }\r\n    delCompanyContact_old(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.type == 'retrieve') {\r\n                queryText = \"UPDATE waka.contact_invite SET is_deleted = false WHERE contact_invite_id = $1\";\r\n            }\r\n            else {\r\n                queryText = \"UPDATE waka.contact_invite SET is_deleted = true WHERE contact_invite_id = $1\";\r\n            }\r\n            let queryParam = [param.contact_invite_id];\r\n            return yield psqlAPM.fnDbQuery('delCompanyContact', queryText, queryParam);\r\n        });\r\n    }\r\n    delInviteCompanyPerm(companyInviteId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.company_invite WHERE company_invite_id = $1\";\r\n            const queryParam = [companyInviteId];\r\n            return yield psqlAPM.fnDbQuery('delInviteCompanyPerm', queryText, queryParam);\r\n        });\r\n    }\r\n    //not used after 18-10-2021\r\n    delInviteCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.type == 'retrieve') {\r\n                queryText = \"UPDATE waka.company_invite SET is_deleted = false WHERE company_invite_id = $1\";\r\n            }\r\n            else {\r\n                queryText = \"UPDATE waka.company_invite SET is_deleted = true WHERE company_invite_id = $1\";\r\n            }\r\n            let queryParam = [param.company_invite_id];\r\n            return yield psqlAPM.fnDbQuery('delInviteCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    updInviteCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.company_invite set invitee_company_name = $1, invitee_contact_name = $2,invitee_company_type_id = $3, invited_company_type_id =  $4 where company_invite_id = $5\";\r\n            let queryParam = [param.invitee_company_name, param.invitee_contact_name, param.invitee_company_type_id, param.invited_company_type_id, param.company_invite_id];\r\n            return yield psqlAPM.fnDbQuery('updInviteCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyTypeList() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ln.lookup_name as name, ln.lookup_name_id as lookup_id from waka.lookup_name ln JOIN waka.lookup_type lt on ln.lookup_type_id = lt.lookup_type_id WHERE lt.lookup_type = 'account_type';\";\r\n            return yield psqlAPM.fnDbQuery('getCompanyTypeList', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    getInviteCompanyLicensedModulesList_old(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"select cl.cl_id, m.* as module_name from waka.company_lic_module clm JOIN waka.company_license cl on cl.cl_id = clm.cl_id join waka.modules m ON m.module_id = clm.module_id where cl.company_id = $1 group by cl.cl_id, m.module_id;\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getInviteCompanyLicensedModulesList', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getModulesForRoles() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ml.module_id, ml.module_name, ml.seq, ml.icon, ml.table_reference FROM waka.modules_list ml WHERE is_visible AND ml.module_name != 'Home';\";\r\n            return yield psqlAPM.fnDbQuery('getModulesForRoles', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    getSubModulesForRoles(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `SELECT ml.module_name, ml.module_id, jsonb_agg(DISTINCT jsonb_build_object('sub_module_id',sml.sub_module_id,'module_id',sml.module_id,'sub_module_name',sml.sub_module_name,'seq',sml.seq,'sub_module_description',sml.sub_module_description,'icon',sml.icon,'disabled',CASE WHEN em.sub_module_id is null THEN true ELSE false END)) as sub_modules FROM waka.sub_modules_list sml JOIN waka.modules_list ml ON ml.module_id = sml.module_id LEFT JOIN waka.event_master em ON sml.sub_module_id = em.sub_module_id WHERE sml.module_id IN (SELECT module_id FROM waka.modules_list WHERE is_visible) AND sml.is_admin_owned = false AND sml.is_visible GROUP BY 1,2 ORDER BY ml.seq;`;\r\n            return yield psqlAPM.fnDbQuery('getModulesForRoles', queryText, []);\r\n        });\r\n    }\r\n    getInviteCompanySharedLicensedModulesList(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT m.* as module_name , cim.module_id FROM waka.company_invited_modules cim JOIN waka.modules m on m.module_id = cim.module_id WHERE company_invite_id =  $1;\";\r\n            let queryParam = [param.company_invite_id];\r\n            return yield psqlAPM.fnDbQuery('getInviteCompanySharedLicensedModulesList', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getCompanyContactDetails_old(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ci.*, c.company_name, c.company_local_name, r.role_name, (SELECT CASE WHEN is_accepted THEN 'Registered' WHEN is_revoked THEN 'revoked' WHEN is_denied THEN 'Denied' ELSE 'Invited' END FROM waka.contact_invite where company_id = $1 and contact_invite_id = ci.contact_invite_id) as status, (SELECT id from waka.user_company where contact_invite_id = ci.contact_invite_id and company_id = $1) as uc_id from waka.company c JOIN waka.contact_invite ci on c.company_id = ci.company_id LEFT JOIN waka.roles r on ci.role_id = r.role_id  where c.company_id = $1\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getCompanyContactDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyContactDetails(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ci.*, c.company_name, c.company_local_name, (SELECT jsonb_agg(jsonb_build_object('role_id',role_id,'role_name',role_name)) as roles FROM waka.roles_master WHERE role_id IN (SELECT role_id from waka.role_user_mapping WHERE ((assigned_user_id = ci.invitee_user_id) OR (email = ci.email)) AND company_id = $1)), (SELECT CASE WHEN is_accepted THEN 'Registered' WHEN is_revoked THEN 'revoked' WHEN is_denied THEN 'Denied' ELSE 'Invited' END FROM waka.contact_invite where company_id = $1 and contact_invite_id = ci.contact_invite_id) as status, (SELECT id from waka.user_company where contact_invite_id = ci.contact_invite_id and company_id = $1) as uc_id from waka.company c JOIN waka.contact_invite ci on c.company_id = ci.company_id where c.company_id = $1;\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getCompanyContactDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyAdminAsContact(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.company_id,c.company_name,c.owned_by as invitee_user_id,lu.email,lu.full_name as contact_name,lu.mobile,(SELECT 'admin' as status),(SELECT jsonb_agg(jsonb_build_object('role_id',role_id,'role_name',role_name)) as roles FROM waka.roles_master WHERE role_id IN (SELECT role_id from waka.role_user_mapping WHERE assigned_user_id = lu.user_id AND company_id = $1)) FROM waka.company c JOIN waka.login_user lu ON lu.user_id = c.owned_by WHERE company_id= $1;\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getCompanyContactDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    insCompanyAddress(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let addList = JSON.stringify(param.address_coll);\r\n            let queryText = \"INSERT INTO waka.company_address (company_id, created_by, created_on, address_type_id, name, mobile, email, address, country_id, state_id, city_id, city, zip_code) SELECT \" + param.company_id + \", \" + param.user_id + \", now(),  * FROM jsonb_to_recordset('\" + addList + \"') as x(address_type_id int, name varchar, mobile varchar, email varchar, address varchar, country_id int, state_id int, city_id int, city varchar, zip_code varchar) returning comp_add_id;\";\r\n            return yield psqlAPM.fnDbQuery('insCompanyAddress', queryText, []);\r\n        });\r\n    }\r\n    insTaxDetails(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.company_registration (created_by, company_id, created_on, reg_name, reg_number) SELECT \" + param.user_id + \", \" + param.company_id + \", now(), * FROM jsonb_to_recordset('\" + JSON.stringify(param.tax_details) + \"') as x(reg_name varchar, reg_number varchar) returning comp_reg_id\";\r\n            return yield psqlAPM.fnDbQuery('insTaxDetails', queryText, []);\r\n        });\r\n    }\r\n    delCompanyRegistrationParent(comp_reg_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.company_registration WHERE comp_reg_id = $1\";\r\n            const queryParam = [comp_reg_id];\r\n            return yield psqlAPM.fnDbQuery('delCompanyRegistrationParent', queryText, queryParam);\r\n        });\r\n    }\r\n    delCompanyAddress(comp_add_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.company_address WHERE comp_add_id = $1\";\r\n            const queryParam = [comp_add_id];\r\n            return yield psqlAPM.fnDbQuery('delCompanyAddress', queryText, queryParam);\r\n        });\r\n    }\r\n    updCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let delAdd = yield psqlAPM.fnDbQuery('deleteCompanyAddress', \"DELETE FROM waka.company_address WHERE company_id = $1;\", [param.company_id]);\r\n            let delReg = yield psqlAPM.fnDbQuery('deleteCompanyRegistration', \"DELETE FROM waka.company_registration WHERE company_id = $1;\", [param.company_id]);\r\n            let queryText = \"UPDATE waka.company SET company_name = $1, parent_company_id = $2, office_category_id = $3, website_address = $4, company_logo_path = $5, company_type_id = $6 , country_id = $7, state_id = $8  WHERE company_id = $9\";\r\n            let queryParam = [param.company_name, param.parent_company, param.office_type, param.company_website, param.relative_path, param.company_type_id, param.country_id, param.state_id, param.company_id];\r\n            return yield psqlAPM.fnDbQuery('updCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyRegDetails(company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT cr.reg_name::int, cr.reg_number FROM waka.company_registration cr LEFT JOIN waka.lookup_name ln ON ln.lookup_name_id = cr.reg_name::int LEFT JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE cr.company_id = $1 AND lt.lookup_type = 'registration_type';\";\r\n            return yield psqlAPM.fnDbQuery('getCompanyRegDetails', queryText, [company_id]);\r\n        });\r\n    }\r\n    getCompanyAddressDetails(company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT address_type_id, name, mobile, email, address, country_id, state_id, city_id, city, zip_code FROM waka.company_address WHERE company_id = $1;\";\r\n            return yield psqlAPM.fnDbQuery('getCompanyAddressDetails', queryText, [company_id]);\r\n        });\r\n    }\r\n    getCompanyAllAddressDetails(company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ca.*, ln.lookup_name, s.name as state_name, c.name as country_name, ci.name as city_name FROM waka.company_address ca LEFT JOIN waka.state s on ca.state_id = s.state_id LEFT JOIN waka.country c on c.country_id = ca.country_id LEFT JOIN waka.city ci on ca.city_id = ci.city_id LEFT JOIN waka.lookup_name ln on ln.lookup_name_id = ca.address_type_id  WHERE ca.company_id = $1;\";\r\n            return yield psqlAPM.fnDbQuery('getCompanyAddressDetails', queryText, [company_id]);\r\n        });\r\n    }\r\n    getAdminCompany() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.*, s.name as state, co.name as country , ci.name as city, ca.city as city_name, ca.email, ca.mobile, (SELECT CASE WHEN is_approved THEN 1 ELSE -1 END FROM waka.company_license WHERE company_id = c.company_id AND now() BETWEEN valid_from AND valid_to LIMIT 1) as license_cnt from waka.company c Left JOIN waka.company_address ca on c.company_id = ca.company_id LEFT JOIN waka.country co on ca.country_id = co.country_id LEFT JOIN waka.state s on ca.state_id = s.state_id LEFT JOIN waka.city ci ON ca.city_id = ci.city_id where c.owned_by = 1;\";\r\n            return yield psqlAPM.fnDbQuery('getAdminCompany', queryText, []);\r\n        });\r\n    }\r\n    getUsersCompany_old(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT c.company_id, c.company_name, c.company_local_name, c.office_category_id, c.is_deleted, c.company_type_id, oc.lookup_name as office_type, c.company_logo_path, c.website_address, c.parent_company_id, c.previewurl , c.country_id , c.state_id , pc.company_name as parent_company, (SELECT CASE WHEN is_approved THEN 1 ELSE -1 END FROM waka.company_license WHERE company_id = c.company_id AND now() BETWEEN valid_from AND valid_to LIMIT 1) as license_cnt, (SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted, (SELECT count(*) FROM waka.company_invite WHERE invited_company_id = c.company_id and invited_user_id = $1) as ci_count, (SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count FROM waka.company c JOIN waka.lookup_name oc ON oc.lookup_name_id = c.office_category_id LEFT JOIN waka.company pc ON pc.company_id = c.parent_company_id WHERE c.owned_by IN (select created_by from waka.contact_invite where invitee_user_id = $1 AND is_accepted = true AND company_id = c.company_id) OR c.owned_by = $1;\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getUsersCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getUsersCompany(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // const queryText = \"SELECT distinct c.company_id, c.company_name, c.company_local_name, c.office_category_id, c.is_deleted, c.company_type_id, oc.lookup_name as office_type, c.company_logo_path, c.website_address, c.parent_company_id, c.previewurl , c.country_id , c.state_id , pc.company_name as parent_company, (SELECT CASE WHEN is_approved THEN 1 ELSE -1 END FROM waka.company_license WHERE company_id = c.company_id AND now() BETWEEN valid_from AND valid_to LIMIT 1) as license_cnt, (SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted, (SELECT count(*) FROM waka.company_invite WHERE invited_company_id = c.company_id and invited_user_id = c.owned_by) as ci_count, (SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count, (SELECT case when a.event_id is null then false else true end as is_edit_company FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'EDIT_COMPANY' LIMIT 1)) as a), (SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted,(SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count, (SELECT case when a.event_id is null then false else true end as is_invite_company FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'INIVITE_STAKEHOLDER_COMPANY' LIMIT 1)) as a),(SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted,(SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count, (SELECT case when a.event_id is null then false else true end as is_invite_contact FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'INIVITE_CONTACT' LIMIT 1)) as a), (SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted,(SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count, (SELECT case when a.event_id is null then false else true end as is_delete_company FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'DELETE_COMPANY' LIMIT 1)) as a), (SELECT CASE WHEN c.owned_by = $1 then TRUE ELSE FALSE END as is_own_company), (SELECT case when a.event_id is null then false else true end as is_view FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'VIEW_MY_COMPANIES' LIMIT 1)) as a) FROM waka.company c JOIN waka.lookup_name oc ON oc.lookup_name_id = c.office_category_id LEFT JOIN waka.company pc ON pc.company_id = c.parent_company_id WHERE c.owned_by IN (select created_by from waka.contact_invite where invitee_user_id = $1 AND is_accepted = true AND company_id = c.company_id) OR c.owned_by = $1\";\r\n            const queryText = \"SELECT distinct c.company_id, c.company_name, c.company_local_name, c.office_category_id, c.is_deleted, c.company_type_id, oc.lookup_name as office_type, c.company_logo_path, c.website_address, c.parent_company_id, c.previewurl , c.country_id , c.state_id , pc.company_name as parent_company, (SELECT CASE WHEN is_approved THEN 1 ELSE -1 END FROM waka.company_license WHERE company_id = c.company_id AND now() BETWEEN valid_from AND valid_to LIMIT 1) as license_cnt, (SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted, (SELECT count(*) FROM waka.company_invite WHERE invited_company_id = c.company_id ) as ci_count, (SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count, (SELECT case when a.event_id is null then false else true end as is_edit_company FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'EDIT_COMPANY' LIMIT 1)) as a), (SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted,(SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count, (SELECT case when a.event_id is null then false else true end as is_invite_company FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'INIVITE_STAKEHOLDER_COMPANY' LIMIT 1)) as a),(SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted,(SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count, (SELECT case when a.event_id is null then false else true end as is_invite_contact FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'INIVITE_CONTACT' LIMIT 1)) as a), (SELECT is_accepted FROM waka.company_invite WHERE invitee_company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as ci_is_accepted, (SELECT is_accepted FROM waka.contact_invite WHERE company_id = c.company_id and invitee_user_id = $1 LIMIT 1) as cci_is_accepted,(SELECT count(*) FROM waka.contact_invite WHERE company_id = c.company_id) as contact_count, (SELECT case when a.event_id is null then false else true end as is_delete_company FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'DELETE_COMPANY' LIMIT 1)) as a), (SELECT CASE WHEN c.owned_by = $1 then TRUE ELSE FALSE END as is_own_company), (SELECT case when a.event_id is null then false else true end as is_view FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = c.company_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'VIEW_MY_COMPANIES' LIMIT 1)) as a) FROM waka.company c JOIN waka.lookup_name oc ON oc.lookup_name_id = c.office_category_id LEFT JOIN waka.company pc ON pc.company_id = c.parent_company_id WHERE c.owned_by IN (select created_by from waka.contact_invite where invitee_user_id = $1 AND is_accepted = true AND company_id = c.company_id) OR c.owned_by = $1\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getUsersCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getInviteCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ci.*, (SELECT count(*) FROM waka.company_invited_modules WHERE company_invite_id = ci.company_invite_id) as module_shared, ln.lookup_name as company_type_name FROM waka.company_invite ci JOIN waka.lookup_name as ln ON ci.invitee_company_type_id = ln.lookup_name_id WHERE ci.invited_company_id = $1\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getInviteCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getInvitedCompaniesList(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ci.*, ca.mobile, c1.company_logo_path, c.company_name, ln.display_name FROM waka.company_invite ci LEFT JOIN waka.company c on c.company_id = ci.invited_company_id LEFT JOIN waka.company c1 on c1.company_id = ci.invitee_company_id LEFT JOIN waka.lookup_name ln on ln.lookup_name_id = ci.invitee_company_type_id LEFT JOIN waka.company_address ca on ca.company_id = ci.invitee_company_id WHERE ci.invited_company_id = $1\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getInvitedCompaniesList', queryText, queryParam);\r\n        });\r\n    }\r\n    getPendingInviteForEmail(email, userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ci.company_invite_id, ci.invited_company_id, ci.invited_user_id, ci.invitee_company_name,ci.invitee_contact_name, ci.invitee_company_type_id, ci.invitee_email, ci.invitee_company_id, ci.poi_master_error_id, pom.error_type as master_error_type, pom.poi_id, pom.poi_me_id, pom.ref_code, c.company_name, ct.lookup_name invitee_company_type, 'pending' as status from waka.company_invite ci JOIN waka.company c ON c.company_id = ci.invited_company_id JOIN waka.lookup_name ct ON ct.lookup_name_id = ci.invitee_company_type_id LEFT JOIN waka.poi_master_error_temp pom ON pom.poi_me_id = ci.poi_master_error_id WHERE (ci.invitee_email= $1 OR ci.invitee_user_id = $2) AND NOT is_accepted AND NOT is_denied AND NOT is_revoked\";\r\n            let queryParam = [email, userId];\r\n            return yield psqlAPM.fnDbQuery('getPendingInviteForEmail', queryText, queryParam);\r\n        });\r\n    }\r\n    getPendingContactInviteForEmail(email) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ci.*, ci.company_id as invited_company_id, c.company_name as invited_company_name from waka.contact_invite ci LEFT JOIN waka.company c on c.company_id = ci.company_id WHERE ci.email=$1 AND NOT is_accepted AND NOT is_denied AND NOT is_revoked\";\r\n            let queryParam = [email];\r\n            return yield psqlAPM.fnDbQuery('getPendingContactInviteForEmail', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyForId(companyId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT c.company_id, c.company_name, c.company_local_name as short_name, ln.lookup_name as company_type, ca.address, ci.name as city, st.name as state, co.name as country, ca.zip_code FROM waka.company c JOIN waka.company_address ca ON ca.company_id = c.company_id AND ca.address_type_id IN (SELECT lookup_name_id from waka.lookup_name WHERE lookup_name ='communication')  JOIN waka.country co on co.country_id=ca.country_id JOIN waka.state st on st.state_id = ca.state_id LEFT JOIN waka.city ci on ci.city_id=ca.city_id LEFT JOIN waka.lookup_name ln ON ln.lookup_name_id = c.company_type_id WHERE c.company_id = $1\";\r\n            const queryParam = [companyId];\r\n            return yield psqlAPM.fnDbQuery('getCompanyForId', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    insCompanyLicense(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"  INSERT INTO waka.company_license(company_id, created_by, created_on, is_approved, valid_from, valid_to) VALUES ($1, $2, now(), false, now(), now()+interval '1 year') returning cl_id\";\r\n            const queryParam = [param.company_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insCompanyLicense', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    insCompanyLicenseModule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.company_lic_module (cl_id, created_by, created_on, module_id) SELECT \" + param.cl_id + \", \" + param.userId + \", now(), * FROM UNNEST( ARRAY[\" + param.m_ids + \"]::int[]) \";\r\n            return yield psqlAPM.fnDbQuery('insCompanyLicenseModule', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    delCompanyLicenseParent(cl_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.company_license WHERE cl_id = $1\";\r\n            const queryParam = [cl_id];\r\n            return yield psqlAPM.fnDbQuery('delCompanyLicenseParent', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    insCompanySharedLicense(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.shared_license(cl_id, licensed_company_id, shared_company_id, valid_from, valid_to, created_by,created_on) SELECT cl_id, company_id, $1, valid_from, valid_to, $3, now() FROM waka.company_license WHERE company_id = $2 AND now() between valid_from and valid_to returning sl_id,cl_id\";\r\n            const queryParam = [param.invitee_company_id, param.invited_company_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insCompanySharedLicense', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    insCompanySharedLicenseModule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.shared_lic_module(sl_id, cl_id, created_by, created_on, module_id) SELECT \" + param.sl_id + \", \" + param.cl_id + \", \" + param.userId + \", now(), * FROM UNNEST( ARRAY[(select ARRAY_agg(module_id) from waka.company_invited_modules WHERE company_invite_id =\" + param.company_invite_id + \" )]::int[])\";\r\n            return yield psqlAPM.fnDbQuery('insCompanySharedLicenseModule', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    delInsCompanySharedLicenseParent(sl_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.shared_license WHERE sl_id = $1\";\r\n            const queryParam = [sl_id];\r\n            return yield psqlAPM.fnDbQuery('delInsCompanySharedLicenseParent', queryText, queryParam);\r\n        });\r\n    }\r\n    getlicenseModules(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"select array_agg(clm.module_id) as m_d_ids , cl.cl_id, array_agg(m.module_name) as module_name , array_agg(m.icon) as module_icon from waka.company_lic_module clm JOIN waka.company_license cl on cl.cl_id = clm.cl_id join waka.modules_list m ON m.module_id = clm.module_id where cl.company_id = $1 group by cl.cl_id\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getlicenseModules', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getSharedLicenseModules(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"select array_agg(slm.module_id) as m_d_ids , sl.sl_id, array_agg(m.module_name) as module_name from waka.shared_lic_module slm JOIN waka.shared_license sl on sl.sl_id = slm.sl_id join waka.modules m ON m.module_id = slm.module_id where sl.shared_company_id = $1 group by sl.sl_id\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getSharedLicenseModules', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delCompanyLicense(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM waka.company_lic_module where cl_id = $1 \";\r\n            let queryParam = [param.cl_id];\r\n            return yield psqlAPM.fnDbQuery('delCompanyLicense', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delSharedCompanyLicense(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM waka.shared_lic_module where sl_id = $1 \";\r\n            let queryParam = [param.sl_id];\r\n            return yield psqlAPM.fnDbQuery('delCompanyLicense', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.company SET is_deleted = $2 WHERE company_id = $1\";\r\n            let queryParam = [param.company_id, param.is_deleted];\r\n            return yield psqlAPM.fnDbQuery('delCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    updCompanyInviteAccept(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.type == 'deny') {\r\n                queryText = \"UPDATE waka.company_invite SET invitee_company_id=$3, invitee_user_id=$2, is_denied = true, denied_on = now(), modified_by = $2, modified_on = now() WHERE company_invite_id = $1\";\r\n            }\r\n            else if (param.type == 'accept') {\r\n                queryText = \"UPDATE waka.company_invite SET invitee_company_id=$3, invitee_user_id=$2, is_accepted = true, accepted_on = now(), modified_by = $2, modified_on = now() WHERE company_invite_id = $1\";\r\n            }\r\n            else if (param.type =  true && param.poi_master_error_id != undefined) {\r\n                queryText = \"UPDATE waka.company_invite SET invitee_company_id=$3, invitee_user_id=$2, is_accepted = true, accepted_on = now(), modified_by = $2, modified_on = now(), poi_master_error_id = null WHERE company_invite_id = $1\";\r\n            }\r\n            const queryParam = [param.company_invite_id, param.userId, param.invitee_company_id];\r\n            return yield psqlAPM.fnDbQuery('updCompanyInviteAccept', queryText, queryParam);\r\n        });\r\n    }\r\n    delCompanyInviteModules(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.company_invited_modules WHERE company_invite_id = $1\";\r\n            const queryParam = [param.company_invite_id];\r\n            return yield psqlAPM.fnDbQuery('delCompanyInviteModules', queryText, queryParam);\r\n        });\r\n    }\r\n    insUserCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.user_company(company_invite_id,user_id,company_id,invited_company_id,is_company_owner,created_by) VALUES ($1, $2, $3, $4, TRUE, $5);\";\r\n            const queryParam = [param.company_invite_id, param.userId, param.invitee_company_id, param.invited_company_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insCompanyInviteAccept', queryText, queryParam);\r\n        });\r\n    }\r\n    updContactInviteAccept(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.type == 'deny') {\r\n                queryText = \"UPDATE waka.contact_invite SET is_denied = true, denied_on = now(), modified_by = $2, modified_on = now() WHERE contact_invite_id = $1\";\r\n            }\r\n            else if (param.type == 'accept') {\r\n                queryText = \"UPDATE waka.contact_invite SET is_accepted = true, accepted_on = now(), modified_by = $2, modified_on = now() WHERE contact_invite_id = $1\";\r\n            }\r\n            let queryParam = [param.contact_invite_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updContactInviteAcceptDeny', queryText, queryParam);\r\n        });\r\n    }\r\n    checkEmailInviteContact(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * from waka.contact_invite WHERE email = $1;\";\r\n            const queryParam = [param.email];\r\n            return yield psqlAPM.fnDbQuery('checkEmailInviteContact', queryText, queryParam);\r\n        });\r\n    }\r\n    insContactInviteUserCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.user_company (contact_invite_id, user_id, created_by, company_id, invited_company_id, is_company_owner) VALUES ($1, $2, $2, $3, $3, true);\";\r\n            const queryParam = [param.contact_invite_id, param.userId, param.company_id];\r\n            return yield psqlAPM.fnDbQuery('updContactInviteUserCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    updCompanyInviteDeny(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.company_invite SET is_denied = true, denied_on = now(), modified_by = $2, modified_on = now() WHERE company_invite_id = $1\";\r\n            const queryParam = [param.company_invite_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updCompanyInviteDeny', queryText, queryParam);\r\n        });\r\n    }\r\n    getAddressForCompanyId(company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ca.address, COALESCE(ci.name, ca.city) as city, st.name as state, co.name as country, ca.zip_code FROM waka.company_address ca JOIN waka.country co on co.country_id=ca.country_id JOIN waka.state st on st.state_id = ca.state_id LEFT JOIN waka.city ci on ci.city_id=ca.city_id WHERE ca.company_id = $1 AND ca.address_type_id = (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_name ='communication')\";\r\n            const queryParam = [company_id];\r\n            return yield psqlAPM.fnDbQuery('getAddressForCompanyId', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyContacts(company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //const queryText = \"SELECT contact_name,email,designation,department,mobile FROM waka.contact_invite WHERE company_id = $1 \";\r\n            const queryText = \"select ci.contact_name, ci.email, ci.mobile, '' AS designation, COALESCE(lu.wechat_id, '') AS wechat_id FROM waka.contact_invite ci JOIN waka.login_user lu ON ci.invitee_user_id = lu.user_id where ci.company_id = $1\";\r\n            const queryParam = [company_id];\r\n            return yield psqlAPM.fnDbQuery('getCompanyContacts', queryText, queryParam);\r\n        });\r\n    }\r\n    inviteContactApproveRevoke(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.type == 'revoke') {\r\n                queryText = \"UPDATE waka.contact_invite SET is_accepted = false , accepted_on = null, is_revoked = true, revoked_on = now() WHERE contact_invite_id = $1\";\r\n            }\r\n            else if (param.type =  true && param.uc_id != null) {\r\n                queryText = \"UPDATE waka.contact_invite SET is_accepted = true , accepted_on = now(), is_revoked = false, revoked_on = null WHERE contact_invite_id = $1\";\r\n            }\r\n            else if (param.type =  true && param.uc_id == null) {\r\n                queryText = \"UPDATE waka.contact_invite SET is_revoked = false, revoked_on = null WHERE contact_invite_id = $1\";\r\n            }\r\n            let queryParam = [param.contact_invite_id];\r\n            return yield psqlAPM.fnDbQuery('inviteContactApproveRevoke', queryText, queryParam);\r\n        });\r\n    }\r\n    inviteCompanyApproveRevoke(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.type == 'revoke') {\r\n                queryText = \"UPDATE waka.company_invite SET is_accepted = false , accepted_on = null, is_revoked = true, revoked_on = now() WHERE company_invite_id = $1\";\r\n            }\r\n            else if (param.type =  true && param.uc_id != null) {\r\n                queryText = \"UPDATE waka.company_invite SET is_accepted = true , accepted_on = now(), is_revoked = false, revoked_on = null WHERE company_invite_id = $1\";\r\n            }\r\n            else if (param.type =  true && param.uc_id == null) {\r\n                queryText = \"UPDATE waka.company_invite SET is_revoked = false, revoked_on = null WHERE company_invite_id = $1\";\r\n            }\r\n            let queryParam = [param.company_invite_id];\r\n            return yield psqlAPM.fnDbQuery('inviteCompanyApproveRevoke', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyList(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.*, cl.is_approved, cl.valid_to::DATE, oc.lookup_name as office_category FROM waka.company c FULL OUTER JOIN waka.company_license cl ON c.company_id = cl.company_id JOIN waka.lookup_name oc ON oc.lookup_name_id = c.office_category_id WHERE c.created_by = $1  AND c.is_deleted = false  ORDER BY company_name\";\r\n            let queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getCompanyList', queryText, queryParam);\r\n        });\r\n    }\r\n    getPrincipalListForSop(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT *,(SELECT case when add.event_id is null then false else true end as is_add_sop FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN ($1) AND (company_id = c.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'ADD_SOP' LIMIT 1)) as add) FROM waka.company c JOIN waka.company_license cl ON c.company_id = cl.company_id AND is_approved = TRUE WHERE c.created_by IN (select DISTINCT created_by from waka.role_user_mapping WHERE assigned_user_id = $1) AND parent_company_id is null AND company_type_id IN (SELECT ln.lookup_name_id as lookup_id from waka.lookup_name ln JOIN waka.lookup_type lt on ln.lookup_type_id = lt.lookup_type_id where lt.lookup_type = 'account_type' AND ln.lookup_name ilike 'consignee') AND c.is_deleted = false\";\r\n            let queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getPrincipalListForSop', queryText, queryParam);\r\n        });\r\n    }\r\n    getPrincipalListForContract(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT *,(SELECT case when add.event_id is null then false else true end as is_add_contract FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN ($1) AND (company_id = c.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'ADD_CONTRACT' LIMIT 1)) as add) FROM waka.company c JOIN waka.company_license cl ON c.company_id = cl.company_id AND is_approved = TRUE WHERE c.created_by IN (select DISTINCT created_by from waka.role_user_mapping WHERE assigned_user_id = $1) AND parent_company_id is null AND company_type_id IN (SELECT ln.lookup_name_id as lookup_id from waka.lookup_name ln JOIN waka.lookup_type lt on ln.lookup_type_id = lt.lookup_type_id where lt.lookup_type = 'account_type' AND ln.lookup_name ilike 'consignee') AND c.is_deleted = false\";\r\n            let queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getPrincipalListForContract', queryText, queryParam);\r\n        });\r\n    }\r\n    getStakeholderList(principal_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT a.*, ln.lookup_name AS company_type FROM (select COALESCE(ci.invitee_company_id,c.company_id) AS company_id , COALESCE(ci.invitee_company_name, c.company_name) AS company_name, COALESCE(ci.invitee_company_type_id, c.company_type_id) AS company_type_id, COALESCE(ci.is_accepted, true) AS is_accepted from (select * from waka.company_invite where invited_company_id = $1) ci FULL OUTER JOIN (select * from waka.company where company_type_id IN (select lookup_name_id from  waka.lookup_name where lookup_name ilike 'carrier')) c ON ci.invitee_company_id = c.company_id) AS a JOIN waka.lookup_name ln ON a.company_type_id = ln.lookup_name_id\";\r\n            let queryParam = [principal_id];\r\n            return yield psqlAPM.fnDbQuery('getStakeholderList', queryText, queryParam);\r\n        });\r\n    }\r\n    validateInviteeCompanyName(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT company_id, company_name , office_category_id FROM waka.company WHERE created_by =  $1\";\r\n            return yield psqlAPM.fnDbQuery('validateInviteeCompanyName', queryText, [param.created_by]);\r\n        });\r\n    }\r\n    getCompanyData(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.company_id, c.company_name, lu.email, lu.full_name , c.office_category_id,c.company_type_id , oc.lookup_name as office_category FROM waka.company c JOIN waka.lookup_name oc ON oc.lookup_name_id = c.office_category_id join waka.login_user lu on lu.user_id = c.created_by where LOWER(c.company_name) = $1;\";\r\n            return yield psqlAPM.fnDbQuery('getCompanyData', queryText, [param.company_name]);\r\n        });\r\n    }\r\n    checkParentCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT * FROM waka.company WHERE parent_company_id =  $1;\";\r\n            return yield psqlAPM.fnDbQuery('checkParentCompany', queryText, [param.parent_company_id]);\r\n        });\r\n    }\r\n    getMyCompanyAndType(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT * from vw_my_company_and_type WHERE user_id = $1;\";\r\n            let queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getMyCompanyAndType', queryText, queryParam);\r\n        });\r\n    }\r\n    getWhoInvitedMe(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ci.invited_company_id as company_id, c.company_name, c.owned_by, ci.invited_company_type_id as company_type_id, ln.lookup_name as company_type,ci.invitee_company_id as my_company_id FROM waka.company_invite ci JOIN waka.company c ON c.company_id = ci.invited_company_id JOIN waka.lookup_name ln ON ln.lookup_name_id = ci.invited_company_type_id WHERE ci.invitee_company_id IN (SELECT company_id from my_company where user_id = $1);\";\r\n            let queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getWhoInvitedMe', queryText, queryParam);\r\n        });\r\n    }\r\n    getMyParentCompany(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"select mc.company_id as my_company_id, pc.parent_company_id, pc.parent_company_name, pc.parent_company_type_id, ln.lookup_name parent_company_type FROM my_company mc JOIN waka.company pc ON pc.parent_company_id = mc.company_id JOIN waka.lookup_name ln on ln.lookup_name_id = pc.company_type_id WHERE user_id = $1\";\r\n            let queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getMyParentCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    delActiontakenMasterError(poi_master_error_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.poi_master_error_temp WHERE poi_me_id = $1\";\r\n            const queryParam = [poi_master_error_id];\r\n            return yield psqlAPM.fnDbQuery('delActiontakenMasterError', queryText, queryParam);\r\n        });\r\n    }\r\n    updMasterError(poiMasterErrorId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = `UPDATE waka.poi_master_error_temp SET is_invite_sent = false WHERE poi_me_id = ${poiMasterErrorId}`;\r\n            return yield psqlAPM.fnDbQuery('delActiontakenMasterError', queryText, []);\r\n        });\r\n    }\r\n    insSupplierRef(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.supplier_ref (company_id, supplier_code, supplier_name, waka_ref_supplier_id) VALUES ($1,$2,$3,$4) RETURNING supplier_ref_id\";\r\n            const queryParam = [param.invited_company_id, param.ref_code, param.invitee_company_name, param.invitee_company_id];\r\n            return yield psqlAPM.fnDbQuery('insSupplierRef', queryText, queryParam);\r\n        });\r\n    }\r\n    insBuyerRef(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.buyer_ref (company_id, buyer_code, buyer_name, waka_ref_buyer_id) VALUES ($1,$2,$3,$4) RETURNING buyer_ref_id\";\r\n            const queryParam = [param.invited_company_id, param.ref_code, param.invitee_company_name, param.invitee_company_id];\r\n            return yield psqlAPM.fnDbQuery('insSupplierRef', queryText, queryParam);\r\n        });\r\n    }\r\n    insFactoryRef(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.factory_ref (company_id,factory_code,factory_name,waka_ref_factory_id) VALUES ((SELECT company_id FROM waka.poi_scheduler_running_status WHERE poi_id IN (SELECT poi_id FROM waka.poi_master_error_temp WHERE poi_me_id = $1) LIMIT 1),(SELECT ref_code FROM waka.poi_master_error_temp WHERE poi_me_id = $1),(SELECT error_value FROM waka.poi_master_error_temp WHERE poi_me_id = $1),$2)\";\r\n            const queryParam = [param.poi_master_error_id, param.invitee_company_id];\r\n            return yield psqlAPM.fnDbQuery('insFactoryRef', queryText, queryParam);\r\n        });\r\n    }\r\n    getMasterErrors(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT COUNT(*) as error_count FROM waka.poi_master_error_temp WHERE poi_id = $1\";\r\n            const queryParam = [param.poi_id];\r\n            return yield psqlAPM.fnDbQuery('getMasterErrors', queryText, queryParam);\r\n        });\r\n    }\r\n    updMasterUnderProcess(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.poi_scheduler_running_status SET is_master_under_process =  $1 WHERE poi_id = $2;\";\r\n            return yield psqlAPM.fnDbQuery('updMasterUnderProcess', queryText, [param.is_master_under_process, param.poi_id]);\r\n        });\r\n    }\r\n    ;\r\n    checkCompanyLicense(compId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT is_approved FROM waka.company_license WHERE company_id = $1\";\r\n            return yield psqlAPM.fnDbQuery('checkCompanyLicense', queryText, [compId]);\r\n        });\r\n    }\r\n    ;\r\n}\r\nexports.CompanyContactModel = CompanyContactModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/companyContactModel.ts?");

/***/ }),

/***/ "./src/models/initialize.ts":
/*!**********************************!*\
  !*** ./src/models/initialize.ts ***!
  \**********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Initialize = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass Initialize {\r\n    constructor() { }\r\n    ;\r\n    checkDB() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT now()\";\r\n            return yield psqlAPM.fnDbQuery('checkDBAtLaunch', queryText, []);\r\n        });\r\n    }\r\n    getLookupValues() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ln.lookup_name_id, ln.lookup_name, ln.display_name, lt.lookup_type FROM waka.lookup_name ln JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE NOT ln.is_deleted\";\r\n            return yield psqlAPM.fnDbQuery('getLookupValues', queryText, []);\r\n        });\r\n    }\r\n    getCountry() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT country_id, name, iso3, iso2 FROM waka.country\";\r\n            return yield psqlAPM.fnDbQuery('getCountry', queryText, []);\r\n        });\r\n    }\r\n    getState() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT state_id, name, country_id FROM waka.state\";\r\n            return yield psqlAPM.fnDbQuery('getState', queryText, []);\r\n        });\r\n    }\r\n    getCity() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT city_id, name, state_id, country_id FROM waka.city\";\r\n            return yield psqlAPM.fnDbQuery('getCity', queryText, []);\r\n        });\r\n    }\r\n    getPorts() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT port_id, port_name, country, country_id,  region, subregion, port_name||' '||country as portwithregion FROM waka.port WHERE NOT is_deleted ORDER BY country, port_name\";\r\n            return yield psqlAPM.fnDbQuery('getPorts', queryText, []);\r\n        });\r\n    }\r\n    getTotalCntByModule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let tableName = param[0].table_name;\r\n            if (tableName == 'company') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.\" + tableName + \" WHERE owned_by = $1\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, [param[1].userId]);\r\n            }\r\n            else if (tableName == 'roles_master') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.\" + tableName + \" WHERE created_by IN (1,$1) OR company_id IN (SELECT c.company_id as company_ids FROM waka.company c JOIN waka.lookup_name oc ON oc.lookup_name_id = c.office_category_id LEFT JOIN waka.company pc ON pc.company_id = c.parent_company_id WHERE c.owned_by IN (select created_by from waka.contact_invite where invitee_user_id = $1 AND is_accepted = true AND company_id = c.company_id) OR c.owned_by = $1 AND oc.lookup_name = 'head quarters')\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, [param[1].userId]);\r\n            }\r\n            else if (tableName == 'lookup_type') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.\" + tableName + \" WHERE is_deleted = false\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, []);\r\n            }\r\n            else if (tableName == 'third_party_services') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.lookup_name ln JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE ln.is_deleted = false AND lt.lookup_type ='service_type'\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, []);\r\n            }\r\n            else if (tableName == 'map_services') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.map_services_temp WHERE created_by = $1\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, [param[1].userId]);\r\n            }\r\n            else if (tableName == 'sop') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.\" + tableName + \" WHERE created_by = $1\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, [param[1].userId]);\r\n            }\r\n            else if (tableName == 'contract') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.\" + tableName + \" WHERE created_by = $1\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, [param[1].userId]);\r\n            }\r\n            else if (tableName == 'admin') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.sub_modules sm JOIN waka.modules m ON m.module_id=sm.module_id WHERE m.module_name='Admin' AND sm.is_admin_owned = false;\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, []);\r\n            }\r\n            else if (tableName == 'po_ingestion') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.sub_modules sm JOIN waka.modules m ON m.module_id=sm.module_id WHERE m.module_name='Po Ingestion' AND sm.is_admin_owned = false;\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, []);\r\n            }\r\n            else if (tableName == 'schedulers_status') {\r\n                let queryText = \"SELECT '\" + tableName + \"' as table_name, COUNT(*) FROM waka.scheduler_availability_status;\";\r\n                return yield psqlAPM.fnDbQuery('getTotalCntByModule - ' + tableName, queryText, []);\r\n            }\r\n        });\r\n    }\r\n    getCountryCode() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT country_id as country_code_id, name as country_name, phone_code as country_code, iso3 as iso_code FROM waka.country ORDER BY 2\";\r\n            return yield psqlAPM.fnDbQuery('getCountryCode', queryText, []);\r\n        });\r\n    }\r\n    getAdminLookups() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ln.lookup_name_id, ln.lookup_type_id, ln.lookup_name, ln.display_name, ln.description , lt.lookup_type FROM waka.lookup_name ln JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE ln.is_deleted = false\";\r\n            return yield psqlAPM.fnDbQuery('getAdminRoles', queryText, []);\r\n        });\r\n    }\r\n    // async getLookup(param:any){\r\n    //     let queryText = \"SELECT ln.lookup_type_id, ln.company_id, ln.lookup_name_id, ln.lookup_name, ln.display_name, ln.description, c.company_name FROM waka.lookup_name ln JOIN waka.company c ON c.company_id = ln.company_id WHERE ln.lookup_type_id = $1 AND ln.is_deleted = false\";\r\n    //     let whereCondition = param.userId == 1 ? \" AND ln.created_by = 1 ORDER BY ln.display_name\" : \" ORDER BY ln.display_name\";\r\n    //     queryText += whereCondition;\r\n    //     return await psqlAPM.fnDbQuery('getAdminRoles', queryText, [param.lookup_type_id]);\r\n    // }\r\n    getLookup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = '';\r\n            if (param.is_admin) {\r\n                queryText = \"SELECT ln.*, c.company_name, false as is_selected, false as is_edit, 'auto' as card_height FROM waka.lookup_name ln JOIN waka.company c ON c.company_id = ln.company_id WHERE lookup_type_id = $1 AND c.owned_by IN ($2,1) AND ln.is_active AND ln.is_deleted = false AND c.is_deleted = false ORDER BY ln.seq;\";\r\n            }\r\n            else {\r\n                queryText = \"SELECT ln.*, c.company_name, (SELECT CASE WHEN c.owned_by = 1 THEN true ELSE false END ) as is_admin_lookup, false as is_selected, false as is_edit, 'auto' as card_height FROM waka.lookup_name ln JOIN waka.company c ON c.company_id = ln.company_id WHERE lookup_type_id = $1 AND c.owned_by IN ($2,1) AND ln.is_active AND ln.is_deleted = false AND c.is_deleted = false ORDER BY ln.seq;\";\r\n            }\r\n            const queryParam = [param.lookup_type_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('getlookupTypeList', queryText, queryParam);\r\n        });\r\n    }\r\n    getlookupTypeList() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT lt.lookup_type_id, lt.lookup_type, lt.display_name FROM waka.lookup_type lt WHERE lt.is_deleted = false AND lt.is_active ORDER BY lt.display_name;\";\r\n            return yield psqlAPM.fnDbQuery('getlookupTypeList', queryText, []);\r\n        });\r\n    }\r\n    getServiceTypeList() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT lt.lookup_type_id, ln.lookup_name_id, ln.lookup_name, ln.display_name FROM waka.lookup_name ln JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE ln.is_deleted = false AND lt.lookup_type ='service_type' ORDER BY lt.display_name\";\r\n            return yield psqlAPM.fnDbQuery('getServiceTypeList', queryText, []);\r\n        });\r\n    }\r\n    getserviceTypeColl(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT service_id, service_type_id, service_name, parent_service_id FROM waka.services WHERE service_type_id = $1;\";\r\n            return yield psqlAPM.fnDbQuery('getserviceTypeColl', queryText, [param.lookup_name_id]);\r\n        });\r\n    }\r\n    addServiceEntry(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.services (service_type_id, service_name, created_by) VALUES ($1, $2, $3)\";\r\n            const queryParam = [param.service_type_id, param.service_name, param.userId];\r\n            return yield psqlAPM.fnDbQuery('addServiceEntry', queryText, queryParam);\r\n        });\r\n    }\r\n    updateServiceEntry(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.services SET service_name = $2, modified_by = $3, modified_on = now() WHERE service_id = $1;\";\r\n            const queryParam = [param.service_id, param.service_name, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updateServiceEntry', queryText, queryParam);\r\n        });\r\n    }\r\n    delServiceEntry(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.services WHERE service_id = $1;\";\r\n            const queryParam = [param.service_id];\r\n            return yield psqlAPM.fnDbQuery('delServiceEntry', queryText, queryParam);\r\n        });\r\n    }\r\n    addLookup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const nextSeq = yield psqlAPM.fnDbQuery('addLookupEntry', \"SELECT (COUNT(seq) + 1) AS seq FROM waka.lookup_name WHERE lookup_type_id = $1;\", [param.lookup_type_id]);\r\n            const queryText = \"INSERT INTO waka.lookup_name (company_id, lookup_type_id, lookup_name, display_name, description, seq, created_by) VALUES ($1, $2, $3, $4, $5, $6, $7)\";\r\n            const queryParam = [param.company_id, param.lookup_type_id, param.lookup_name, param.lookup_disp_name, param.lookup_desc, nextSeq.rows[0].seq, param.userId];\r\n            return yield psqlAPM.fnDbQuery('addLookup', queryText, queryParam);\r\n        });\r\n    }\r\n    updateLookup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.lookup_name SET lookup_name = $2, display_name = $3, description = $4 , modified_by = $5, modified_on = now() WHERE lookup_name_id = $1;\";\r\n            const queryParam = [param.lookup_name_id, param.lookup_name, param.lookup_disp_name, param.lookup_desc, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updateLookup', queryText, queryParam);\r\n        });\r\n    }\r\n    // async delLookupName(param:any){\r\n    //     const queryText = \"UPDATE waka.lookup_name SET is_deleted = true WHERE lookup_name_id = $1;\";\r\n    //     const queryParam = [param.lookup_id];\r\n    //     return await psqlAPM.fnDbQuery('updateLookupEntry', queryText, queryParam);\r\n    // }\r\n    delLookupName(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.lookup_name WHERE lookup_name_id = $1;\";\r\n            const queryParam = [param.lookup_id];\r\n            return yield psqlAPM.fnDbQuery('delLookupName', queryText, queryParam);\r\n        });\r\n    }\r\n    getLookupTypeId(type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT lookup_type_id FROM waka.lookup_type WHERE lookup_type = $1\";\r\n            const queryParam = [type];\r\n            return yield psqlAPM.fnDbQuery('getLookupTypeId', queryText, queryParam);\r\n        });\r\n    }\r\n    getServiceChargeGroup() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT lt.lookup_type, lt.display_name, lt.lookup_type_id FROM waka.service_charges_grp scg JOIN waka.lookup_type lt ON lt.lookup_type_id = scg.service_charge_id\";\r\n            return yield psqlAPM.fnDbQuery('getServiceChargeGroup', queryText, []);\r\n        });\r\n    }\r\n    getChargeUom() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT lookup_name_id, lookup_name, display_name FROM waka.lookup_name WHERE lookup_type_id IN (SELECT lookup_type_id FROM waka.lookup_type WHERE lookup_type = 'charge_uom') AND NOT is_deleted\";\r\n            return yield psqlAPM.fnDbQuery('getChargeUom', queryText, []);\r\n        });\r\n    }\r\n    getLCLValidity() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT lookup_name_id, lookup_name, display_name FROM waka.lookup_name WHERE lookup_type_id IN (SELECT lookup_type_id FROM waka.lookup_type WHERE lookup_type = 'free_storage_days_validity') AND NOT is_deleted\";\r\n            return yield psqlAPM.fnDbQuery('getLCLValidity', queryText, []);\r\n        });\r\n    }\r\n    getCurrency() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT lookup_name_id, lookup_name, display_name FROM waka.lookup_name WHERE lookup_type_id IN (SELECT lookup_type_id FROM waka.lookup_type WHERE lookup_type = 'currency') AND NOT is_deleted\";\r\n            return yield psqlAPM.fnDbQuery('getCurrency', queryText, []);\r\n        });\r\n    }\r\n    getCompanyList(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT company_id, company_name FROM waka.company WHERE created_by = $1 ORDER BY company_name\";\r\n            return yield psqlAPM.fnDbQuery('getCompanyList', queryText, [param.userId]);\r\n        });\r\n    }\r\n}\r\nexports.Initialize = Initialize;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/initialize.ts?");

/***/ }),

/***/ "./src/models/licenseModel.ts":
/*!************************************!*\
  !*** ./src/models/licenseModel.ts ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.LicenseModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass LicenseModel {\r\n    constructor() { }\r\n    ;\r\n    getLicenseDetails() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT cl.company_id, c.company_name, cl.cl_id,  ln.lookup_name , CASE  WHEN cl.is_approved = false THEN 'Requested' ELSE 'Registered' END AS status FROM waka.company_license cl JOIN waka.company c ON cl.company_id = c.company_id LEFT JOIN waka.company_lic_module clm ON clm.cl_id = cl.cl_id LEFT JOIN waka.lookup_name ln on ln.lookup_name_id = c.office_category_id group by c.company_name, ln.lookup_name, cl.cl_id order by cl.is_approved = false desc, cl.created_on desc;\";\r\n            return yield psqlAPM.fnDbQuery('getLicenseDetails', queryText, []);\r\n        });\r\n    }\r\n    approveLicenseStatus(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \" UPDATE waka.company_license set is_approved = true where cl_id = $1\";\r\n            const queryParam = [param.cl_id];\r\n            return yield psqlAPM.fnDbQuery('approveLicenseStatus', queryText, queryParam);\r\n        });\r\n    }\r\n    revokeLicenseStatus(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \" UPDATE waka.company_license set is_approved = false where cl_id = $1\";\r\n            const queryParam = [param.cl_id];\r\n            return yield psqlAPM.fnDbQuery('revokeLicenseStatus', queryText, queryParam);\r\n        });\r\n    }\r\n    insUserCompanyOnLicenseApproval(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.user_company (user_id, company_id, is_company_owner, created_by) SELECT c.owned_by, c.company_id, true, $2 FROM waka.company c WHERE c.company_id = $1\";\r\n            const queryParam = [param.company_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insUserCompanyOnLicenseApproval', queryText, queryParam);\r\n        });\r\n    }\r\n}\r\nexports.LicenseModel = LicenseModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/licenseModel.ts?");

/***/ }),

/***/ "./src/models/manageOrdersModel.ts":
/*!*****************************************!*\
  !*** ./src/models/manageOrdersModel.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.manageOrdersModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass manageOrdersModel {\r\n    constructor() { }\r\n    ;\r\n    getCompaniesForPO(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select array_agg(distinct(company_id)) as company_ids from waka.supplier_ref WHERE waka_ref_supplier_id IN (SELECT company_id FROM waka.company WHERE owned_by = $1);\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getPurchaseOrders', queryText, queryParam);\r\n        });\r\n    }\r\n    getPurchaseOrders(companyIds, userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `SELECT product, product_description, SUM(item_qty) AS item_qty, MIN(ship_date) AS ship_date, supplier_ref_id, CONCAT(to_char(ship_date , 'Mon'),' ',extract(year from ship_date::timestamp)) as date FROM (`;\r\n            for (let idx in companyIds) {\r\n                queryText += `select product, product_description, SUM(item_qty) AS item_qty, MIN(ship_date) AS ship_date, supplier_ref_id FROM waka.po_${companyIds[idx]} WHERE supplier_ref_id IN (SELECT company_id FROM waka.company WHERE owned_by = ${userId}) GROUP BY 1,2,5`;\r\n                if (parseInt(idx) < companyIds.length - 1) {\r\n                    queryText += \" UNION ALL \";\r\n                }\r\n            }\r\n            queryText += \") AS data GROUP BY 1,2,5,6 ORDER BY 4 ASC;\";\r\n            return yield psqlAPM.fnDbQuery('getPurchaseOrders', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    getPurchaseOrdersCompanywise(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = '';\r\n            for (let idx in param.company_ids) {\r\n                queryText += `select po_${param.company_ids[idx]}.order_number, po_${param.company_ids[idx]}.item_qty, po_${param.company_ids[idx]}.ship_date, 0 as actual_quantity ,c.company_name FROM waka.po_${param.company_ids[idx]} as po_${param.company_ids[idx]} JOIN waka.company c ON c.company_id = ${param.company_ids[idx]} WHERE supplier_ref_id IN (SELECT company_id FROM waka.company WHERE owned_by = ${param.userId}) AND product = '${param.product}' AND product_description = '${param.product_description}'`;\r\n                if (parseInt(idx) < param.company_ids.length - 1) {\r\n                    queryText += \" UNION ALL \";\r\n                }\r\n            }\r\n            queryText += \";\";\r\n            return yield psqlAPM.fnDbQuery('getPurchaseOrdersCompanywise', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    addOrdersTransaction(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.po_transactions(product, product_description, supplier_ref_id, transaction_date, shift_batch, mfg_qty, attachment_file_path, created_by) VALUES ($1, $2, $3, $4, $5, $6, $7, $8);\";\r\n            const queryParam = [param.product, param.product_description, param.supplier_ref_id, param.date, param.shift_batch, param.mq, param.relative_path, param.userId];\r\n            return yield psqlAPM.fnDbQuery('addOrdersTransaction', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    updOrdersTransaction(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.po_transactions SET transaction_date = $1, shift_batch = $2, mfg_qty = $3, attachment_file_path = $4 WHERE pot_id = $5;\";\r\n            const queryParam = [param.transaction_date, param.shift_batch, param.mq, param.relative_path, param.pot_id];\r\n            return yield psqlAPM.fnDbQuery('updOrdersTransaction', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delTransaction(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.po_transactions WHERE pot_id = $1;\";\r\n            const queryParam = [param.pot_id];\r\n            return yield psqlAPM.fnDbQuery('delTransaction', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getOrderTransactions(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * FROM waka.po_transactions WHERE supplier_ref_id = $1 AND product = $2 AND product_description = $3\";\r\n            const queryParam = [param.supplier_ref_id, param.product, param.product_description];\r\n            return yield psqlAPM.fnDbQuery('getOrderTransactions', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n}\r\nexports.manageOrdersModel = manageOrdersModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/manageOrdersModel.ts?");

/***/ }),

/***/ "./src/models/moduleModel.ts":
/*!***********************************!*\
  !*** ./src/models/moduleModel.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ModuleModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass ModuleModel {\r\n    constructor() { }\r\n    ;\r\n    getModules(is_licensed) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (is_licensed) {\r\n                queryText = \"SELECT m.module_id, m.module_name, icon, svg, seq, table_reference FROM waka.modules m WHERE is_visible ORDER BY seq\";\r\n                return yield psqlAPM.fnDbQuery('getModules', queryText, []);\r\n            }\r\n            else {\r\n                queryText = \"SELECT m.module_id, m.module_name, icon, svg, table_reference FROM waka.modules m  WHERE is_licensed = $1 ORDER BY m.module_name\";\r\n                let queryParam = [is_licensed];\r\n                return yield psqlAPM.fnDbQuery('getModules', queryText, queryParam);\r\n            }\r\n        });\r\n    }\r\n    getModulesList(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.is_licensed) {\r\n                queryText = `SELECT module_id,module_name,seq,icon,svg,table_reference FROM waka.modules_list WHERE is_visible AND is_licensed = false UNION SELECT module_id,module_name,seq,icon,svg,table_reference FROM waka.modules_list WHERE module_name = 'Admin' UNION SELECT module_id,module_name,seq,icon,svg,table_reference FROM waka.modules_list WHERE module_name = 'Manage Orders' UNION SELECT module_id,module_name,seq,icon,svg,table_reference FROM waka.modules_list WHERE module_name = 'Shipment Booking' UNION SELECT module_id,module_name,seq,icon,svg,table_reference FROM waka.modules_list WHERE is_visible AND module_id IN (SELECT DISTINCT module_id FROM waka.role_module_mapping_new WHERE role_id IN (SELECT DISTINCT rum.role_id FROM waka.role_user_mapping rum JOIN waka.contact_invite ci ON ci.invitee_user_id = ${param.userId} WHERE assigned_user_id = ${param.userId} AND ci.is_accepted )) UNION SELECT module_id,module_name,seq,icon,svg,table_reference FROM waka.modules_list WHERE is_visible AND module_id IN (SELECT DISTINCT module_id FROM waka.role_module_mapping_new WHERE role_id IN (SELECT DISTINCT rum.role_id FROM waka.role_user_mapping rum WHERE assigned_user_id = ${param.userId})) ORDER BY seq;`;\r\n                // UNION SELECT module_id,module_name,seq,icon,svg,table_reference FROM waka.modules_list JOIN waka.company ON company_id IN (SELECT company_id FROM waka.company WHERE owned_by = ${param.userId} AND company_type_id IN (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_type_id IN (SELECT lookup_type_id FROM waka.lookup_type WHERE lookup_type = 'account_type') AND lookup_name = 'Shipper')) WHERE module_name = 'Manage Orders' ORDER BY seq;\r\n            }\r\n            else {\r\n                queryText = `SELECT ml.module_id, ml.module_name, ml.seq, ml.icon, ml.svg, ml.table_reference FROM waka.modules_list ml WHERE is_visible AND ml.module_id IN (SELECT rmm.module_id FROM waka.role_module_mapping_new rmm WHERE rmm.role_id IN (SELECT rum.role_id FROM waka.role_user_mapping rum JOIN waka.contact_invite ci ON ci.invitee_user_id = ${param.userId} WHERE assigned_user_id = ${param.userId} AND ci.is_accepted)) UNION SELECT module_id, module_name, seq, icon, svg, table_reference FROM waka.modules_list WHERE module_name = 'Home' OR module_name = 'Company' ORDER BY seq;`;\r\n            }\r\n            return yield psqlAPM.fnDbQuery('getModulesList', queryText, []);\r\n        });\r\n    }\r\n    getSubModules(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sm.sub_module_name, sm.sub_module_id, m.module_name, sm.module_id, sm.is_visible, is_admin_owned, sm.icon, sm.table_reference from waka.sub_modules sm JOIN waka.modules m ON m.module_id = sm.module_id where sm.module_id = $1 order by sm.seq asc;\";\r\n            const queryParam = [param.module_id];\r\n            return yield psqlAPM.fnDbQuery('getSubModules', queryText, queryParam);\r\n        });\r\n    }\r\n    addModule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.modules (module_name) VALUES ($1)\";\r\n            const queryParam = [param.module_name];\r\n            return yield psqlAPM.fnDbQuery('addModule', queryText, queryParam);\r\n        });\r\n    }\r\n    updateModule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.modules set module_name = $1 where module_id = $2\";\r\n            const queryParam = [param.module_name, param.module_id];\r\n            return yield psqlAPM.fnDbQuery('updateModule', queryText, queryParam);\r\n        });\r\n    }\r\n    getLicensedModulesForUser(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT distinct m.module_name,sm.module_id, m.icon, m.svg, m.table_reference FROM waka.user_company uc JOIN waka.company c ON c.company_id = uc.company_id JOIN waka.shared_license sl ON sl.shared_company_id = uc.company_id JOIN waka.shared_lic_module sm ON sm.sl_id = sl.sl_id JOIN waka.modules m ON m.module_id = sm.module_id WHERE uc.user_id = $1 UNION select module_name, module_id, icon, svg, table_reference from waka.modules where is_licensed = false AND is_visible\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getLicensedModulesForUser', queryText, queryParam);\r\n        });\r\n    }\r\n    getAdminModules() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT module_id,module_name,seq,icon,svg,table_reference FROM waka.modules_list WHERE is_visible;\";\r\n            return yield psqlAPM.fnDbQuery('getAdminModules', queryText, []);\r\n        });\r\n    }\r\n    getEventId() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT jsonb_object_agg(em.event_name,em_id) as event_ids FROM waka.event_master em;\";\r\n            return yield psqlAPM.fnDbQuery('getEventId', queryText, []);\r\n        });\r\n    }\r\n}\r\nexports.ModuleModel = ModuleModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/moduleModel.ts?");

/***/ }),

/***/ "./src/models/poBookingModel.ts":
/*!**************************************!*\
  !*** ./src/models/poBookingModel.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.POBModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass POBModel {\r\n    constructor() { }\r\n    ;\r\n    getPOBGrp() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT distinct grp_seq, grp, html_template FROM waka.po_booking WHERE NOT is_deleted ORDER BY 1\";\r\n            const queryParam = [];\r\n            return yield psqlAPM.fnDbQuery('getPOBGrp', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getPOBForGrp(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT pob_id, pob_seq, sub_grp_seq, sub_grp, pob_name, control_name, has_child, view_text, fields,ui_img_file_name FROM waka.po_booking WHERE NOT is_deleted AND grp=$1 ORDER BY 3,2\";\r\n            const queryParam = [param.grp];\r\n            return yield psqlAPM.fnDbQuery('getPOBForGrp', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n}\r\nexports.POBModel = POBModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/poBookingModel.ts?");

/***/ }),

/***/ "./src/models/poIngestionModel.ts":
/*!****************************************!*\
  !*** ./src/models/poIngestionModel.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.POIModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass POIModel {\r\n    constructor() { }\r\n    ;\r\n    getPoIngestionCards(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT DISTINCT c.company_id, c.company_name, c.parent_company_id, c.company_type_id, pc.company_name AS parent_company, pi.is_validated, pi.is_scheduled, oc.lookup_name as office_category, ct.lookup_name FROM waka.company c JOIN waka.lookup_name oc ON oc.lookup_name_id = c.office_category_id LEFT JOIN waka.company pc ON pc.company_id = c.parent_company_id JOIN waka.lookup_name ct ON ct.lookup_name_id = c.company_type_id AND LOWER(ct.lookup_name) = 'consignee' LEFT JOIN waka.company_license cl ON cl.company_id = c.company_id AND cl.is_approved LEFT JOIN waka.po_ingestion pi ON pi.company_id = c.company_id WHERE c.owned_by IN (SELECT created_by FROM waka.contact_invite WHERE cl.is_approved AND invitee_user_id = $1 AND is_accepted = true AND company_id = c.company_id) OR c.owned_by = $1 AND now() BETWEEN cl.valid_from AND cl.valid_to;\";\r\n            const queryParam = [param];\r\n            return yield psqlAPM.fnDbQuery('getPoIngestionCards', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getPoIngestionData(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * FROM waka.po_ingestion WHERE company_id = $1\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getPoIngestionData', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    updatePoTemplate(jsonData, company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.po_ingestion SET po_template = $1 WHERE company_id = $2\";\r\n            const queryParam = [jsonData, company_id];\r\n            return yield psqlAPM.fnDbQuery('updatePoTemplate', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    uploadDataSet(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.po_ingestion(company_id, filepath, created_by) VALUES ($1, $2, $3);\";\r\n            const queryParam = [param.company_id, param.relativePath, param.userId];\r\n            return yield psqlAPM.fnDbQuery('uploadDataSet', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getPoIngestionFileName(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT filepath FROM waka.po_ingestion WHERE company_id = $1\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getPoIngestionData', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getPoiTemplate(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT po_template FROM waka.po_ingestion WHERE company_id = $1\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getPoIngestionData', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    deleUploadedFile(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.po_ingestion WHERE company_id = $1\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('deleteDataSet', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    validatePoiMapping(jsonData, unMappedTargets, company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.po_ingestion SET po_template = $1, unmapped_targets = $2, is_validated = true WHERE company_id = $3\";\r\n            const queryParam = [jsonData, unMappedTargets, company_id];\r\n            return yield psqlAPM.fnDbQuery('updatePoTemplate', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    createPOChildTables(newColumns, company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `create table waka.po_raw_${company_id} (po_raw_${company_id}_id SERIAL NOT NULL PRIMARY KEY, po_raw_id INT NOT NULL REFERENCES waka.po_raw(po_raw_id) ON DELETE CASCADE, `;\r\n            //let queryText = `create table waka.po_raw_${company_id} (po_raw_${company_id}_id SERIAL NOT NULL PRIMARY KEY, ordernumber VARCHAR, `\r\n            for (let idx in newColumns) {\r\n                queryText += `${newColumns[idx]} VARCHAR, `;\r\n            }\r\n            queryText += `created_by INT NOT NULL REFERENCES waka.login_user(user_id) ON DELETE CASCADE, created_on TIMESTAMPTZ NOT NULL DEFAULT now(), modified_by INT REFERENCES waka.login_user(user_id) ON DELETE CASCADE,modified_on TIMESTAMPTZ); `;\r\n            return yield psqlAPM.fnDbQuery('createPOChildTables', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    AddColumnInPOChildTables(newColumns, company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `ALTER TABLE waka.po_raw_${company_id} `;\r\n            for (let idx in newColumns) {\r\n                queryText += `ADD COLUMN ${newColumns[idx]} VARCHAR`;\r\n                parseInt(idx) < newColumns.length - 1 ? queryText += ', ' : queryText += ';';\r\n            }\r\n            return yield psqlAPM.fnDbQuery('AddColumnInPOChildTables', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    delPOSchemaError(mappedColumns, company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `DELETE FROM waka.poi_schema_error WHERE LOWER(missing_key) IN (`;\r\n            for (let idx in mappedColumns) {\r\n                queryText += `'${mappedColumns[idx].toLowerCase()}'`;\r\n                parseInt(idx) < mappedColumns.length - 1 ? queryText += ', ' : queryText += ') ';\r\n            }\r\n            queryText += `AND poi_id = (SELECT poi_id FROM waka.po_ingestion where company_id = ${company_id});`;\r\n            return yield psqlAPM.fnDbQuery('AddColumnInPOChildTables', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    getCountOfSchemaError(company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `SELECT COUNT(*) AS COUNT FROM waka.poi_schema_error where poi_id IN (SELECT poi_id FROM waka.po_ingestion WHERE company_id = $1)`;\r\n            let queryParam = [company_id];\r\n            return yield psqlAPM.fnDbQuery('getCountOfSchemaError', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    updPOSchemaStatus(company_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `UPDATE waka.poi_scheduler_running_status SET is_schema_under_process = false WHERE company_id = $1`;\r\n            let queryParam = [company_id];\r\n            return yield psqlAPM.fnDbQuery('updPOSchemaStatus', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    // async validatePoiMapping(param:any) {\r\n    //     let queryText, queryParam;\r\n    //     if (param.newKeys.length != 0 && param.mappedKeys.length == 0) {\r\n    //         queryText = \"UPDATE waka.po_ingestion SET new_keys = $1, is_validated = true WHERE created_by = $2\";\r\n    //         queryParam = [JSON.stringify(param.newKeys), param.userId];\r\n    //     } else if (param.newKeys.length == 0 && param.mappedKeys.length != 0) {\r\n    //         queryText = \"UPDATE waka.po_ingestion SET mapped_keys = $1, is_validated = true WHERE created_by = $2\";\r\n    //         queryParam = [JSON.stringify(param.mappedKeys), param.userId];\r\n    //     } else {\r\n    //         queryText = \"UPDATE waka.po_ingestion SET mapped_keys = $1, new_keys = $2, is_validated = true WHERE created_by = $3\";\r\n    //         queryParam = [JSON.stringify(param.mappedKeys), JSON.stringify(param.newKeys), param.userId];\r\n    //     }\r\n    //     return await psqlAPM.fnDbQuery('validatePoiMapping', queryText, queryParam);\r\n    // };\r\n    deleteMappings(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.po_ingestion SET po_template = null, unmapped_targets = null, is_validated = false, is_scheduled = false, mandatory_fields = null WHERE company_id = $1\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('deleteMappings', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    deleteSchedule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.po_ingestion_schedule WHERE company_id = $1\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('deleteSchedule', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    dropPORawChildTables(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DROP TABLE IF EXISTS waka.po_raw_\" + param.company_id;\r\n            return yield psqlAPM.fnDbQuery('dropPORawChildTables', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    viewPoiMappings(user_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT mapped_keys, new_keys FROM waka.po_ingestion WHERE created_by = $1\";\r\n            const queryParam = [user_id];\r\n            return yield psqlAPM.fnDbQuery('viewPoiMappings', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getIngestionLookups(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"WITH temp AS (SELECT ln.lookup_name_id, ln.display_name, ln.created_by FROM waka.lookup_name ln JOIN waka.lookup_type lt ON lt.lookup_type_id = ln.lookup_type_id WHERE ln.is_deleted = false AND lt.lookup_type = $1 AND company_id IN (1, $2) order by display_name, created_by desc) SELECT DISTINCT ON (display_name) lookup_name_id, display_name, created_by FROM temp ORDER BY display_name ;\";\r\n            return yield psqlAPM.fnDbQuery('getIngestionLookups', queryText, [param.lookup_name, param.company_id]);\r\n        });\r\n    }\r\n    schedulePoIngestion(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            let queryParam;\r\n            if (param.pois_id == null) {\r\n                queryText = \"INSERT INTO waka.po_ingestion_schedule(poi_id, company_id, request_type, content_type, testurl, authorize_type, authorize_param, request_headers, frequency, start_time, end_time, selected_days, timezone_offset, test_response, test_response_time, test_response_size, req_body_type, request_parameters, request_body, created_by, created_on) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,now());\";\r\n                queryParam = [param.poi_id, param.company_id, param.request_type, param.content_type, param.url, param.authorize_type, param.authorize_param, param.request_headers, param.frequency, param.start_time, param.end_time, param.selected_days, param.timezone_offset, param.test_response, param.test_response_time, param.test_response_size, param.req_body_type, param.request_parameters, param.request_body, param.userId];\r\n            }\r\n            else {\r\n                queryText = \"UPDATE waka.po_ingestion_schedule SET request_type=$1, content_type=$2, testurl=$3, authorize_type=$4, authorize_param=$5, request_headers=$6, frequency=$7, start_time=$8, end_time=$9, selected_days=$10, timezone_offset=$11, test_response=$12, test_response_time=$13, test_response_size=$14, req_body_type=$15, request_parameters=$16, request_body=$17, modified_by=$18, modified_on=now() WHERE pois_id = $19\";\r\n                queryParam = [param.request_type, param.content_type, param.url, param.authorize_type, param.authorize_param, param.request_headers, param.frequency, param.start_time, param.end_time, param.selected_days, param.timezone_offset, param.test_response, param.test_response_time, param.test_response_size, param.req_body_type, param.request_parameters, param.request_body, param.userId, param.pois_id];\r\n            }\r\n            return yield psqlAPM.fnDbQuery('schedulePoIngestion', queryText, queryParam);\r\n        });\r\n    }\r\n    validatePoiSchedule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.po_ingestion SET is_scheduled = true, mandatory_fields = $2 WHERE company_id = $1\";\r\n            const queryParam = [param.company_id, param.mandatory_fields];\r\n            return yield psqlAPM.fnDbQuery('validatePoiSchedule', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getPoiScheduleData(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * FROM waka.po_ingestion_schedule WHERE company_id = $1 AND is_delete = false\";\r\n            return yield psqlAPM.fnDbQuery('getPoiScheduleData', queryText, [param.company_id]);\r\n        });\r\n    }\r\n    getPoiRunningStatus(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * FROM waka.poi_scheduler_running_status WHERE company_id = $1 ORDER BY received_on DESC LIMIT $2 OFFSET $3 \";\r\n            return yield psqlAPM.fnDbQuery('getPoiScheduleData', queryText, [param.company_id, param.limit, param.offset]);\r\n        });\r\n    }\r\n    getPoiUnmappedTargets(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT unmapped_targets FROM waka.po_ingestion WHERE company_id = $1\";\r\n            return yield psqlAPM.fnDbQuery('getPoiUnmappedTargets', queryText, [param.company_id]);\r\n        });\r\n    }\r\n    getPoIngestionSchemaErrors(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT se.poi_id, se.missing_key, MIN(se.missing_key_hierarchy) AS missing_key_hierarchy FROM waka.poi_schema_error se JOIN waka.po_ingestion_schedule s ON s.poi_id = se.poi_id WHERE s.company_id = $1 GROUP BY se.missing_key, se.poi_id;\";\r\n            return yield psqlAPM.fnDbQuery('getPoIngestionSchemaErrors', queryText, [param.company_id]);\r\n        });\r\n    }\r\n    getPoIngestionMasterErrors(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT me.poi_me_id, me.poi_id, me.error_type, me.error_value, me.ref_code, is_invite_sent FROM waka.poi_master_error_temp me JOIN waka.po_ingestion_schedule s ON s.poi_id = me.poi_id WHERE s.company_id = $1 GROUP BY me.error_type, me.error_value, me.ref_code, me.poi_id, is_invite_sent, me.poi_me_id;\";\r\n            return yield psqlAPM.fnDbQuery('getPoIngestionMasterErrors', queryText, [param.company_id]);\r\n        });\r\n    }\r\n    validatePoiSchema(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select now()\";\r\n            return yield psqlAPM.fnDbQuery('validatePoiSchema', queryText, []);\r\n        });\r\n    }\r\n    getTotalCntForSchemaErrors(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \" WITH query AS ( SELECT s.company_id, COUNT(se.missing_key) FROM waka.poi_schema_error se JOIN waka.po_ingestion_schedule s ON s.poi_id = se.poi_id WHERE s.company_id = $1 GROUP BY se.missing_key, se.poi_id, s.company_id) SELECT MAX(query.company_id) AS company_id, COUNT(*) FROM query;\";\r\n            return yield psqlAPM.fnDbQuery('getTotalCntForSchemaErrors', queryText, [param.company_id]);\r\n        });\r\n    }\r\n    getTotalCntForMasterErrors(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //const queryText = \" WITH query AS ( SELECT s.company_id, COUNT(me.error_type) FROM waka.poi_master_error_temp me JOIN waka.po_ingestion_schedule s ON s.poi_id = me.poi_id WHERE s.company_id = $1 GROUP BY me.error_type, me.poi_id, s.company_id) SELECT MAX(query.company_id) AS company_id, COUNT(*) FROM query;\";\r\n            const queryText = \" SELECT s.company_id, COUNT(me.error_value) AS count FROM waka.poi_master_error_temp me JOIN waka.po_ingestion_schedule s ON s.poi_id = me.poi_id WHERE s.company_id = $1 GROUP BY s.company_id;\";\r\n            return yield psqlAPM.fnDbQuery('getTotalCntForMasterErrors', queryText, [param.company_id]);\r\n        });\r\n    }\r\n    getTotalCntForRunningStatus(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT company_id, COUNT(*) FROM waka.poi_scheduler_running_status WHERE company_id = $1 GROUP BY company_id;\";\r\n            return yield psqlAPM.fnDbQuery('getTotalCntForRunningStatus', queryText, [param.company_id]);\r\n        });\r\n    }\r\n    getConsigneeListForMasterValidation() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // const queryText = \"SELECT c.company_id, c.company_name, ln.lookup_name FROM waka.company c JOIN waka.lookup_name ln ON ln.lookup_name_id = c.company_type_id WHERE ln.lookup_name = 'Consignee';\";\r\n            const queryText = \"SELECT c.company_id, c.company_name, ln.lookup_name FROM waka.company c JOIN waka.lookup_name ln ON ln.lookup_name_id = c.company_type_id WHERE c.office_category_id IN (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_type_id IN (SELECT lookup_type_id FROM waka.lookup_type WHERE lookup_type = 'office_category') AND lookup_name = 'head quarters');\";\r\n            return yield psqlAPM.fnDbQuery('getConsigneeListForMasterValidation', queryText, []);\r\n        });\r\n    }\r\n    getPortListForMasterValidation() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT port_id, port_name, country FROM waka.port WHERE is_deleted = false and is_visible = true;\";\r\n            return yield psqlAPM.fnDbQuery('getPortListForMasterValidation', queryText, []);\r\n        });\r\n    }\r\n    delInviteFromMasterValidation(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.poi_master_error_temp SET is_invite_sent = false WHERE poi_me_id = $1\";\r\n            const queryParam = [param.poi_master_error_id];\r\n            return yield psqlAPM.fnDbQuery('validatePoiSchedule', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delInviteCompanyPerm(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.company_invite WHERE company_invite_id = $1\";\r\n            const queryParam = [param.company_invite_id];\r\n            return yield psqlAPM.fnDbQuery('delInviteCompanyPerm', queryText, queryParam);\r\n        });\r\n    }\r\n    updMasterErrors(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.poi_master_error_temp SET is_invite_sent = true WHERE poi_me_id = $1\";\r\n            const queryParam = [param.poi_me_id];\r\n            return yield psqlAPM.fnDbQuery('updMasterErrors', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delValidatedMasterError(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.poi_master_error_temp WHERE error_type = $1 and poi_id = $2 AND LOWER(regexp_replace(error_value,'[^a-zA-Z]','','g')) = $3\";\r\n            return yield psqlAPM.fnDbQuery('delValidatedMasterError', queryText, [param.error_type, param.poi_id, param.error_value.toLowerCase().replaceAll(/[^a-zA-Z]/g, \"\")]);\r\n        });\r\n    }\r\n    addNewIncoterm(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.lookup_name(lookup_type_id, company_id, lookup_name, display_name, seq, created_by) VALUES ((SELECT lookup_type_id FROM waka.lookup_type where lookup_type = 'incoterms'), $1, $2, $2, 1, $3)\";\r\n            const queryParam = [param.company_id, param.error_value, param.userId];\r\n            return yield psqlAPM.fnDbQuery('addNewIncoterm', queryText, queryParam);\r\n        });\r\n    }\r\n    poiMasterMapPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.port_ref(company_id, port_code, port_name, waka_ref_port_id) VALUES ((SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1), $2, $3, $4)\";\r\n            return yield psqlAPM.fnDbQuery('poiMasterMapPort', queryText, [param.poi_id, param.ref_code, param.error_value, param.matchedPortId]);\r\n        });\r\n    }\r\n    poiMasterMapIncoterm(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.incoterms_ref(company_id, incoterms_name, waka_ref_incoterms_id) VALUES ((SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1), $2, $3)\";\r\n            return yield psqlAPM.fnDbQuery('poiMasterMapIncoterm', queryText, [param.poi_id, param.error_value, param.matchedIncotermId]);\r\n        });\r\n    }\r\n    poiMasterMapSupplier(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.supplier_ref(company_id, supplier_name, supplier_code,waka_ref_supplier_id) VALUES ((SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1),$2,$3,$4)\";\r\n            return yield psqlAPM.fnDbQuery('poiMasterMapSupplier', queryText, [param.poi_id, param.error_value, param.ref_code, param.matchedCompanyId]);\r\n        });\r\n    }\r\n    poiMasterMapFactory(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.factory_ref(company_id, factory_name, factory_code,waka_ref_factory_id) VALUES ((SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1), $2,$3,$4)\";\r\n            return yield psqlAPM.fnDbQuery('poiMasterMapFactory', queryText, [param.poi_id, param.error_value, param.ref_code, param.matchedCompanyId]);\r\n        });\r\n    }\r\n    poiMasterMapBuyer(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.buyer_ref(company_id, buyer_name, waka_ref_buyer_id) VALUES ($1, $2, $3)\";\r\n            return yield psqlAPM.fnDbQuery('poiMasterMapBuyer', queryText, [param.company_id, param.buyer_code, param.buyer_name, param.waka_ref_buyer_id]);\r\n        });\r\n    }\r\n    updMasterErrorStatus(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.po_ingestion_schedule SET is_master_under_process = true WHERE company_id = $1\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('updMasterErrorStatus', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    checkCompanyInvite(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT invitee_company_id, is_accepted, is_denied FROM waka.company_invite WHERE invited_company_id IN (SELECT company_id FROM waka.po_ingestion WHERE poi_id = $2) AND invitee_company_id IN (SELECT company_id FROM waka.company WHERE LOWER(regexp_replace(company_name,'[^a-zA-Z]','','g')) = $1);\";\r\n            const queryParam = [param.matchedWithExisting.toLowerCase().replaceAll(/[^a-zA-Z]/g, \"\"), param.poi_id];\r\n            return yield psqlAPM.fnDbQuery('checkCompanyInvite', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    checkPortRef(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * FROM waka.port_ref WHERE company_id IN (SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1) AND LOWER(regexp_replace(port_name,'[^a-zA-Z]','','g')) ~ $2;\";\r\n            const queryParam = [param.poi_id, param.error_value.toLowerCase().replaceAll(/[^a-zA-Z]/g, \"\")];\r\n            return yield psqlAPM.fnDbQuery('checkPortRef', queryText, queryParam);\r\n        });\r\n    }\r\n    insInviteCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.company_invite (invited_company_id,invited_user_id,invitee_company_id,invitee_company_name,invitee_contact_name,invitee_email,invitee_user_id,invitee_company_type_id,created_by,invited_company_type_id,poi_master_error_id) VALUES ((SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1),(SELECT owned_by FROM waka.company WHERE company_id IN (SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1)),$2,$3,(SELECT full_name FROM waka.company c JOIN waka.login_user lu ON lu.user_id = c.owned_by WHERE c.company_id = $2),(SELECT email FROM waka.company c JOIN waka.login_user lu ON lu.user_id = c.owned_by WHERE c.company_id = $2),(SELECT user_id FROM waka.company c JOIN waka.login_user lu ON lu.user_id = c.owned_by WHERE c.company_id = $2),(SELECT company_type_id FROM waka.company WHERE company_id = $2),(SELECT owned_by FROM waka.company WHERE company_id IN (SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1)),(SELECT company_type_id FROM waka.company WHERE company_id IN (SELECT company_id FROM waka.po_ingestion WHERE poi_id = $1)),$4)\";\r\n            const queryParam = [param.poi_id, param.matchedCompanyId, param.matchedWithExisting, param.poi_me_id];\r\n            return yield psqlAPM.fnDbQuery('insInviteCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    updInviteSendInMasterError(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.poi_master_error_temp SET is_invite_sent = $1 WHERE error_value = $2 AND error_type = $3 AND poi_id = $4\";\r\n            const queryParam = [param.is_invite_sent, param.error_value, param.error_type, param.poi_id];\r\n            return yield psqlAPM.fnDbQuery('updInviteSendInMasterError', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyInviteData(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * FROM waka.company_invite WHERE invited_company_id = $1 AND LOWER(regexp_replace(invitee_company_name,'[^a-zA-Z]','','g')) = $2;\";\r\n            const queryParam = [param.company_id, param.invitee_company_name.toLowerCase().replaceAll(/[^a-zA-Z]/g, \"\")];\r\n            return yield psqlAPM.fnDbQuery('getCompanyInviteData', queryText, queryParam);\r\n        });\r\n    }\r\n    getMasterErrors(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT COUNT(*) as error_count FROM waka.poi_master_error_temp WHERE poi_id = $1;\";\r\n            const queryParam = [param.poi_id];\r\n            return yield psqlAPM.fnDbQuery('getMasterErrors', queryText, queryParam);\r\n        });\r\n    }\r\n    updMasterUnderProcess(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.poi_scheduler_running_status SET is_master_under_process =  $1 WHERE poi_id = $2\";\r\n            return yield psqlAPM.fnDbQuery('schemaUnderProcessChecker', queryText, [param.is_master_under_process, param.poi_id]);\r\n        });\r\n    }\r\n    ;\r\n    insInviteExistingSupplier(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = `INSERT INTO waka.company_invite (invited_company_id, invited_user_id,invitee_company_id,invitee_company_name,invitee_contact_name,invitee_email,invitee_user_id,invitee_company_type_id,created_by,invited_company_type_id,poi_master_error_id) VALUES (${param.invited_company_id},(SELECT owned_by FROM waka.company WHERE company_id = ${param.invited_company_id}),${param.invitee_company_id},'${param.invitee_company_name}',(SELECT full_name FROM waka.company c JOIN waka.login_user lu ON lu.user_id = c.owned_by WHERE c.company_id = ${param.invitee_company_id}),(SELECT email FROM waka.company c JOIN waka.login_user lu ON lu.user_id = c.owned_by WHERE c.company_id = ${param.invitee_company_id}),(SELECT user_id FROM waka.company c JOIN waka.login_user lu ON lu.user_id = c.owned_by WHERE c.company_id = ${param.invitee_company_id}),(SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_name = 'Shipper'),(SELECT owned_by FROM waka.company WHERE company_id = ${param.invited_company_id}),(SELECT company_type_id FROM waka.company WHERE company_id = ${param.invited_company_id}), ${param.poi_master_error_id}) RETURNING company_invite_id`;\r\n            return yield psqlAPM.fnDbQuery('schemaUnderProcessChecker', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n}\r\nexports.POIModel = POIModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/poIngestionModel.ts?");

/***/ }),

/***/ "./src/models/psqlAPM.ts":
/*!*******************************!*\
  !*** ./src/models/psqlAPM.ts ***!
  \*******************************/
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst pg_1 = __webpack_require__(/*! pg */ \"pg\");\r\nconst config = __webpack_require__(/*! ../config/constants */ \"./src/config/constants.ts\");\r\nconst pool = new pg_1.Pool(config.settings.pgDbConfig);\r\nconst log = __webpack_require__(/*! ../log */ \"./src/log.ts\");\r\nmodule.exports.fnDbQuery = fnDbQuery;\r\nfunction fnDbQuery(methodName, queryText, queryParam) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let client;\r\n        let start;\r\n        let qryResult;\r\n        try {\r\n            start = Date.now();\r\n            client = yield pool.connect();\r\n            try {\r\n                const qResult = yield client.query(queryText, queryParam);\r\n                const duration = Date.now() - start;\r\n                let result = qResult;\r\n                result[\"success\"] = true;\r\n                result.error = false;\r\n                log.dblog(\"info\", `${process.pid}, PSQL, ${methodName}, ${duration} ms, ${pool.idleCount} idle, ${pool.waitingCount} queue, ${pool.totalCount} total`);\r\n                qryResult = result;\r\n            }\r\n            catch (e) {\r\n                log.dblog(\"error\", `${process.pid}, PSQLQueryError, ${methodName}, ${e.message},${e.stack}`);\r\n                qryResult = { success: false, qry_error: true, message: e.message };\r\n            }\r\n            finally {\r\n                client.release();\r\n            }\r\n        }\r\n        catch (e) {\r\n            log.dblog(\"error\", `${process.pid}, PSQL, ${methodName}, ${e.message},${e.stack}`);\r\n            console.log(\"PSQLConnectionErrorStack\", e.stack);\r\n            qryResult = { success: false, connection_error: true, message: e.message };\r\n        }\r\n        finally {\r\n            return qryResult;\r\n        }\r\n    });\r\n}\r\npool.on('error', (err) => {\r\n    log.dblog(\"error\", `${process.pid}, PSQL Pool error, ${err.message},${err.stack}`);\r\n    console.error('Connection error experianced', err);\r\n});\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/psqlAPM.ts?");

/***/ }),

/***/ "./src/models/requirementModel.ts":
/*!****************************************!*\
  !*** ./src/models/requirementModel.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ReqModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass ReqModel {\r\n    constructor() { }\r\n    ;\r\n    getDocs() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT d.doc_id, d.grp_seq,d.grp, d.sub_grp_seq, d.sub_grp, d.doc_name, d.control_name, d.doc_seq, d.has_child, d.fields FROM waka.documents d WHERE NOT is_deleted ORDER BY 2, 4,8\";\r\n            const queryParam = [];\r\n            return yield psqlAPM.fnDbQuery('getDocs', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    insReq(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.requirements (req_type_id, grpid0,grpid1,grpid2,grpid3,fields,grpid0_seq,grpid1_seq,grpid2_seq,grpid3_seq,created_by) VALUES ($1,$2,$3,$4,$5,$6,(SELECT COALESCE(max(grpid0_seq),0)+1 FROM waka.requirements WHERE req_type_id = $1),(SELECT COALESCE(max(grpid1_seq),0)+1 FROM waka.requirements WHERE req_type_id = $1 AND grpid0=$2),(SELECT COALESCE(max(grpid1_seq),0)+1 FROM waka.requirements WHERE req_type_id = $1 AND grpid0=$2 AND grpid1=$3),(SELECT COALESCE(max(grpid2_seq),0)+1 FROM waka.requirements WHERE req_type_id = $1 AND grpid0=$2 AND grpid1=$3 AND grpid2=$4),$7)\";\r\n            const queryParam = [param.req_type_id, param.group_id0, param.group_id1, param.group_id2, param.group_id3, param.fields, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insReq', queryText, queryParam);\r\n        });\r\n    }\r\n    getRequirement(type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT r.req_id,r.req_type_id, r.grpid0,r.grpid1,r.grpid2,r.grpid3,r.fields,r.grpid0_seq,r.grpid1_seq,r.grpid2_seq,r.grpid3_seq, g0.display_name g0_name, g1.display_name g1_name, g2.display_name g2_name, g3.display_name g3_name FROM waka.requirements r JOIN waka.lookup_name g0 ON g0.lookup_name_id=r.grpid0 LEFT JOIN waka.lookup_name g1 ON g1.lookup_name_id=r.grpid1 LEFT JOIN waka.lookup_name g2 ON g2.lookup_name_id=r.grpid2 LEFT JOIN waka.lookup_name g3 ON g3.lookup_name_id=r.grpid3 WHERE r.req_type_id IN (SELECT lookup_type_id FROM waka.lookup_type WHERE lookup_type=$1)\";\r\n            const queryParam = [type];\r\n            return yield psqlAPM.fnDbQuery('getRequirement', queryText, queryParam);\r\n        });\r\n    }\r\n    delRequirement(req_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.requirements WHERE req_id = $1\";\r\n            const queryParam = [req_id];\r\n            return yield psqlAPM.fnDbQuery('delRequirement', queryText, queryParam);\r\n        });\r\n    }\r\n}\r\nexports.ReqModel = ReqModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/requirementModel.ts?");

/***/ }),

/***/ "./src/models/sopModel.ts":
/*!********************************!*\
  !*** ./src/models/sopModel.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.SOPModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass SOPModel {\r\n    constructor() { }\r\n    ;\r\n    insSOP(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop (principal_id,ff_id,date_of_sop,remarks,rmd,sop_status_id, valid_from, valid_to, created_by, pp_type_id, ff_type_id) SELECT $1,$2,$3,$4,$5,(select lookup_name_id from waka.lookup_name WHERE lookup_name = 'Draft' AND lookup_type_id IN (select lookup_type_id from waka.lookup_type where lookup_type='sop_status')),$6,$7,$8,$9, $10 returning sop_id, sop_status_id\";\r\n            const queryParam = [param.principal_id, param.ff_id, param.date_of_sop, param.remarks, param.rmd, param.valid_from, param.valid_to, param.userId, param.pp_type_id, param.ff_type_id];\r\n            return yield psqlAPM.fnDbQuery('insSOP', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    updSOPValidity(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.sop SET valid_from = $1, valid_to = $2 WHERE sop_id = $3\";\r\n            const queryParam = [param.valid_from, param.valid_to, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('updSOPValidity', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPId(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let query = \"SELECT s.sop_id, s.sop_status_id, ln.lookup_name as status, EXTRACT(day from now() - s.date_of_sop) pending_days, s.valid_from, s.valid_to FROM waka.sop s JOIN waka.lookup_name ln on ln.lookup_name_id=s.sop_status_id WHERE s.principal_id = $1 AND s.ff_id = $2 ORDER BY s.valid_from\";\r\n            let qryParam = [param.principal_id, param.ff_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPId', query, qryParam);\r\n        });\r\n    }\r\n    getSOPs_old(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT distinct s.sop_id, s.principal_id, s.rmd, cp.company_name p_company, s.ff_id, cf.company_name as ff_company, s.date_of_sop, s.remarks, s.sop_status_id, sn.lookup_name as status,EXTRACT(day from now() - s.date_of_sop) pending_days, s.valid_from, s.valid_to, cp.company_logo_path as p_logo_path FROM waka.sop s JOIN waka.user_company uc ON (uc.company_id = s.principal_id OR uc.company_id = s.ff_id OR uc.invited_company_id = s.principal_id OR uc.invited_company_id = s.ff_id ) AND uc.user_id = $1 JOIN waka.company cp ON cp.company_id = s.principal_id JOIN waka.company cf ON cf.company_id = s.ff_id JOIN waka.lookup_name sn on sn.lookup_name_id = s.sop_status_id WHERE NOT s.is_deleted ORDER BY s.valid_from desc\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getSOPs', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getSOPs(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT distinct s.sop_id, s.principal_id, s.rmd, cp.company_name p_company, s.ff_id, cf.company_name as ff_company, s.date_of_sop, s.remarks, s.sop_status_id, sn.lookup_name as status,EXTRACT(day from now() - s.date_of_sop) pending_days, s.valid_from, s.valid_to, cp.company_logo_path as p_logo_path,( SELECT case when a.event_id is null then false else true end as is_edit FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = s.ff_id OR company_id = s.principal_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'EDIT_SOP' LIMIT 1)) as a),(SELECT case when b.event_id is null then false else true end as is_print FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = s.ff_id OR company_id = s.principal_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'PRINT_SOP' LIMIT 1)) as b),(SELECT case when c.event_id is null then false else true end as is_delete FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = s.ff_id OR company_id = s.principal_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'DELETE_SOP' LIMIT 1)) as c),(SELECT case when d.event_id is null then false else true end as is_view FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = $1 AND (company_id = s.ff_id OR company_id = s.principal_id )))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'VIEW_SOP' LIMIT 1)) as d) FROM waka.sop s JOIN waka.user_company uc ON (uc.company_id = s.principal_id OR uc.company_id = s.ff_id OR uc.invited_company_id = s.principal_id OR uc.invited_company_id = s.ff_id ) AND uc.user_id = $1 JOIN waka.company cp ON cp.company_id = s.principal_id JOIN waka.company cf ON cf.company_id = s.ff_id JOIN waka.lookup_name sn on sn.lookup_name_id = s.sop_status_id WHERE NOT s.is_deleted ORDER BY s.valid_from desc;\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getSOPs', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getSOPCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //const queryText = \"SELECT sc.sop_id, sc.company_id, sc.company_type_id, ln.lookup_name as company_type, c.company_name, sc.country_id, co.name as country_name FROM waka.sop_company as sc JOIN waka.company as c on c.company_id = sc.company_id JOIN waka.country co ON co.country_id=sc.country_id JOIN waka.lookup_name as ln ON ln.lookup_name_id = sc.company_type_id WHERE sc.sop_id = $1\";\r\n            const queryText = \"SELECT sc.sop_id, sc.principal_id as principal_company_id, sc.pp_type_id as pp_company_type_id, sc.ff_id as ff_company_id, sc.ff_type_id as ff_company_type_id from waka.sop as sc WHERE sc.sop_id = $1\";\r\n            const queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getAllCompForSOPByCompType(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sc.sop_company_id, sc.sop_id, c.company_id, c.company_type_id, ln.lookup_name as company_type, c.company_name, c.country_id, co.name as country_name, c.state_id, st.name as state_name, c.city_id, COALESCE(ct.name,c.city) as city_name, c.zip_code, c.address, CASE WHEN sop_company_id is not null THEN true ELSE false END as is_selected FROM company as c LEFT JOIN sop_company as sc on c.company_id = sc.company_id AND sc.sop_id = $1 JOIN country co ON co.id=c.country_id JOIN state st on st.id = c.state_id JOIN lookup_name as ln ON ln.lookup_name_id = c.company_type_id LEFT JOIN city ct ON ct.id = c.city_id WHERE ln.lookup_name=$2 AND ln.lookup_type_id IN (SELECT lookup_type_id FROM lookup_type where lookup_type = 'account_type')\";\r\n            const queryParam = [param.sop_id, param.company_type];\r\n            return yield psqlAPM.fnDbQuery('getAllCompForSOPByCompType', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    insSOPCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_company (created_by,sop_id, company_id, company_type_id, country_id) SELECT $1, * FROM jsonb_to_recordset($2) as x(sop_id INT, company_id INT, company_type_id INT, country_id INT) ON CONFLICT ON CONSTRAINT sop_company_sop_id_company_id_key DO NOTHING\";\r\n            const queryParam = [param.userId, JSON.stringify(param.sopCompColl)];\r\n            return yield psqlAPM.fnDbQuery('insSOPCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    updSOPCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE sop_company SET company_id = $1, modified_on= now(), modified_by=$3 WHERE sop_company_id = $2\";\r\n            const queryParam = [param.sop_id, param.sop_company_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delSOPCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE from waka.sop_company where sop_id = $1\";\r\n            const queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delSOPContactsByCompId(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_contacts sc WHERE sop_id =$1 AND sc.contact_id IN (SELECT contact_id FROM contacts WHERE company_id = $2);\";\r\n            const queryParam = [param.sop_id, param.company_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPContactsByCompId', queryText, queryParam);\r\n        });\r\n    }\r\n    // async insSOPCompanies (param:any){\r\n    //     let queryText = \"INSERT INTO sop_company (sop_id, company_id,created_by) VALUES \";\r\n    //     param.addedCompanyIds.map((id:number,ix:number) => {\r\n    //         if (ix != 0) queryText += \",\";\r\n    //         queryText += \"(\"+param.sop_id+\",\"+id+\",\"+param.userId+\")\"\r\n    //     });\r\n    //     return await psqlAPM.fnDbQuery('insSOPCompanies', queryText, []);\r\n    // };\r\n    removeSOPContacts(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM sop_contacts sc WHERE sop_id =\" + param.sop_id + \" AND sc.contact_id IN (SELECT contact_id FROM contacts WHERE company_id IN (\";\r\n            param.removedCompanyIds.map((id, ix) => {\r\n                if (ix != 0)\r\n                    queryText += \",\";\r\n                queryText += id;\r\n            });\r\n            queryText += \"))\";\r\n            return yield psqlAPM.fnDbQuery('removeSOPContacts', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    removeSOPCompanies(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM sop_company WHERE company_id IN (\";\r\n            param.removedCompanyIds.map((id, ix) => {\r\n                if (ix != 0)\r\n                    queryText += \",\";\r\n                queryText += id;\r\n            });\r\n            queryText += \")\";\r\n            return yield psqlAPM.fnDbQuery('removeSOPCompanies', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    getSOPContactsForCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sc.sop_id, sc.sop_contact_id, c.contact_id, c.contact_type, c.company_id, co.company_name, c.contact_name, c.email, c.division, c.position, c.phone_country_id, c.phone, c.mobile_country_id, c.mobile, c.wechatid, sc.remainder_alerts, sc.escalation_alerts FROM contacts c JOIN sop_contacts sc on sc.contact_id = c.contact_id AND sc.sop_id = $1 JOIN company co ON co.company_id = c.company_id WHERE c.company_id = $2 AND c.contact_type=$3\";\r\n            const queryParam = [param.sop_id, param.company_id, param.contact_type];\r\n            return yield psqlAPM.fnDbQuery('getSOPContactsForCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPContactsAllCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sc.sop_id, sc.sop_contact_id, c.contact_id, c.contact_type, c.company_id, co.company_name, c.contact_name, c.email, c.division, c.position, c.phone_country_id, c.phone, c.mobile_country_id, c.mobile, c.wechatid, sc.remainder_alerts, sc.escalation_alerts FROM contacts c JOIN sop_contacts sc on sc.contact_id = c.contact_id AND sc.sop_id = $1 JOIN company co ON co.company_id = c.company_id WHERE c.contact_type=$2\";\r\n            const queryParam = [param.sop_id, param.contact_type];\r\n            return yield psqlAPM.fnDbQuery('getSOPContactsAllCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPContact(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO sop_contacts(sop_id,contact_id, remainder_alerts, escalation_alerts, created_by) VALUES ($1, $2, $3, $4, $5) returning sop_contact_id\";\r\n            const queryParam = [param.sop_id, param.contact_id, param.remainder_alerts, param.escalation_alerts, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insSOPContact', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPContact(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE sop_contacts SET sop_id = $1,contact_id=$2, remainder_alerts=$3, escalation_alerts=$4, modified_by=$5, modified_on=now() WHERE sop_contact_id = $6\";\r\n            const queryParam = [param.sop_id, param.contact_id, param.remainder_alerts, param.escalation_alerts, param.userId, param.sop_contact_id];\r\n            return yield psqlAPM.fnDbQuery('updSOPContact', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPContactPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO sop_contacts_port (sop_contact_id, origin_port_id, created_by) VALUES \";\r\n            param.origin_ports.map((port, i) => {\r\n                if (i != 0)\r\n                    queryText += \",\";\r\n                queryText += \"(\" + param.sop_contact_id + \",\" + port.port_id + \",\" + param.userId + \")\";\r\n            });\r\n            return yield psqlAPM.fnDbQuery('insSOPContactPort', queryText, []);\r\n        });\r\n    }\r\n    delSOPContactPorts(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_contacts_port WHERE sop_contact_id = $1\";\r\n            const queryParam = [param.sop_contact_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPContactPorts', queryText, queryParam);\r\n        });\r\n    }\r\n    delSOPContact(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_contacts WHERE sop_contact_id = $1\";\r\n            const queryParam = [param.sop_contact_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPContact', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPContactPorts(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sop_contact_port_id,sop_contact_id,origin_port_id,true as is_selected FROM sop_contacts_port WHERE sop_contact_id=$1\";\r\n            const queryParam = [param.sop_contact_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPContactPorts', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPDocs(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sd.sop_id, sd.origin_country_id, sd.destination_country_id,d.grp_seq, d.grp, count(d.grp) FROM waka.documents d JOIN waka.sop_document sd ON sd.doc_id = d.doc_id WHERE NOT d.is_deleted AND sd.sop_id = $1 GROUP BY 1,2,3,4,5 ORDER BY d.grp_seq\";\r\n            const queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPDocs', queryText, queryParam);\r\n        });\r\n    }\r\n    //not in use at 11/18/2021\r\n    insSOPDocs_old(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_document (created_by,sop_id, origin_country_id,destination_country_id,doc_id,fields) SELECT $1, * FROM jsonb_to_recordset($2) as x(sop_id int, origin_country_id int, destination_country_id int, doc_id int, fields JSON)\";\r\n            const queryParam = [param.userId, JSON.stringify(param.sopDoc)];\r\n            return yield psqlAPM.fnDbQuery('insSOPDocs', queryText, queryParam);\r\n        });\r\n    }\r\n    validateEmail(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.contact_id, sc.sop_contact_id, c.contact_name, c.division, c.position, c.phone_country_id, c.phone, c.mobile_country_id, c.mobile, c.contact_type, c.company_id, c.wechatid FROM contacts c LEFT JOIN sop_contacts sc on sc.contact_id = c.contact_id AND sc.sop_id = $2 AND sc.sop_contact_id != $3 WHERE c.email = $1 \";\r\n            let queryParam = [param.email, param.sop_id, param.sop_contact_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPContactByEmail', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPContactByEmail(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.contact_id, sc.sop_contact_id, c.contact_name, c.division, c.position, c.phone_country_id, c.phone, c.mobile_country_id, c.mobile, c.contact_type, c.company_id, c.wechatid FROM contacts c LEFT JOIN sop_contacts sc on sc.contact_id = c.contact_id AND sc.sop_id = $2 WHERE c.email = $1\";\r\n            let queryParam = [param.email, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPContactByEmail', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPCargoHandling(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"Insert INTO waka.sop_ch (sop_id, ch_id, fields, created_by) SELECT \" + param.sop_id + \", ch_id, fields,\" + param.userId + \" FROM waka.cargo_handling\";\r\n            return yield psqlAPM.fnDbQuery('insSOPCargoHandling', queryText, []);\r\n        });\r\n    }\r\n    getSOPCHForGroup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sop_ch_id, sch.sop_id,COALESCE(sch.ch_id, ch.ch_id) as ch_id, ch.ch_seq, ch.sub_grp_seq, ch.sub_grp, ch.ch_name, ch.control_name, ch.has_child, ch.view_text, COALESCE(sch.fields, ch.fields) as fields,ch.ui_img_file_name, COALESCE(sch.is_selected, false) is_selected FROM waka.cargo_handling as ch LEFT JOIN waka.sop_ch as sch ON sch.ch_id = ch.ch_id AND sch.sop_id = $2 WHERE NOT ch.is_deleted AND ch.grp=$1 ORDER BY 4,3\";\r\n            let queryParam = [param.grp, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCHForGroup', queryText, queryParam);\r\n        });\r\n    }\r\n    checkSOPInCH(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT distinct sop_id FROM waka.sop_ch WHERE sop_id = $1\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('checkSOPInCH', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPCHIsSelected(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_ch SET is_selected = $1, modified_on = now(), modified_by=$3 WHERE sop_ch_id = $2\";\r\n            let queryParam = [param.is_selected, param.sop_ch_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPCHIsSelected', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPCHOptimalValue(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_container SET fcl_min = $1, lcl_min = $2, optimal_cbm = $3 WHERE sop_container_id = $4\";\r\n            let queryParam = [param.fcl_min, param.lcl_min, param.optimal_cbm, param.sop_container_id];\r\n            return yield psqlAPM.fnDbQuery('updSOPCHOptimalValue', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPCHfields(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_ch SET fields = $1, modified_on = now(), modified_by=$3 WHERE sop_ch_id = $2\";\r\n            let queryParam = [param.fields, param.sop_ch_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPCHfields', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPContainer(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sc.sop_container_id, c.container_id, c.iso_type_code, c.iso_size_code, c.description as description, c.max_cbm, c.max_weight_kgs, sc.min_cbm, sc.optimal_cbm, sc.preference, sc.fcl_min, sc.lcl_min, sc.port_id_exception, c.remarks_required FROM waka.container_sizes c LEFT JOIN waka.sop_container sc ON sc.container_id = c.container_id AND sc.sop_id = $1 JOIN waka.container_first_character fc ON fc.code = c.first_character JOIN waka.container_second_character csc ON csc.code = c.second_character JOIN waka.container_type_desc td ON td.code = c.type_desc WHERE c.is_visible ORDER BY sc.preference, c.iso_type_code\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPContainer', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPContainer(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryDel = \"DELETE FROM waka.sop_container WHERE sop_id = $1\";\r\n            yield psqlAPM.fnDbQuery('removeSOPContainer', queryDel, [param.sop_id]);\r\n            let queryText = \"INSERT INTO waka.sop_container (created_by,sop_id, container_id, min_cbm,optimal_cbm,max_cbm,preference,fcl_min,lcl_min,port_id_exception) SELECT $1, $2, * FROM jsonb_to_recordset($3) as x(container_id int, min_cbm numeric, optimal_cbm numeric, max_cbm numeric, preference int, fcl_min int, lcl_min int, port_id_exception int[])\";\r\n            let queryParam = [param.userId, param.sop_id, param.data];\r\n            return yield psqlAPM.fnDbQuery('insSOPContainer', queryText, queryParam);\r\n        });\r\n    }\r\n    // async getSOPContainer(param:any){\r\n    //     let queryText = \"SELECT sc.sop_container_id, c.container_id, c.iso_type_code, c.iso_size_code, td.description||' L:'|| fc.length_mm||' W:'|| csc.width_mm ||' H:'||csc.height_mm as description, c.max_cbm, c.max_weight_kgs, sc.min_cbm, sc.optimal_cbm, sc.preference, sc.fcl_min, sc.port_id_exception, c.remarks_required FROM waka.container_sizes c LEFT JOIN waka.sop_container sc ON sc.container_id = c.container_id AND sc.sop_id = $1 JOIN waka.container_first_character fc ON fc.code = c.first_character JOIN waka.container_second_character csc ON csc.code = c.second_character JOIN waka.container_type_desc td ON td.code = c.type_desc WHERE c.is_visible ORDER BY sc.preference, c.iso_type_code\";\r\n    //     let queryParam = [param.sop_id];\r\n    //     return await psqlAPM.fnDbQuery('getSOPContainer', queryText, queryParam);\r\n    // }\r\n    updSOPContainer(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"\";\r\n            param.data.map((row) => {\r\n                queryText += \"UPDATE waka.sop_container SET sop_id=\" + param.sop_id + \",container_id=\" + row.container_id + \",min_cbm=\" + row.min_cbm + \",optimal_cbm=\" + row.optimal_cbm + \",preference=\" + row.preference + \",fcl_min=\" + row.fcl_min + \",port_id_exception='\" + row.port_id_exception + \"',modified_by=\" + param.userId + \",modified_on=now() WHERE sop_container_id = \" + row.sop_container_id + \";\";\r\n            });\r\n            return yield psqlAPM.fnDbQuery('updSOPContainer', queryText, []);\r\n        });\r\n    }\r\n    // async removeSOPContainer (param:any){\r\n    //     let queryText = \"DELETE FROM waka.sop_container WHERE sop_container_id IN (\";\r\n    //     param.removedContainerIds.map((id:number,ix:number)=>{\r\n    //         if (ix != 0) queryText += \",\";\r\n    //         queryText += id;\r\n    //     });\r\n    //     queryText += \")\";\r\n    //     return await psqlAPM.fnDbQuery('removeSOPContainer', queryText, []);\r\n    // }\r\n    removeSOPContainer(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM waka.sop_container WHERE sop_container_id = $1 and sop_id = $2\";\r\n            let queryParam = [param.sop_container_id, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('removeSOPContainer', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCarrierAlloc(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // const queryText = \"SELECT sca.sca_id, sca.sop_id, sca.origin_port_id, sca.dest_port_id, sca.carrier_id, sca.contract_number, sca.allocation_percent, sca.remarks, p.port_name||','||p.country as origin_port, dp.port_name||','||dp.country as dest_port,c.company_name as carrier_name, p.port_name||','||p.country ||' to '|| dp.port_name||','||dp.country as origin_dest_port FROM waka.sop_carrier_allocations sca JOIN waka.port p on p.port_id = sca.origin_port_id JOIN waka.port dp ON dp.port_id=sca.dest_port_id JOIN waka.company c ON c.company_id = sca.carrier_id WHERE sca.sop_id = $1;\";\r\n            const queryText = \"select sca.sop_ca_id, sca.sop_port_id, sca.effective_start_date, sca.effective_end_date, sca.allocated_by, sca.service_type, sca.allocation_type, sca.allocation_value, sca.carrier_preference, sca.carrier, sca.allocation_interval, sp.origin_port_id , sp.dest_port_id, po.port_name||', '||po.country as origin_port, pd.port_name||', '||pd.country as dest_port from waka.sop_carrier_allocation sca join waka.sop_port sp on sp.sop_port_id = sca.sop_port_id join waka.port po on po.port_id = sp.origin_port_id join waka.port pd on pd.port_id = sp.dest_port_id where sca.sop_id = $1;\";\r\n            const queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCarrierAlloc', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCarrierAllocByPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sca.sca_id, sca.sop_id, sca.origin_port_id, sca.dest_port_id, sca.carrier_id, sca.contract_number, sca.allocation_percent, sca.remarks, p.port_name||','||p.country as origin_port, dp.port_name||','||dp.country as dest_port,c.company_name as carrier_name FROM waka.sop_carrier_allocations sca JOIN waka.port p on p.port_id = sca.origin_port_id JOIN waka.port dp ON dp.port_id=sca.dest_port_id JOIN waka.company c ON c.company_id = sca.carrier_id WHERE sca.sop_id = $1 AND sca.origin_port_id = $2 AND sca.dest_port_id = $3;\";\r\n            const queryParam = [param.sop_id, param.origin_port_id, param.dest_port_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCarrierAllocByPort', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPCarrierAlloc(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.sop_carrier_allocations (created_by,sop_id, origin_port_id, dest_port_id, carrier_id, contract_number,allocation_percent) SELECT $1, * FROM jsonb_to_recordset($2) as x(sop_id int, origin_port_id int, dest_port_id int, carrier_id int, contract_number varchar, allocation_percent int)\";\r\n            let queryParam = [param.userId, param.data];\r\n            return yield psqlAPM.fnDbQuery('insSOPCarrierAlloc', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPCarrierAlloc(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"\";\r\n            param.data.map((row) => {\r\n                queryText += \"UPDATE waka.sop_carrier_allocations SET carrier_id=\" + row.carrier_id + \",contract_number='\" + row.contract_number + \"',allocation_percent=\" + row.allocation_percent + \",modified_by=\" + param.userId + \",modified_on=now() WHERE sca_id = \" + row.sca_id + \";\";\r\n            });\r\n            return yield psqlAPM.fnDbQuery('updSOPCarrierAlloc', queryText, []);\r\n        });\r\n    }\r\n    removeSOPCarrierAlloc(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM waka.sop_carrier_allocations WHERE sca_id IN (\";\r\n            param.removedIds.map((id, ix) => {\r\n                if (ix != 0)\r\n                    queryText += \",\";\r\n                queryText += id;\r\n            });\r\n            queryText += \")\";\r\n            return yield psqlAPM.fnDbQuery('removeSOPCarrierAlloc', queryText, []);\r\n        });\r\n    }\r\n    delSOPCarrierAllocForPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM waka.sop_carrier_allocations WHERE sop_id = $1 AND origin_port_id = $2 AND dest_port_id = $3\";\r\n            let queryParam = [param.sop_id, param.origin_port_id, param.dest_port_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPCarrierAllocForPort', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCarrierPref(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sca.scp_id, sca.sop_id, sca.origin_port_id, sca.dest_port_id, sca.carrier_id, sca.contract_number, sca.preference, sca.remarks, p.port_name||','||p.country as origin_port, dp.port_name||','||dp.country as dest_port,c.company_name as carrier_name, p.port_name||','||p.country ||' to '|| dp.port_name||','||dp.country as origin_dest_port FROM waka.sop_carrier_preference sca JOIN waka.port p on p.port_id = sca.origin_port_id JOIN waka.port dp ON dp.port_id=sca.dest_port_id JOIN waka.company c ON c.company_id = sca.carrier_id WHERE sca.sop_id = $1 ORDER BY sca.preference;\";\r\n            const queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCarrierPref', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCarrierPrefByPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT c.company_id as carrier_id, c.company_name as carrier_name, scp.scp_id, scp.sop_id, scp.origin_port_id, scp.dest_port_id, scp.contract_number, scp.preference, scp.remarks, p.port_name||','||p.country as origin_port, dp.port_name||','||dp.country as dest_port FROM waka.company c LEFT JOIN waka.sop_carrier_preference scp ON c.company_id = scp.carrier_id AND scp.sop_id = $1 AND scp.origin_port_id = $2 AND scp.dest_port_id = $3 LEFT JOIN waka.port p on p.port_id = scp.origin_port_id LEFT JOIN waka.port dp ON dp.port_id=scp.dest_port_id WHERE c.company_type_id IN (SELECT lookup_name_id FROM waka.lookup_name WHERE lookup_name IN ('Carrier', 'Freight Forwarder'));\";\r\n            const queryParam = [param.sop_id, param.origin_port_id, param.dest_port_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCarrierPrefByPort', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPCarrierPref(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.sop_carrier_preference (created_by,sop_id, origin_port_id, dest_port_id, carrier_id, contract_number,preference) SELECT $1, * FROM jsonb_to_recordset($2) as x(sop_id int, origin_port_id int, dest_port_id int, carrier_id int, contract_number varchar, preference smallint)\";\r\n            let queryParam = [param.userId, param.data];\r\n            return yield psqlAPM.fnDbQuery('insSOPCarrierPref', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPCarrierPref(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"\";\r\n            param.data.map((row) => {\r\n                queryText += \"UPDATE waka.sop_carrier_preference SET carrier_id=\" + row.carrier_id + \",contract_number='\" + row.contract_number + \"',preference=\" + row.preference + \",modified_by=\" + param.userId + \",modified_on=now() WHERE scp_id = \" + row.scp_id + \";\";\r\n            });\r\n            return yield psqlAPM.fnDbQuery('updSOPCarrierPref', queryText, []);\r\n        });\r\n    }\r\n    removeSOPCarrierPref(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM waka.sop_carrier_preference WHERE scp_id IN (\";\r\n            param.removedIds.map((id, ix) => {\r\n                if (ix != 0)\r\n                    queryText += \",\";\r\n                queryText += id;\r\n            });\r\n            queryText += \")\";\r\n            return yield psqlAPM.fnDbQuery('removeSOPCarrierPref', queryText, []);\r\n        });\r\n    }\r\n    delSOPCarrierPrefForPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"DELETE FROM waka.sop_carrier_preference WHERE sop_id = $1 AND origin_port_id = $2 AND dest_port_id = $3\";\r\n            let queryParam = [param.sop_id, param.origin_port_id, param.dest_port_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPCarrierPrefForPort', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPPOBooking(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"Insert INTO waka.sop_pob (sop_id, pob_id, fields, created_by) SELECT $1, pob_id, fields, $2 FROM waka.po_booking\";\r\n            const queryParam = [param.sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insSOPPOBooking', queryText, queryParam);\r\n        });\r\n    }\r\n    insPOBookingDetails(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.po_booking_details (sop_id, created_by) VALUES ($1,$2);\";\r\n            const queryParam = [param.sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insPOBookingDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPLandingCost(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"Insert INTO waka.sop_lc (sop_id, lc_id, fields, created_by) SELECT $1, lc_id, fields, $2 FROM waka.landing_cost\";\r\n            const queryParam = [param.sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insSOPPOBooking', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPCarrier(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"Insert INTO waka.sop_carrier (sop_id, carrier_id, fields, created_by) SELECT $1, carrier_id, fields, $2 FROM waka.carrier\";\r\n            const queryParam = [param.sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insSOPCarrier', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPSchInvoice(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"Insert INTO waka.sop_sch_inv (sop_id, sci_id, fields, created_by) SELECT $1, sci_id, fields, $2 FROM waka.service_charges_inv\";\r\n            const queryParam = [param.sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insSOPSchInvoice', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPDocs(param, idx) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"Insert INTO waka.sop_document (sop_id, doc_id, sop_port_id, fields, is_selected, created_by) SELECT $1, doc_id, $2, fields, is_selected, $3 FROM waka.documents\";\r\n            const queryParam = [param.sop_id, param.sop_port_ids[idx], param.userId];\r\n            return yield psqlAPM.fnDbQuery('insSOPDocs', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPPOBForGroup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sop_pob_id, spob.sop_id,COALESCE(spob.pob_id, pob.pob_id) as pob_id, pob.pob_seq, pob.sub_grp_seq, pob.sub_grp, pob.pob_name, pob.control_name, pob.has_child, pob.view_text, COALESCE(spob.fields, pob.fields) as fields,pob.ui_img_file_name, COALESCE(spob.is_selected, false) is_selected FROM waka.po_booking as pob LEFT JOIN waka.sop_pob as spob ON spob.pob_id = pob.pob_id AND spob.sop_id = $2 WHERE NOT pob.is_deleted AND pob.grp=$1 ORDER BY 4,5\";\r\n            let queryParam = [param.grp, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPPOBForGroup', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPDocForGroup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sd_id, spoc.sop_id,COALESCE(spoc.doc_id, doc.doc_id) as doc_id, doc.doc_seq, doc.sub_grp_seq, doc.sub_grp, doc.doc_name, doc.control_name, doc.has_child, doc.view_text, COALESCE(spoc.fields, doc.fields) as fields,doc.ui_img_file_name, spoc.is_selected FROM waka.documents as doc LEFT JOIN waka.sop_document as spoc ON spoc.doc_id = doc.doc_id AND spoc.sop_id = $2 WHERE NOT doc.is_deleted AND doc.grp_seq = $1 AND spoc.sop_port_id = $3 ORDER BY 4,5\";\r\n            let queryParam = [param.grp_seq, param.sop_id, param.sop_port_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPDocForGroup', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPLCForGroup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sop_lc_id, slc.sop_id, COALESCE(slc.lc_id, lc.lc_id) as lc_id, lc.lc_seq, lc.sub_grp_seq, lc.sub_grp, lc.lc_name, lc.control_name, lc.has_child, lc.view_text, COALESCE(slc.fields, lc.fields) as fields, lc.ui_img_file_name, false as expand FROM waka.landing_cost as lc LEFT JOIN waka.sop_lc as slc ON slc.lc_id = lc.lc_id AND slc.sop_id = $1 WHERE NOT lc.is_deleted ORDER BY 4,5;\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPLCForGroup', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCarrierForGroup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sop_carrier_id, sca.sop_id, COALESCE(sca.carrier_id, car.carrier_id) as carrier, car.carrier_seq, car.sub_grp_seq, car.sub_grp, car.carrier_name, car.control_name, car.has_child, car.view_text, COALESCE(sca.fields, car.fields) as fields, car.ui_img_file_name, sca.is_selected, false as expand FROM waka.carrier as car LEFT JOIN waka.sop_carrier as sca ON sca.carrier_id = car.carrier_id AND sca.sop_id = $1 WHERE NOT car.is_deleted ORDER BY 4,5;\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCarrierForGroup', queryText, queryParam);\r\n        });\r\n    }\r\n    getSopPortCountryWiseList(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT origin_country, dest_country, true as is_completed, 6 as docs_count, array_agg(sop_port_id ORDER BY sop_port_id) as sop_port_ids, false as is_selected from waka.vw_sop_port where sop_id = $1 group by 1,2;\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSopPortCountryWiseList', queryText, queryParam);\r\n        });\r\n    }\r\n    getDocGrp(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \" SELECT distinct grp_seq, grp, html_template FROM waka.documents WHERE NOT is_deleted ORDER BY 1;\";\r\n            return yield psqlAPM.fnDbQuery('getDocGrp', queryText, []);\r\n        });\r\n    }\r\n    getSOPSchInvForGroup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ssi_id, ssi.sop_id, COALESCE(ssi.sci_id, sci.sci_id) as sci_id, sci.invoice_seq, sci.sub_grp_seq, sci.sub_grp, sci.invoice_name, sci.control_name, sci.has_child, sci.view_text, COALESCE(ssi.fields, sci.fields) as fields, sci.ui_img_file_name, false as expand FROM waka.service_charges_inv as sci LEFT JOIN waka.sop_sch_inv as ssi ON ssi.sci_id = sci.sci_id AND ssi.sop_id = $1 WHERE NOT sci.is_deleted ORDER BY 4,5;\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPSchInvForGroup', queryText, queryParam);\r\n        });\r\n    }\r\n    checkSOPInPOB(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT distinct sop_id FROM waka.sop_pob WHERE sop_id = $1\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('checkSOPInPOB', queryText, queryParam);\r\n        });\r\n    }\r\n    checkSOPInLC(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT distinct sop_id FROM waka.sop_lc WHERE sop_id = $1\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('checkSOPInPOB', queryText, queryParam);\r\n        });\r\n    }\r\n    checkSOPInCarrier(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT distinct sop_id FROM waka.sop_carrier WHERE sop_id = $1 AND sop_port_id IS NULL\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('checkSOPInCarrier', queryText, queryParam);\r\n        });\r\n    }\r\n    checkSOPInSchInvoice(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT distinct sop_id FROM waka.sop_sch_inv WHERE sop_id = $1;\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('checkSOPInSchInvoice', queryText, queryParam);\r\n        });\r\n    }\r\n    checkSOPDoc(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT distinct sop_id FROM waka.sop_sch_inv WHERE sop_id = $1 AND sop_port_id = $2\";\r\n            let queryParam = [param.sop_id, param.sop_port_id];\r\n            return yield psqlAPM.fnDbQuery('checkSOPDoc', queryText, queryParam);\r\n        });\r\n    }\r\n    checkSOPInDoc(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT distinct sop_id FROM waka.sop_document WHERE sop_id = $1 AND sop_port_id = $2\";\r\n            let queryParam = [param.sop_id, param.sop_port_ids[0]];\r\n            return yield psqlAPM.fnDbQuery('checkSOPInDoc', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPPOBIsSelected(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_pob SET is_selected = $1, modified_on = now(), modified_by=$3 WHERE sop_pob_id = $2 RETURNING fields\";\r\n            let queryParam = [param.is_selected, param.sop_pob_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPPOBIsSelected', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPPOBfields(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_pob SET fields = $1, modified_on = now(), modified_by = $3 WHERE sop_pob_id = $2 RETURNING fields\";\r\n            let queryParam = [param.fields, param.sop_pob_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPPOBfields', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPPOBGenerateDate(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.po_booking_details SET generate_date = $1 WHERE sop_id = $2\";\r\n            let queryParam = [param.generate_date, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('updSOPPOBGenerateDate', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPLCfields(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_lc SET fields = $1, modified_on = now(), modified_by = $3 WHERE sop_lc_id = $2\";\r\n            let queryParam = [param.fields, param.sop_lc_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPLCfields', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPCarrierfields(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_carrier SET fields = $1, modified_on = now(), modified_by = $3 WHERE sop_carrier_id = $2\";\r\n            let queryParam = [param.fields, param.sop_carrier_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPCarrierfields', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPSchInvfields(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_sch_inv SET fields = $1, modified_on = now(), modified_by = $3 WHERE ssi_id = $2\";\r\n            let queryParam = [param.fields, param.ssi_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPSchInvfields', queryText, queryParam);\r\n        });\r\n    }\r\n    copySOPCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO sop_company (sop_id, company_id, created_by) SELECT \" + param.to_sop_id + \", company_id, \" + param.userId + \" FROM sop_company where sop_id = \" + param.from_sop_id + \";\";\r\n            // const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPCompany', queryText, []);\r\n        });\r\n    }\r\n    ;\r\n    copySOPContact(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO sop_contacts(sop_id,contact_id, remainder_alerts, escalation_alerts, created_by) SELECT \" + param.to_sop_id + \", contact_id, remainder_alerts, escalation_alerts, \" + param.userId + \" FROM sop_contacts WHERE sop_id = \" + param.from_sop_id + \";\";\r\n            // const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPContact', queryText, []);\r\n        });\r\n    }\r\n    copySOPContactPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO sop_contacts_port (sop_contact_id, origin_port_id, created_by) SELECT a.sop_contact_id, b.origin_port_id,$3 FROM sop_contacts_port b JOIN (select sop_contact_id, contact_id from sop_contacts where sop_id = $1) as c ON c.sop_contact_id = b.sop_contact_id JOIN (select sop_contact_id, contact_id from sop_contacts where sop_id = $2) a on a.contact_id = c.contact_id;\";\r\n            const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPContactPort', queryText, queryParam);\r\n        });\r\n    }\r\n    copySOPDocs(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_document WHERE sop_id = \" + param.to_sop_id + \";INSERT INTO sop_document (created_by,sop_id, origin_country_id,destination_country_id,doc_id,fields) SELECT \" + param.userId + \", \" + param.to_sop_id + \", origin_country_id,destination_country_id,doc_id,fields FROM sop_document WHERE sop_id = \" + param.from_sop_id + \";\";\r\n            // const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPDocs', queryText, []);\r\n        });\r\n    }\r\n    updDocFieldValue(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_document SET fields = $1, modified_on = now(), modified_by = $3 WHERE sd_id = $2\";\r\n            let queryParam = [param.fields, param.sd_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updDocFieldValue', queryText, queryParam);\r\n        });\r\n    }\r\n    updDocisSelected(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_document SET is_selected = $1, modified_on = now(), modified_by = $3 WHERE sd_id = $2\";\r\n            let queryParam = [param.is_selected, param.sd_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updDocisSelected', queryText, queryParam);\r\n        });\r\n    }\r\n    updCarrierisSelected(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_carrier SET is_selected = $1, modified_on = now(), modified_by = $3 WHERE sop_carrier_id = $2\";\r\n            let queryParam = [param.is_selected, param.sop_carrier_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updCarrierisSelected', queryText, queryParam);\r\n        });\r\n    }\r\n    copySOPPOBooking(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_pob WHERE sop_id = \" + param.to_sop_id + \";Insert INTO sop_pob (sop_id, pob_id, fields, created_by) SELECT \" + param.to_sop_id + \", pob_id, fields, \" + param.userId + \" FROM sop_pob WHERE sop_id = \" + param.from_sop_id + \";\";\r\n            // const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPPOBooking', queryText, []);\r\n        });\r\n    }\r\n    copySOPCargoHandling(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_ch WHERE sop_id = \" + param.to_sop_id + \";Insert INTO sop_ch (sop_id, ch_id, fields, created_by) SELECT \" + param.to_sop_id + \", ch_id, fields,\" + param.userId + \" FROM sop_ch WHERE sop_id = \" + param.from_sop_id + \";\";\r\n            // const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPCargoHandling', queryText, []);\r\n        });\r\n    }\r\n    copySOPContainer(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_container WHERE sop_id = \" + param.to_sop_id + \";INSERT INTO sop_container (created_by,sop_id, container_id, min_cbm,optimal_cbm,max_cbm,preference,fcl_min,port_id_exception) SELECT \" + param.userId + \",\" + param.to_sop_id + \", container_id, min_cbm,optimal_cbm,max_cbm,preference,fcl_min,port_id_exception FROM sop_container WHERE sop_id = \" + param.from_sop_id + \";\";\r\n            // const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPContainer', queryText, []);\r\n        });\r\n    }\r\n    copySOPCarrierAlloc(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_carrier_allocations WHERE sop_id = \" + param.to_sop_id + \";INSERT INTO sop_carrier_allocations (created_by,sop_id, origin_port_id, dest_port_id, carrier_id, contract_number,allocation_percent) SELECT \" + param.userId + \",\" + param.to_sop_id + \",origin_port_id, dest_port_id, carrier_id, contract_number,allocation_percent FROM sop_carrier_allocations WHERE sop_id = \" + param.from_sop_id + \";\";\r\n            // const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPCarrierAlloc', queryText, []);\r\n        });\r\n    }\r\n    copySOPCarrierPref(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM sop_carrier_preference WHERE sop_id = \" + param.to_sop_id + \";INSERT INTO sop_carrier_preference (created_by,sop_id, origin_port_id, dest_port_id, carrier_id, contract_number,preference) SELECT \" + param.userId + \",\" + param.to_sop_id + \", origin_port_id, dest_port_id, carrier_id, contract_number,preference FROM sop_carrier_preference WHERE sop_id = \" + param.from_sop_id + \";\";\r\n            // const queryParam = [param.from_sop_id, param.to_sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('copySOPCarrierPref', queryText, []);\r\n        });\r\n    }\r\n    // async delSOP(param:any){\r\n    //     const queryText = \"DELETE FROM waka.sop_carrier_preference WHERE sop_id = \"+param.sop_id+\"; DELETE FROM sop_carrier_allocations WHERE sop_id = \"+param.sop_id+\";DELETE FROM sop_container WHERE sop_id = \"+param.sop_id+\"; DELETE FROM sop_ch WHERE sop_id = \"+param.sop_id+\"; DELETE FROM sop_pob WHERE sop_id = \"+param.sop_id+\"; DELETE FROM sop_document WHERE sop_id = \"+param.sop_id+\"; DELETE FROM sop_contacts_port WHERE sop_contact_id IN (SELECT sop_contact_id FROM sop_contacts WHERE sop_id = \"+param.sop_id+\");  DELETE FROM sop_contacts WHERE sop_id = \"+param.sop_id+\"; DELETE FROM sop_company WHERE sop_id = \"+param.sop_id+\"; DELETE FROM sop WHERE sop_id = \"+param.sop_id+\";\";\r\n    //     // const queryParam = [param.sop_id]\r\n    //     return await psqlAPM.fnDbQuery('delSOP', queryText, []);\r\n    // }\r\n    delSOP(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.sop WHERE sop_id = $1;\";\r\n            const queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('delSOP', queryText, queryParam);\r\n        });\r\n    }\r\n    delSOPCountry(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.sop_country WHERE sop_id = $1 AND origin_dest = $2\";\r\n            const queryParam = [param.sop_id, param.origin_dest];\r\n            return yield psqlAPM.fnDbQuery('delSOPCountry', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPCountry(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_country (sop_id, origin_dest, created_by, country_id) SELECT $1, $2, $3, UNNEST(ARRAY[\" + param.countryIds + \"])\";\r\n            const queryParam = [param.sop_id, param.origin_dest, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insSOPCountry', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCountries(sop_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sc.origin_dest, sc.country_id as country_code_id, c.name as country_name FROM waka.sop_country sc JOIN waka.country c ON c.country_id = sc.country_id WHERE sop_id = $1\";\r\n            const queryParam = [sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCountries', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPServices(sop_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ss.sop_id,s.service_type_id, ln.lookup_name as service_type, COALESCE(ss.service_id,s.service_id) as service_id, COALESCE(ss.service_name,s.service_name) as service_name, CASE WHEN ss.sop_id is NULL THEN false ELSE true END is_selected, s.parent_service_id, s.is_mandatory FROM waka.services s JOIN waka.lookup_name ln ON ln.lookup_name_id = s.service_type_id LEFT JOIN waka.sop_services ss ON ss.service_id = s.service_id AND ss.sop_id = $1 ORDER BY s.service_type_id, s.service_id\";\r\n            const queryParam = [sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPServices', queryText, queryParam);\r\n        });\r\n    }\r\n    delSOPServices(sop_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.sop_services WHERE sop_id = $1\";\r\n            const queryParam = [sop_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPServices', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPServices(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_services (created_by,sop_id,service_name,service_id) SELECT $1, * FROM jsonb_to_recordset($2) as x(sop_id INT, service_name VARCHAR, service_id INT) ON CONFLICT ON CONSTRAINT sop_services_sop_id_unq_name_service_id_key DO NOTHING\";\r\n            const queryParam = [param.userId, JSON.stringify(param.sopServiceColl)];\r\n            return yield psqlAPM.fnDbQuery('insSOPServices', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    delSOPDoc(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.sop_document WHERE sop_id = $1 AND origin_country_id = $2 AND destination_country_id = $3\";\r\n            const queryParam = [param.sop_id, param.origin_country_id, param.destination_country_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPDoc', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCommunication(sop_id, instruction_type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sopc.sop_communication_id, sopc.sop_id, sopc.communication_id, sopc.instruction, sopc.instruction_type, sopc.created_by, sopc.created_on, sopc.modified_by, sopc.modified_on, sopc.is_selected, (SELECT case when c.communication_id is null then false else true end as is_admin_ins) FROM waka.sop_communication sopc LEFT JOIN waka.communication c ON sopc.communication_id = c.communication_id WHERE sop_id = $1 AND sopc.instruction_type = $2 ORDER BY sopc.instruction ASC\";\r\n            const queryParam = [sop_id, instruction_type];\r\n            return yield psqlAPM.fnDbQuery('getSOPCommunication', queryText, queryParam);\r\n        });\r\n    }\r\n    insShipmentTrackingIns(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_shipment_tracking_services (instruction, is_selected, sop_id, created_by) VALUES ($1,$2,$3,$4);\";\r\n            const queryParam = [param.instruction, param.is_selected, param.sop_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('getSOPShipmentTracking', queryText, queryParam);\r\n        });\r\n    }\r\n    updShipmentTrackingIns(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.sop_shipment_tracking_services SET is_selected = $1 WHERE sop_id = $2 AND sop_sts_id = $3\";\r\n            const queryParam = [param.is_selected, param.sop_id, param.sop_sts_id];\r\n            return yield psqlAPM.fnDbQuery('updShipmentTrackingIns', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPCommunication(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_communication (sop_id, communication_id, instruction,created_by, instruction_type, is_selected) VALUES ($1,$2,$3,$4,$5,$6) returning sop_communication_id\";\r\n            const queryParam = [param.sop_id, param.communication_id, param.instruction, param.userId, param.instruction_type, param.is_selected];\r\n            return yield psqlAPM.fnDbQuery('insSOPCommunication', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPCommunication(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.sop_communication SET instruction = $1, modified_on = now(), modified_by = $2 WHERE sop_communication_id = $3\";\r\n            const queryParam = [param.instruction, param.userId, param.sop_communication_id];\r\n            return yield psqlAPM.fnDbQuery('updSOPCommunication', queryText, queryParam);\r\n        });\r\n    }\r\n    delSOPCommunication(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.sop_communication WHERE sop_communication_id = $1\";\r\n            const queryParam = [param.sop_communication_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPCommunication', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCommunicationForPrint(sop_id, instruction_type) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT sc.sop_communication_id, sc.sop_id, sc.instruction FROM waka.sop_communication sc WHERE sop_id = $1 AND instruction_type = $2 ORDER BY 1\";\r\n            const queryParam = [sop_id, instruction_type];\r\n            return yield psqlAPM.fnDbQuery('getSOPCommunicationForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPStakeholdersForPrint(sop_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ss.stakeholder_id, c.company_name, ss.type_id, ln.lookup_name as company_type, con.valid_from, con.valid_to, con.contract_no, con.contract_id, co.name as country_name, c.country_id, lu.full_name as contact_name, lu.mobile, lu.email FROM waka.sop_stakeholder ss JOIN waka.company c ON ss.stakeholder_id = c.company_id JOIN waka.lookup_name ln ON ss.type_id = ln.lookup_name_id JOIN waka.contract con ON con.contract_id = ss.contract_id JOIN waka.country co ON co.country_id = c.country_id JOIN waka.login_user lu ON c.created_by = lu.user_id WHERE ss.sop_id = $1 order by 1;\";\r\n            const queryParam = [sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPStakeholdersForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPPOBForGroupForPrint(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sop_pob_id, spob.sop_id, spob.pob_id, pob.pob_seq, pob.sub_grp_seq, pob.sub_grp, pob.pob_name, pob.control_name, pob.has_child, pob.view_text, spob.fields,pob.ui_img_file_name,spob.is_selected FROM waka.po_booking as pob JOIN waka.sop_pob as spob ON spob.pob_id = pob.pob_id AND spob.sop_id = $2 WHERE NOT pob.is_deleted AND pob.grp=$1 ORDER BY 4,5\";\r\n            let queryParam = [param.grp, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPPOBForGroupForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCHForGroupForPrint(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sop_ch_id, sch.sop_id, sch.ch_id, ch.ch_seq, ch.sub_grp_seq, ch.sub_grp, ch.ch_name, ch.control_name, ch.has_child, ch.view_text, sch.fields,ch.ui_img_file_name,sch.is_selected FROM waka.cargo_handling as ch JOIN waka.sop_ch as sch ON sch.ch_id = ch.ch_id AND sch.sop_id = $2 WHERE NOT ch.is_deleted AND ch.grp=$1 ORDER BY 4,5\";\r\n            let queryParam = [param.grp, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCHForGroupForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPDOCForGroupForPrint(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sd_id, sdoc.sop_port_id, sdoc.sop_id, sdoc.doc_id, doc.doc_seq, doc.sub_grp_seq, doc.sub_grp, doc.doc_name, doc.control_name, doc.has_child, doc.view_text, sdoc.fields,doc.ui_img_file_name, sdoc.is_selected FROM waka.documents as doc JOIN waka.sop_document as sdoc ON sdoc.doc_id = doc.doc_id AND sdoc.sop_id = $2 JOIN waka.vw_sop_port sp ON sdoc.sop_port_id = sp.sop_port_id WHERE NOT doc.is_deleted AND doc.grp=$1 ORDER BY 4,5\";\r\n            let queryParam = [param.grp, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPPOBForGroupForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCRForGroupForPrint(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sop_carrier_id, sc.sop_id, sc.carrier_id, c.carrier_seq, c.sub_grp_seq, c.sub_grp, c.carrier_name, c.control_name, c.has_child, c.view_text, sc.fields,c.ui_img_file_name,sc.is_selected FROM waka.carrier as c JOIN waka.sop_carrier as sc ON sc.carrier_id = c.carrier_id AND sc.sop_id = $2 WHERE NOT c.is_deleted AND c.grp = $1 ORDER BY 4,5\";\r\n            let queryParam = [param.grp, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPPOBForGroupForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getContactsEmailForPrint(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT email FROM waka.contact_invite WHERE contact_invite_id = $1;\";\r\n            let queryParam = [param.contact_invite_id];\r\n            return yield psqlAPM.fnDbQuery('getContactsEmailForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getContracts(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `SELECT c.*, com.company_name AS sh_name, com_p.company_name AS p_name, l.lookup_name AS sh_type, (SELECT case when a.event_id is null then false else true end as is_extend_validity FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = ${param.userId} AND (company_id = c.principal_id OR company_id = c.stakeholder_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'EXTEND_VALIDITY' LIMIT 1)) as a), (SELECT case when a.event_id is null then false else true end as is_download_document FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id = ${param.userId} AND (company_id = c.principal_id OR company_id = c.stakeholder_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'DOWNLOAD_DOCUMENT' LIMIT 1)) as a) FROM waka.contract c JOIN waka.company com ON c.stakeholder_id = com.company_id JOIN waka.company com_p ON c.principal_id = com_p.company_id JOIN waka.lookup_name l ON l.lookup_name_id = c.stakeholder_type_id WHERE c.principal_id IN (${param.accessible_companies}) OR c.stakeholder_id IN (${param.accessible_companies});`;\r\n            return yield psqlAPM.fnDbQuery('getContracts', queryText, []);\r\n        });\r\n    }\r\n    insContract(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.contract (principal_id, stakeholder_id, stakeholder_type_id, valid_from, valid_to, contract_no, created_by) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING contract_id\";\r\n            const queryParam = [param.principal_id, param.stakeholder_id, param.stakeholder_type_id, param.valid_from, param.valid_to, param.contract_no, param.user_id];\r\n            return yield psqlAPM.fnDbQuery('insContract', queryText, queryParam);\r\n        });\r\n    }\r\n    updateContract(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.contract set principal_id = $1, stakeholder_id = $2, stakeholder_type_id = $3, valid_from = $4, valid_to = $5, contract_no = $6 where contract_id = $7;\";\r\n            const queryParam = [param.principal_id, param.stakeholder_id, param.stakeholder_type_id, param.valid_from, param.valid_to, param.contract_no, param.contract_id];\r\n            return yield psqlAPM.fnDbQuery('updateContract', queryText, queryParam);\r\n        });\r\n    }\r\n    validateContract(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT * FROM waka.contract WHERE lower(REGEXP_REPLACE(contract_no,'\\\\s+', '', 'g')) =  $1;\";\r\n            return yield psqlAPM.fnDbQuery('validateContract', queryText, [param.contract_no]);\r\n        });\r\n    }\r\n    updContractFileName(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.contract SET uploaded_files = $1 WHERE contract_id = $2\";\r\n            const queryParam = [param.uploadedFileNames, param.contract_id];\r\n            return yield psqlAPM.fnDbQuery('uptContractFileName', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPServiceChargeItemByGroup(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ssc.sop_service_charge_id, ssc.sop_id, ln.lookup_type_id as service_charge_id, ln.lookup_name_id as charge_item_id, ln.display_name as charge_item_name,ssc.charge_description, ssc.currency_id, ssc.uom, ssc.unit_rate, ssc.sop_port_id, false edit FROM waka.lookup_name as ln LEFT JOIN waka.sop_service_charges as ssc ON ssc.charge_item_id = ln.lookup_name_id AND ssc.sop_id = $1 AND ssc.sop_port_id = $3 WHERE ln.lookup_type_id = $2\";\r\n            let queryParam = [param.sop_id, param.service_charge_id, param.sop_port_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPServiceChargeItemByGroup', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPServiceChargeItemByPortPair(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ssc.sop_service_charge_id, ssc.sop_id, ln.lookup_type_id as service_charge_id, ln.lookup_name_id as charge_item_id, ln.display_name as charge_item_name,ssc.charge_description, ssc.currency_id, ssc.uom, ssc.unit_rate, ssc.sop_port_id, false edit FROM waka.lookup_name as ln LEFT JOIN waka.sop_service_charges as ssc ON ssc.charge_item_id = ln.lookup_name_id AND ssc.sop_id = $1 AND ssc.sop_port_id = $3 WHERE ln.lookup_type_id = $2\";\r\n            let queryParam = [param.sop_id, param.service_charge_id, param.sop_port_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPServiceChargeItemByGroup', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPServiceChargeSummary(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT vsp.sop_id, vsp.sop_port_id, vsp.origin_port_id, vsp.origin_port, vsp.origin_country, vsp.dest_port_id, vsp.dest_port, vsp.dest_country, count(sop_service_charge_id) charge_items FROM waka.vw_sop_port vsp LEFT JOIN waka.sop_service_charges ssc ON ssc.sop_port_id = vsp.sop_port_id AND ssc.service_charge_id = $2 WHERE vsp.sop_id = $1  GROUP BY 1,2,3,4,5,6,7,8 ORDER BY 5,4,7,6\";\r\n            const queryParam = [param.sop_id, param.service_charge_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPServiceChargeSummary', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPServiceCharge(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_service_charges (sop_id, service_charge_id, charge_item_id, charge_description,sop_port_id, currency_id, uom, unit_rate, created_by) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) returning sop_service_charge_id\";\r\n            const queryParam = [param.sop_id, param.service_charge_id, param.charge_item_id, param.charge_description, param.sop_port_id, param.currency_id, param.uom, param.unit_rate, param.created_by];\r\n            return yield psqlAPM.fnDbQuery('insSOPServiceCharge', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPServiceCharge(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.sop_service_charges SET charge_description = $1, currency_id = $2, uom = $3, unit_rate = $4, modified_by = $5, modified_on = now() WHERE sop_service_charge_id = $6\";\r\n            const queryParam = [param.charge_description, param.currency_id, param.uom, param.unit_rate, param.created_by, param.sop_service_charge_id];\r\n            return yield psqlAPM.fnDbQuery('updSOPServiceCharge', queryText, queryParam);\r\n        });\r\n    }\r\n    delSOPServiceCharge(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.sop_service_charges WHERE sop_service_charge_id = $1\";\r\n            const queryParam = [param.sop_service_charge_id];\r\n            return yield psqlAPM.fnDbQuery('delSOPServiceCharge', queryText, queryParam);\r\n        });\r\n    }\r\n    delContract(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.contract WHERE contract_id = $1\";\r\n            const queryParam = [param.contract_id];\r\n            return yield psqlAPM.fnDbQuery('delContract', queryText, queryParam);\r\n        });\r\n    }\r\n    insContractExtendData(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.contract_files (contract_id, valid_from, valid_to, contract_no, uploaded_files, created_by) SELECT contract_id, valid_from, valid_to, contract_no, uploaded_files, created_by FROM waka.contract c WHERE c.contract_id = $1 RETURNING c_f_id\";\r\n            const queryParam = [param.contract_id];\r\n            return yield psqlAPM.fnDbQuery('delContract', queryText, queryParam);\r\n        });\r\n    }\r\n    updExtendContractData(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.contract SET valid_from = $1, valid_to = $2, uploaded_files = $3 WHERE contract_id = $4\";\r\n            const queryParam = [param.valid_from, param.valid_to, param.uploadedFileNames, param.contract_id];\r\n            return yield psqlAPM.fnDbQuery('uptContractFileName', queryText, queryParam);\r\n        });\r\n    }\r\n    delSOPPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.sop_port WHERE sop_port_id = $1\";\r\n            const queryText2 = \"SELECT COUNT(origin_port_id)::int FROM waka.sop_port WHERE sop_id = $1 AND origin_port_id = $2\";\r\n            const queryText3 = \"DELETE FROM waka.sop_orgin_port_details WHERE origin_port_id = $2 AND sop_id = $1\";\r\n            const queryParam = [param.sop_port_id];\r\n            let delSOPPort = yield psqlAPM.fnDbQuery('delSOPPort', queryText, queryParam);\r\n            let OriginPortCount = yield psqlAPM.fnDbQuery('CountCheck', queryText2, [param.sop_id, param.origin_port_id]);\r\n            if (OriginPortCount.rows[0].count == 0) {\r\n                yield psqlAPM.fnDbQuery('delOriginPortDetails', queryText3, [param.sop_id, param.origin_port_id]);\r\n            }\r\n            return delSOPPort;\r\n        });\r\n    }\r\n    ;\r\n    addSOPSHPort(param, origin_port_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_port (sop_id, principal_id, ff_id, origin_port_id, created_by,created_on, dest_port_id) SELECT $1, $2, $3, $4, $5, now(), UNNEST(ARRAY[\" + param.destPortIds + \"])\";\r\n            const queryText2 = \"INSERT INTO waka.sop_orgin_port_details (port_name, sop_id, origin_port_id, created_by, created_on) SELECT port_name, $1, $2, $3, now() FROM waka.port p WHERE p.port_id = $2 ON CONFLICT ON CONSTRAINT sop_orgin_port_details_sop_id_origin_port_id_key DO NOTHING\";\r\n            const queryParam = [param.sop_id, param.principal_id, param.ff_id, origin_port_id, param.userId];\r\n            const queryParam2 = [param.sop_id, origin_port_id, param.userId];\r\n            yield psqlAPM.fnDbQuery('addSOPOrginPortDetails', queryText2, queryParam2);\r\n            return yield psqlAPM.fnDbQuery('addSOPSHPort', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getSopPortFreeStorageDetails(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.reqType == 'Print') {\r\n                queryText = \"SELECT port_name AS origin_port, COALESCE(free_storage_days, 0) || ' Days' AS number_of_free_storage_days, ln.display_name AS validity_for_free_storage_days FROM waka.sop_orgin_port_details sopd JOIN waka.lookup_name ln ON ln.lookup_name_id = sopd.free_storage_days_validity WHERE sop_id = $1; \";\r\n            }\r\n            else {\r\n                queryText = \"SELECT * FROM waka.sop_orgin_port_details WHERE sop_id = $1\";\r\n            }\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSopPortFreeStorageDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    addSopPortFreeStorageValidity(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_orgin_port_details SET free_storage_days_validity = $1 WHERE sop_opd_id = $2 AND sop_id = $3\";\r\n            let queryParam = [param.free_storage_days_validity, param.sop_opd_id, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('addSopPortFreeStorageValidity', queryText, queryParam);\r\n        });\r\n    }\r\n    addSopPortFreeStorageDays(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_orgin_port_details SET free_storage_days = $1 WHERE sop_opd_id = $2 AND sop_id = $3\";\r\n            let queryParam = [param.free_storage_days, param.sop_opd_id, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('addSopPortFreeStorageDays', queryText, queryParam);\r\n        });\r\n    }\r\n    getSopPortList(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sp.*, po.port_name as origin_port, pd.port_name as dest_port, po.country_id as origin_country_id, co.name as origin_country_name, pd.country_id as dest_country_id, cd.name as dest_country_name FROM waka.sop_port sp JOIN waka.port po ON sp.origin_port_id = po.port_id JOIN waka.port pd ON sp.dest_port_id = pd.port_id JOIN waka.country co on co.country_id = po.country_id JOIN waka.country cd on cd.country_id = pd.country_id WHERE sp.sop_id = $1 ORDER BY po.port_name ASC\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSopPortList', queryText, queryParam);\r\n        });\r\n    }\r\n    getSopContainerWeightForPrint(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"select iso_size_code as container_size, cs.max_cbm, cs.max_weight_kgs, sc.preference from waka.sop_container sc join waka.container_sizes cs on cs.container_id = sc.container_id where sop_id = $1 ORDER BY 4\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSopContainerWeightForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getCurrentContractByCompanyId(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT principal_id,stakeholder_id, valid_from, valid_to, contract_no, contract_id FROM waka.contract WHERE principal_id = $1 AND stakeholder_id = $2 AND stakeholder_type_id = $3;\";\r\n            let queryParam = [param.pp_id, param.stakeholder_id, param.stakeholder_type_id];\r\n            return yield psqlAPM.fnDbQuery('getCurrentContractByCompanyId', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPStakeholderList(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //let queryText = \"SELECT ss.sop_stakeholder_id, ci.invitee_company_id company_id, ci.invitee_company_name company_name, ci.invitee_contact_name as name , ci.invitee_email as email, ci.invitee_company_type_id as company_type_id, lu.mobile, ln.lookup_name as company_type, ss.contract_id, c.country_id, con.name as country_name FROM waka.company_invite ci JOIN waka.lookup_name ln ON ci.invitee_company_type_id = ln.lookup_name_id JOIN waka.login_user lu ON ci.invitee_email = lu.email JOIN waka.company c ON c.company_id = ci.invitee_company_id JOIN waka.country con ON con.country_id = c.country_id LEFT JOIN waka.sop_stakeholder ss ON ci.invitee_company_id = ss.stakeholder_id AND ss.sop_id = $2 WHERE invited_company_id = $1;\"\r\n            let queryText = \"SELECT ss.sop_stakeholder_id, a.stakeholder_id AS company_id, c.company_name, lu.full_name as name, lu.email, a.company_type_id, lu.mobile, ln.lookup_name as company_type, ss.contract_id, c.country_id, co.name as country_name FROM ( SELECT COALESCE(ci.invited_company_id, principal_id) AS principal_id, COALESCE(ci.invitee_company_id, stakeholder_id) AS stakeholder_id, COALESCE(ci.invitee_company_type_id, stakeholder_type_id) AS company_type_id from waka.company_invite ci FULL JOIN waka.contract con ON ci.invitee_company_id = con.stakeholder_id AND ci.invited_company_id = con.principal_id WHERE (principal_id = $1 OR invited_company_id = $1) GROUP BY 1,2,3) a JOIN waka.lookup_name ln ON a.company_type_id = ln.lookup_name_id JOIN waka.company c ON c.company_id = a.stakeholder_id JOIN waka.login_user lu ON c.created_by = lu.user_id JOIN waka.country co ON co.country_id = c.country_id LEFT JOIN waka.sop_stakeholder ss ON a.stakeholder_id = ss.stakeholder_id AND ss.sop_id = $2\";\r\n            let queryParam = [param.principal_id, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPStakeholderList', queryText, queryParam);\r\n        });\r\n    }\r\n    getFFListForAddSOP(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ci.invitee_company_id company_id, ci.invitee_company_name company_name, ci.invitee_company_type_id as company_type_id, ci.is_accepted , ln.lookup_name as company_type FROM waka.company_invite ci JOIN waka.lookup_name ln ON ci.invitee_company_type_id = ln.lookup_name_id WHERE invited_company_id = $1 AND ln.lookup_name = 'Logistics Provider/Freight Forwarder'\";\r\n            let queryParam = [param.principal_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPFreightForwarder', queryText, queryParam);\r\n        });\r\n    }\r\n    insNewSOPStakeholders(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.sop_stakeholder (sop_id, stakeholder_id,type_id,country_id,contract_id,created_by) SELECT * FROM jsonb_to_recordset($1) as x(sop_id int, stakeholder_id int, type_id int, country_id int, contract_id int, created_by int) ON CONFLICT ON CONSTRAINT sop_stakeholder_sop_id_stakeholder_id_type_id_key DO NOTHING\";\r\n            let queryParam = [JSON.stringify(param.stakeholders)];\r\n            return yield psqlAPM.fnDbQuery('insNewSOPStakeholders', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPStakeholders(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.sop_stakeholder SET contract_id = $1, modified_by = $3, modified_on = now() WHERE sop_stakeholder_id = $2\";\r\n            let queryParam = [param.contract_id, param.sop_stakeholder_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updSOPStakeholders', queryText, queryParam);\r\n        });\r\n    }\r\n    getSopPortCount(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT count(sop_port_id) FROM waka.sop_port sp WHERE sp.sop_id=$1\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSopPortCount', queryText, queryParam);\r\n        });\r\n    }\r\n    updContractFiles(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.contract SET uploaded_files = $1 WHERE contract_id = $2\";\r\n            const queryParam = [param.uploadedFileNames, param.contract_id];\r\n            return yield psqlAPM.fnDbQuery('updContractFiles', queryText, queryParam);\r\n        });\r\n    }\r\n    insSOPServicesOnSOPCreation(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_services (created_by,sop_id,service_name,service_id) SELECT $1, $2, service_name, service_id FROM waka.services WHERE is_mandatory ON CONFLICT ON CONSTRAINT sop_services_sop_id_unq_name_service_id_key DO NOTHING\";\r\n            const queryParam = [param.userId, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('insSOPServicesOnSOPCreation', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getSOPConsigneeContacts(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ci.contact_invite_id, s.principal_id, c.company_id, c.company_name, c.country_id, ci.contact_name, ci.email, ci.mobile, con.name AS country_name FROM waka.sop s JOIN waka.company c ON s.principal_id = c.company_id OR s.principal_id = c.parent_company_id JOIN waka.contact_invite ci ON ci.company_id = c.company_id LEFT JOIN waka.country con ON con.country_id = c.country_id WHERE s.sop_id = $1 AND ci.is_accepted = TRUE AND ci.is_revoked = false\";\r\n            const queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPConsigneeContacts', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    getSOPFFContacts(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ci.contact_invite_id, s.ff_id, c.company_id, c.company_name, c.country_id, ci.contact_name, ci.email, ci.mobile, con.name AS country_name FROM waka.sop s JOIN waka.company c ON s.ff_id = c.company_id OR s.ff_id = c.parent_company_id JOIN waka.contact_invite ci ON ci.company_id = c.company_id LEFT JOIN waka.country con ON con.country_id = c.country_id WHERE s.sop_id = $1 AND ci.is_accepted = TRUE AND ci.is_revoked = false\";\r\n            const queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPConsigneeContacts', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    insSOPCarrierAllocation(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.sop_carrier_allocation (sop_id, sop_port_id, effective_start_date, effective_end_date, allocated_by, carrier, allocation_type, allocation_interval, unit_of_allocation, service_type, allocation_value, carrier_preference, created_by, created_on) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, NOW())\";\r\n            const queryParam = [param.sop_id, param.sop_port_id, param.effective_start_date, param.effective_end_date, param.allocated_by, param.carrier, param.allocation_type, param.allocation_interval, param.unit_of_allocation, param.service_type, JSON.stringify(param.allocation_value), param.carrier_preference, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insSOPCarrierAllocation', queryText, queryParam);\r\n        });\r\n    }\r\n    updCAFieldValue(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.sop_carrier_allocation SET allocation_value = $1 WHERE sop_id = $2 AND sop_port_id = $3;\";\r\n            const queryParam = [JSON.stringify(param.allocation_value), param.sop_id, param.sop_port_id];\r\n            return yield psqlAPM.fnDbQuery('updCAFieldValue', queryText, queryParam);\r\n        });\r\n    }\r\n    updSOPCarrierAllocation(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.sop_carrier_allocation SET effective_start_date = $1, effective_end_date = $2, allocated_by = $3, carrier = $4 , allocation_type = $5, allocation_interval = $6, unit_of_allocation = $7, service_type = $8, allocation_value = $9, carrier_preference = $13, created_by = $12 WHERE sop_id = $10 AND sop_port_id = $11;\";\r\n            const queryParam = [param.effective_start_date, param.effective_end_date, param.allocated_by, param.carrier, param.allocation_type, param.allocation_interval, param.unit_of_allocation, param.service_type, JSON.stringify(param.allocation_value), param.sop_id, param.sop_port_id, param.userId, param.carrier_preference];\r\n            return yield psqlAPM.fnDbQuery('updSOPCarrierAllocation', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCarrierList(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            //const queryText = \"select contract_id,stakeholder_id,stakeholder_type_id,c.company_name  from waka.contract con JOIN waka.company c ON c.company_id = con.stakeholder_id where principal_id = $1 AND stakeholder_id NOT IN (select invitee_company_id FROM waka.company_invite where invited_company_id = $1)\";\r\n            const queryText = \" select con.contract_id,con.contract_no,con.stakeholder_id,con.stakeholder_type_id,c.company_name,valid_from,valid_to from waka.contract con JOIN waka.company c ON c.company_id = con.stakeholder_id JOIN waka.sop_stakeholder ss ON ss.stakeholder_id = con.stakeholder_id AND ss.contract_id = con.contract_id where principal_id = $1 AND ss.sop_id = $2 AND con.stakeholder_id NOT IN (select invitee_company_id FROM waka.company_invite where invited_company_id = $1)\";\r\n            const queryParam = [param.principal_id, param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCarrierList', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCarrierForSOPPrint(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select con.contract_id, con.stakeholder_id, 'value_'||con.stakeholder_id as allocation_value_id, c.company_name, con.contract_no, (select allocation_value FROM waka.sop_carrier_allocation where sop_port_id = $3), (select unit_of_allocation FROM waka.sop_carrier_allocation where sop_port_id = $3) from waka.contract con JOIN waka.company c ON c.company_id = con.stakeholder_id JOIN waka.sop_stakeholder ss ON ss.stakeholder_id = con.stakeholder_id AND ss.contract_id = con.contract_id where principal_id = $1 AND ss.sop_id = $2 AND con.stakeholder_id IN (select unnest(carrier) FROM waka.sop_carrier_allocation where sop_port_id = $3)\";\r\n            const queryParam = [param.principal_id, param.sop_id, param.sop_port_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCarrierForSOPPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPCarrierAllocation(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * from waka.sop_carrier_allocation WHERE sop_id = $1 AND sop_port_id = $2\";\r\n            const queryParam = [param.sop_id, param.sop_port_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPCarrierAllocation', queryText, queryParam);\r\n        });\r\n    }\r\n    getAllocationIntervals() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select * from waka.carrier_allocation_interval\";\r\n            return yield psqlAPM.fnDbQuery('getAllocationIntervals', queryText, []);\r\n        });\r\n    }\r\n    saveCarrierPreference(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.sop_carrier_allocation SET carrier_preference = $2 WHERE sop_ca_id = $1\";\r\n            const queryParam = [param.sop_ca_id, param.carrier_preference];\r\n            return yield psqlAPM.fnDbQuery('saveCarrierPreference', queryText, queryParam);\r\n        });\r\n    }\r\n    getSOPSCHINVForGroupForPrint(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT ssi_id, ssi.sop_id, sci.invoice_seq, sci.sub_grp_seq, sci.sub_grp, sci.invoice_name, sci.control_name, sci.has_child, sci.view_text, ssi.fields , sci.ui_img_file_name, false as expand FROM waka.service_charges_inv as sci LEFT JOIN waka.sop_sch_inv as ssi ON ssi.sci_id = sci.sci_id AND ssi.sop_id = $1 WHERE NOT sci.is_deleted ORDER BY 4,5;\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getSOPPOBForGroupForPrint', queryText, queryParam);\r\n        });\r\n    }\r\n    getShipmentTrackingIns(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT sts.sop_sts_id, sts.instruction, sts.is_selected FROM waka.sop_shipment_tracking_services sts WHERE sts.sop_id = $1\";\r\n            let queryParam = [param.sop_id];\r\n            return yield psqlAPM.fnDbQuery('getShipmentTrackingIns', queryText, queryParam);\r\n        });\r\n    }\r\n    getEventsSubModulesWise(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT jsonb_agg(DISTINCT jsonb_build_object ('event_name',event_name,'status',true)) as event_names, jsonb_agg(DISTINCT jsonb_build_object ('event_description',event_description,'status',true)) as event_descriptions, jsonb_agg(DISTINCT jsonb_build_object ('section_name',section_name,'status',true)) as section_names FROM waka.event_master WHERE em_id IN (SELECT event_id FROM waka.role_module_event_mapping WHERE rmm_id IN (SELECT rmm_id FROM waka.role_module_mapping_new WHERE role_id IN (SELECT role_id FROM waka.role_user_mapping WHERE company_id = $1) AND sub_module_id IN (SELECT sub_module_id FROM waka.sub_modules_list WHERE sub_module_name = $2)));\";\r\n            let queryParam = [param.company_id, param.sub_module_name];\r\n            return yield psqlAPM.fnDbQuery('getEventsSubModulesWise', queryText, queryParam);\r\n        });\r\n    }\r\n    copyDataforServiceCharges(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let insertCount = 0;\r\n            for (let copyto in param.copy_to_portpairs) {\r\n                let queryText = `INSERT INTO waka.sop_service_charges (sop_id, service_charge_id, charge_item_id, charge_description, sop_port_id, currency_id, unit_rate, created_by, created_on, uom) SELECT sop_id, service_charge_id, charge_item_id, charge_description, ${param.copy_to_portpairs[copyto]}, currency_id, unit_rate, ${param.userId}, NOW(), uom FROM waka.sop_service_charges WHERE service_charge_id = ${param.service_charge_id} AND sop_port_id = ${param.sop_port_id} AND sop_id = ${param.sop_id};`;\r\n                let insert = yield psqlAPM.fnDbQuery(`copyDataforServiceCharges + ${param.copy_to_portpairs[copyto]}`, queryText, []);\r\n                if (insert.rowCount > 0) {\r\n                    insertCount += 1;\r\n                }\r\n                else {\r\n                    return yield psqlAPM.fnDbQuery('copyDataforServiceCharges', queryText, []);\r\n                }\r\n            }\r\n            ;\r\n            if (insertCount == param.copy_to_portpairs.length) {\r\n                return { success: true, rowCount: insertCount, rows: [] };\r\n            }\r\n        });\r\n    }\r\n    delSOPServiceChargesbyPort(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `DELETE FROM waka.sop_service_charges WHERE sop_service_charge_id IN (SELECT sop_service_charge_id FROM waka.sop_service_charges WHERE sop_id = ${param.sop_id} AND sop_port_id IN (${param.copy_to_portpairs}) AND service_charge_id = ${param.service_charge_id})`;\r\n            return yield psqlAPM.fnDbQuery('delSOPServiceChargesbyPort', queryText, []);\r\n        });\r\n    }\r\n    checkCreateCommIns(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `SELECT COUNT(*) as comm_ins_count FROM waka.sop_communication WHERE sop_id = $1 AND instruction_type = $2;`;\r\n            let queryParam = [param.sop_id, param.instruction_type];\r\n            return yield psqlAPM.fnDbQuery('checkCreateCommIns', queryText, queryParam);\r\n        });\r\n    }\r\n    createSOPCommuniation(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `INSERT INTO waka.sop_communication (sop_id, communication_id, instruction, instruction_type, created_by) SELECT ${param.sop_id}, communication_id, instruction, instruction_type, ${param.userId} FROM waka.communication WHERE instruction_type = $1`;\r\n            let queryParam = [param.instruction_type];\r\n            return yield psqlAPM.fnDbQuery('createSOPCommuniation', queryText, queryParam);\r\n        });\r\n    }\r\n    addremoveCommunicationIns(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `UPDATE waka.sop_communication SET is_selected = $2, modified_on = NOW(), modified_by = $3 WHERE sop_communication_id = $1`;\r\n            let queryParam = [param.sop_communication_id, param.is_selected, param.userId];\r\n            return yield psqlAPM.fnDbQuery('addremoveCommunicationIns', queryText, queryParam);\r\n        });\r\n    }\r\n}\r\nexports.SOPModel = SOPModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/sopModel.ts?");

/***/ }),

/***/ "./src/models/userModel.ts":
/*!*********************************!*\
  !*** ./src/models/userModel.ts ***!
  \*********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.UserModel = void 0;\r\nconst psqlAPM = __webpack_require__(/*! ./psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nclass UserModel {\r\n    constructor() { }\r\n    ;\r\n    login(email) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT lu.user_id, lu.salt, lu.hash_password AS password, lu.email, lu.full_name, lu.mobile, lu.is_admin, lu.wechat_id, lu.active_flag, (SELECT count(*) FROM waka.company c JOIN waka.company_license cl ON cl.company_id = c.company_id AND cl.is_approved WHERE owned_by=lu.user_id) as company_admin_cnt, (SELECT count(*) FROM waka.user_company WHERE user_id = lu.user_id) as invited_company_cnt FROM waka.login_user as lu WHERE lower(lu.email) = lower($1) AND NOT lu.is_deleted\";\r\n            const queryParam = [email];\r\n            return yield psqlAPM.fnDbQuery('login', queryText, queryParam);\r\n        });\r\n    }\r\n    ;\r\n    addLoginHistory(email, ipAddress, message, status, token) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let query = \"INSERT INTO waka.login_history(email, ip_address, status, remarks, session_id) VALUES ($1, $2, $3, $4, $5);\";\r\n            let qryParam = [email, ipAddress, status, message, token];\r\n            return yield psqlAPM.fnDbQuery('loginHistory', query, qryParam);\r\n        });\r\n    }\r\n    logout(token) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.login_history SET logout_at = now(), remarks = $1 WHERE session_id= $2\";\r\n            const queryParam = [\"Successfully Logged Out\", token];\r\n            return yield psqlAPM.fnDbQuery('logoutUser', queryText, queryParam);\r\n        });\r\n    }\r\n    getUserAllRole(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ur.u_r_id, ur.role_id, r.role_name, r.module_id, m.module_name, m.permission, m.ui_screen FROM user_role as ur JOIN role as r ON r.role_id = ur.role_id JOIN modules as m JOIN r.module_id = m.module_id WHERE ur.user_id = $1\";\r\n            const queryParam = [param.userId];\r\n            return yield psqlAPM.fnDbQuery('getUserAllRole', queryText, queryParam);\r\n        });\r\n    }\r\n    getUserRoleForModule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT ur.u_r_id, ur.company_id, ln.lookup_name as company_type, c.company_name, ur.role_id, r.role_name, r.module_id, m.module_name, m.permission, m.ui_screen FROM user_role as ur JOIN role as r ON r.role_id = ur.role_id JOIN modules as m JOIN r.module_id = m.module_id JOIN company c ON c.company_id = ur.company_id JOIN lookup_name ln on ln.lookup_name_id = c.company_type_id WHERE ur.user_id = $1 AND m.module_name = $2\";\r\n            const queryParam = [param.userId, param.module_name];\r\n            return yield psqlAPM.fnDbQuery('getUserRoleForModule', queryText, queryParam);\r\n        });\r\n    }\r\n    getUserStat() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT (SELECT count(user_id) FROM login_user where is_active) as active, (SELECT count(user_id) FROM login_user WHERE is_deleted) as deleted,(SELECT count(user_id) FROM login_user WHERE is_admin OR is_company_admin) as admin\";\r\n            return yield psqlAPM.fnDbQuery('getUserStat', queryText, []);\r\n        });\r\n    }\r\n    getUserStatForCompAdmin(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT (SELECT count(user_id) FROM login_user WHERE user_id IN (SELECT DISTINCT user_id FROM user_company WHERE company_id IN (SELECT company_id FROM user_company WHERE user_id = $1)) AND is_active) as active, (SELECT count(user_id) FROM login_user WHERE user_id IN (SELECT DISTINCT user_id FROM user_company WHERE company_id IN (SELECT company_id FROM user_company WHERE user_id = $1)) AND is_deleted) as deleted,(SELECT count(user_id) FROM login_user WHERE user_id IN (SELECT DISTINCT user_id FROM user_company WHERE company_id IN (SELECT company_id FROM user_company WHERE user_id = $1) AND is_admin)) as admin\";\r\n            let queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getUserStat', queryText, queryParam);\r\n        });\r\n    }\r\n    getRoleStatForAdmin() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT count(role_id) FROM role WHERE company_id IN (1)\";\r\n            return yield psqlAPM.fnDbQuery('getRoleStatForAdmin', queryText, []);\r\n        });\r\n    }\r\n    addPageAccessView(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.page_access (user_id, email, name, url, page_name, start_time, end_time, duration_ms, ip_address, created_by) SELECT user_id, email, name, url, page_name, start_time, end_time, duration_ms, ip_address, 1 FROM json_populate_recordset(NULL::waka.page_access,'\" + JSON.stringify(param) + \"')\";\r\n            return yield psqlAPM.fnDbQuery('addPageAccessView', queryText, []);\r\n        });\r\n    }\r\n    getRoleStatForCompAdmin(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            let companies = \"\";\r\n            let compArr = param.compArr;\r\n            if (compArr.length > 0) {\r\n                compArr.map((id, ix) => {\r\n                    if (ix != 0)\r\n                        companies += \",\";\r\n                    companies += id;\r\n                });\r\n                queryText = \"SELECT count(role_id) FROM role WHERE company_id IN (1,\" + companies + \")\";\r\n                return yield psqlAPM.fnDbQuery('getRoleStatForCompAdmin', queryText, []);\r\n            }\r\n            else {\r\n                queryText = \"SELECT count(role_id) FROM role where company_id IN (1)\";\r\n                return yield psqlAPM.fnDbQuery('getRoleStatForCompAdmin', queryText, []);\r\n            }\r\n        });\r\n    }\r\n    getAllUsers() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT user_id, email, mobile_country, mobile, full_name, is_active, is_deleted, created_on FROM waka.login_user\";\r\n            return yield psqlAPM.fnDbQuery('getAllUsers', queryText, []);\r\n        });\r\n    }\r\n    checkUsrEmailExists(email) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT user_id, email, active_flag FROM waka.login_user WHERE email=TRIM($1)\";\r\n            let queryParam = [email];\r\n            return yield psqlAPM.fnDbQuery('checkUsrEmailExists', queryText, queryParam);\r\n        });\r\n    }\r\n    userMailValidation(user_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT user_id, email, active_flag FROM waka.login_user WHERE user_id=$1\";\r\n            let queryParam = [user_id];\r\n            return yield psqlAPM.fnDbQuery('userMailValidation', queryText, queryParam);\r\n        });\r\n    }\r\n    UpdMailVerifiedOn(user_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.login_user SET active_flag = true, email_verified_on = now() WHERE user_id=$1\";\r\n            let queryParam = [user_id];\r\n            return yield psqlAPM.fnDbQuery('UpdMailVerifiedOn', queryText, queryParam);\r\n        });\r\n    }\r\n    registerUser(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText, queryParam;\r\n            if (param.isInvite) {\r\n                queryText = \"UPDATE waka.login_user SET full_name = $1, hash_password = $2, invite_accepted_on = now(), salt = $4 WHERE email = $3\";\r\n                queryParam = [param.full_name, param.hash_password, param.email, param.salt];\r\n            }\r\n            else {\r\n                queryText = \"INSERT INTO waka.login_user(email, full_name, hash_password, created_by, is_active, is_deleted, created_on, salt) VALUES ($1,$2, $3, 1, true, false, now(), $4) returning user_id\";\r\n                queryParam = [param.email, param.full_name, param.hash_password, param.salt];\r\n            }\r\n            return yield psqlAPM.fnDbQuery('registerUser', queryText, queryParam);\r\n        });\r\n    }\r\n    getInviteUser(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT email, full_name, is_invite_user, invite_accepted_on FROM waka.login_user WHERE user_id = $1\";\r\n            const queryParam = [param.invite_user_id];\r\n            return yield psqlAPM.fnDbQuery('getInviteUser', queryText, queryParam);\r\n        });\r\n    }\r\n    updUser(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE login_user SET email = $1, full_name = $2, mobile_country = $3, mobile = $4, modified_by = $5, modified_on = now() WHERE user_id = $6\";\r\n            const queryParam = [param.email, param.full_name, param.mobile_country, param.mobile, param.userId, param.user_id];\r\n            return yield psqlAPM.fnDbQuery('updUser', queryText, queryParam);\r\n        });\r\n    }\r\n    activateUsr(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE login_user SET is_active = $1, modified_by= $3, modified_on = now() WHERE user_id = $2\";\r\n            const queryParam = [param.is_active, param.user_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('activateUsr', queryText, queryParam);\r\n        });\r\n    }\r\n    delUsr(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE login_user SET is_deleted = $1, modified_by= $3, modified_on = now() WHERE user_id = $2\";\r\n            const queryParam = [param.is_deleted, param.user_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('delUser', queryText, queryParam);\r\n        });\r\n    }\r\n    getUserCompany(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT c.company_id, c.company_name, c.company_short_name, c.company_type_id, ln.lookup_name as company_type, c.address, ci.name as city, st.name as state, co.name as country, c.zip_code, CASE WHEN uc.user_id is NULL THEN false ELSE true END is_selected, COALESCE(uc.is_admin,false) is_admin FROM waka.company c JOIN waka.lookup_name ln ON ln.lookup_name_id = c.company_type_id JOIN waka.country co on co.id=c.country_id JOIN state st on st.id = c.state_id LEFT JOIN city ci on ci.id=c.city_id LEFT JOIN user_company uc ON uc.company_id = c.company_id AND uc.user_id = $1 WHERE c.company_type_id IN (SELECT distinct company_type_id FROM user_company where user_id = $1)\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getUserCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    delAllUsrCompanyForUser(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM user_company WHERE user_id=$1\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('delAllUsrCompanyForUser', queryText, queryParam);\r\n        });\r\n    }\r\n    addUsrCompanyForUser(userId, insData) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO user_company (created_by, user_id, company_id, company_type_id, is_admin) SELECT $1, * FROM jsonb_to_recordset($2) as x(user_id int, company_id int, company_type_id int, is_admin boolean)\";\r\n            const queryParam = [userId, insData];\r\n            return yield psqlAPM.fnDbQuery('addUsrCompanyForUser', queryText, queryParam);\r\n        });\r\n    }\r\n    getUsersForCompAdmin(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT user_id, email, mobile_country, mobile, full_name, is_active, is_deleted, created_on, (SELECT DISTINCT company_type_id FROM waka.user_company WHERE user_id = $1 LIMIT 1) as company_type_id FROM waka.login_user WHERE user_id IN (SELECT DISTINCT user_id FROM user_company WHERE company_id IN (SELECT company_id FROM waka.user_company WHERE user_id = $1))\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getUsersForCompAdmin', queryText, queryParam);\r\n        });\r\n    }\r\n    insUsrCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO user_company (user_id, company_id, company_type_id, created_by) VALUES ($1, $2, $3, $4)\";\r\n            const queryParam = [param.user_id, param.company_id, param.company_type_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insUsrCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getAdminRoles_old(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT r.role_name, r.role_id, r.company_id, c.company_name, rmm.rmm_id, rmm.module_id, rmm.sub_module_id, m.module_name, sm.sub_module_name, rmm.create_role, rmm.view_role, rmm.update_role, rmm.delete_role  FROM waka.roles as r JOIN waka.role_module_mapping rmm on r.role_id = rmm.role_id LEFT JOIN waka.modules as m ON rmm.module_id = m.module_id LEFT JOIN waka.sub_modules sm ON sm.sub_module_id = rmm.sub_module_id LEFT JOIN waka.company c ON c.company_id = r.company_id where r.created_by = $1\";\r\n            return yield psqlAPM.fnDbQuery('getAdminRoles', queryText, [param.userId]);\r\n        });\r\n    }\r\n    getAdminRoles(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT rm.role_name, rm.role_id, c.company_name, jsonb_agg(DISTINCT jsonb_build_object('module_name',ml.module_name,'module_id',ml.module_id)) as modules, jsonb_agg(jsonb_build_object('sub_module_name',sml.sub_module_name,'sub_module_id',sml.sub_module_id))as sub_modules,json_agg(rmm.rmm_id) as rmm_ids FROM waka.roles_master rm JOIN waka.company c ON c.company_id = rm.company_id JOIN waka.role_module_mapping_new rmm ON rmm.role_id = rm.role_id JOIN waka.modules_list ml ON rmm.module_id = ml.module_id JOIN waka.sub_modules_list sml ON rmm.sub_module_id = sml.sub_module_id WHERE rm.created_by IN ($1) GROUP BY rm.role_name,rm.role_id, c.company_name;\";\r\n            return yield psqlAPM.fnDbQuery('getAdminRoles', queryText, [param.userId]);\r\n        });\r\n    }\r\n    getRoles_old(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (param.company_id != undefined) {\r\n                let queryText = \"SELECT r.role_name, r.role_id, r.company_id, c.company_name, rmm.rmm_id, rmm.module_id, rmm.sub_module_id, m.module_name, sm.sub_module_name, rmm.create_role, rmm.view_role, rmm.update_role, rmm.delete_role FROM waka.roles as r LEFT JOIN waka.role_module_mapping rmm on r.role_id = rmm.role_id JOIN waka.modules as m ON rmm.module_id = m.module_id LEFT JOIN waka.sub_modules sm ON sm.sub_module_id = rmm.sub_module_id LEFT JOIN waka.company c ON c.company_id = r.company_id where r.created_by = 1 or r.company_id in ($1,$2) or r.company_id in (SELECT invited_company_id FROM waka.company_invite WHERE invitee_company_id = $3 AND is_accepted = True)\";\r\n                return yield psqlAPM.fnDbQuery('getRoles', queryText, [param.company_id, param.parent_company_id, param.invitee_company_id]);\r\n            }\r\n            else {\r\n                let queryText = \"SELECT  r.role_name, r.role_id, r.company_id, c.company_name, rmm.rmm_id, rmm.module_id, rmm.sub_module_id, m.module_name, sm.sub_module_name, rmm.create_role, rmm.view_role, rmm.update_role, rmm.delete_role, (SELECT CASE WHEN created_by = 1 THEN true ELSE false END FROM waka.role_module_mapping where role_id = r.role_id limit 1) as is_admin_role FROM waka.roles as r JOIN waka.role_module_mapping rmm on r.role_id = rmm.role_id LEFT JOIN waka.modules as m ON rmm.module_id = m.module_id LEFT JOIN waka.sub_modules sm ON sm.sub_module_id = rmm.sub_module_id LEFT JOIN waka.company c ON c.company_id = r.company_id where r.created_by in (1,$1)\";\r\n                return yield psqlAPM.fnDbQuery('getRoles', queryText, [param.userId]);\r\n            }\r\n        });\r\n    }\r\n    getRoles(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (param.company_id != undefined) {\r\n                let queryText = \"SELECT r.role_name, r.role_id, r.company_id, c.company_name FROM waka.roles_master as r JOIN waka.company c ON c.company_id = r.company_id WHERE r.created_by = 1 OR r.company_id IN ($1,$2) or r.company_id IN (SELECT invited_company_id FROM waka.company_invite WHERE invitee_company_id = $3 AND is_accepted = True);\";\r\n                return yield psqlAPM.fnDbQuery('getRoles', queryText, [param.company_id, param.parent_company_id, param.invitee_company_id]);\r\n            }\r\n            else {\r\n                let queryText = \"SELECT r.role_name, r.role_id, r.company_id, c.company_name FROM waka.roles_master as r JOIN waka.company c ON c.company_id = r.company_id where r.created_by in (1,$1);\";\r\n                return yield psqlAPM.fnDbQuery('getRoles', queryText, [param.userId]);\r\n            }\r\n        });\r\n    }\r\n    getCompanyUnqRoleName(companyId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT distinct role_name FROM waka.roles WHERE company_id = $1\";\r\n            const queryParam = [companyId];\r\n            return yield psqlAPM.fnDbQuery('getCompanyUnqRoleName', queryText, queryParam);\r\n        });\r\n    }\r\n    getModulesAndRolesForCompany(module_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select m.module_name, sm.sub_module_name, sm.sub_module_id, mp.allowed_permission, sm.module_id from waka.modules m LEFT JOIN waka.sub_modules sm on m.module_id = sm.module_id LEFT JOIN waka.module_permissions mp on sm.sub_module_id = mp.sub_module_id where m.module_id = $1 order by sm.sub_module_name;\";\r\n            const queryParam = [module_id];\r\n            return yield psqlAPM.fnDbQuery('getModulesAndRolesForCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getRoleNameForCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"select role_id,role_name,company_id from waka.roles where company_id = $1\";\r\n            let queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getRoleNameForCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getExistingRoleDetails(role_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"select rmm.*,r.company_id,sm.sub_module_name from waka.role_module_mapping as rmm left join waka.roles as r on r.role_id = rmm.role_id left join waka.sub_modules as sm on rmm.sub_module_id = sm.sub_module_id where rmm.role_id = $1;\";\r\n            let queryParam = [role_id];\r\n            return yield psqlAPM.fnDbQuery('getExistingRoleDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    getLicenseCompanyForRoles(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.company_name, c.company_id, cl.cl_id, ln.lookup_name as office_category,( SELECT case when add.event_id is null then false else true end as is_add_role FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN ($1) AND (company_id = c.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'ADD_ROLE' LIMIT 1)) as add), (SELECT CASE WHEN c.owned_by = $1 then TRUE ELSE FALSE END as is_own_company) FROM waka.company c LEFT JOIN waka.company_license cl on cl.company_id = c.company_id LEFT JOIN waka.lookup_name ln on ln.lookup_name_id = c.office_category_id WHERE cl.is_approved = true and c.is_deleted = false AND c.created_by = $1 UNION SELECT c.company_name, c.company_id, cl.cl_id, ln.lookup_name as office_category,( SELECT case when add.event_id is null then false else true end as is_add_role FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN ($1) AND (company_id = c.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'ADD_ROLE' LIMIT 1)) as add), (SELECT CASE WHEN c.owned_by = $1 then TRUE ELSE FALSE END as is_own_company) FROM waka.company c LEFT JOIN waka.company_license cl on cl.company_id = c.company_id LEFT JOIN waka.lookup_name ln on ln.lookup_name_id = c.office_category_id  WHERE cl.is_approved = true and c.is_deleted = false AND c.owned_by IN (select DISTINCT created_by from waka.role_user_mapping WHERE assigned_user_id = $1) ORDER BY company_name ASC;\";\r\n            return yield psqlAPM.fnDbQuery('getCompany', queryText, [userId]);\r\n        });\r\n    }\r\n    getAdminCompanyForRoles(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT c.company_name, c.company_id, cl.cl_id, ln.lookup_name as office_category FROM waka.company c LEFT JOIN waka.company_license cl on cl.company_id = c.company_id LEFT JOIN waka.lookup_name ln on ln.lookup_name_id = c.office_category_id WHERE cl.is_approved = true and c.is_deleted = false and c.created_by = $1 ORDER BY c.company_name asc;\";\r\n            return yield psqlAPM.fnDbQuery('getCompany', queryText, [userId]);\r\n        });\r\n    }\r\n    validateRoleName(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT * FROM waka.roles WHERE lower(REGEXP_REPLACE(role_name,'\\\\s+', '', 'g')) = $1 AND company_id = $2\";\r\n            return yield psqlAPM.fnDbQuery('validateRoleName', queryText, [param.role_name, param.company_id]);\r\n        });\r\n    }\r\n    insRole(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.roles (company_id, role_name, created_by, created_on) VALUES ($1,$2,$3,now()) returning role_id\";\r\n            const queryParam = [param.company_id, param.role_name, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insRole', queryText, queryParam);\r\n        });\r\n    }\r\n    insRoleModuleMapping(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.role_module_mapping (role_id, created_by, created_on, module_id, sub_module_id, view_role, create_role, update_role, delete_role) SELECT \" + param.role_id + \", \" + param.userId + \", now() , * FROM jsonb_to_recordset('\" + JSON.stringify(param.permissions) + \"') as x(module_id int, sub_module_id int, view_role boolean, create_role boolean, update_role boolean, delete_role boolean);\";\r\n            return yield psqlAPM.fnDbQuery('insRoleModuleMapping', queryText, []);\r\n        });\r\n    }\r\n    updRole(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.roles set role_name = $1 where role_id = $2\";\r\n            const queryParam = [param.role_name, param.role_id];\r\n            return yield psqlAPM.fnDbQuery('updRole', queryText, queryParam);\r\n        });\r\n    }\r\n    getRolePermissionForExist(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select waka.role_module_mapping.*,waka.roles.company_id,waka.modules.module_name,waka.sub_modules.sub_module_name from waka.role_module_mapping left join waka.roles on waka.roles.role_id = waka.role_module_mapping.role_id left join waka.modules on waka.role_module_mapping.module_id = waka.modules.module_id left join waka.sub_modules on waka.sub_modules.sub_module_id= waka.role_module_mapping.sub_module_id where waka.role_module_mapping.role_id = $1 and waka.role_module_mapping.module_id=$2\";\r\n            const queryParam = [param.role_id, param.module_id];\r\n            return yield psqlAPM.fnDbQuery('getRolePermissionForExist', queryText, queryParam);\r\n        });\r\n    }\r\n    deleteRole(role_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.roles WHERE role_id  = $1\";\r\n            const queryParam = [role_id];\r\n            return yield psqlAPM.fnDbQuery('deleteRole', queryText, queryParam);\r\n        });\r\n    }\r\n    deleteRoleModuleMapping_old(rmm_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.role_module_mapping WHERE rmm_id  = $1\";\r\n            const queryParam = [rmm_id];\r\n            return yield psqlAPM.fnDbQuery('deleteRoleModuleMapping', queryText, queryParam);\r\n        });\r\n    }\r\n    deleteRoleModuleMapping(role_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.role_module_mapping_new WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id=$1)\";\r\n            const queryParam = [role_id];\r\n            return yield psqlAPM.fnDbQuery('deleteRoleModuleMapping', queryText, queryParam);\r\n        });\r\n    }\r\n    checkEmail(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText, queryParam;\r\n            if (param.user_id == undefined) {\r\n                queryText = \"SELECT * from waka.login_user WHERE lower(email) = lower($1) \";\r\n                queryParam = [param.email];\r\n            }\r\n            else {\r\n                queryText = \"SELECT * from waka.login_user WHERE lower(email) = lower($1) and user_id <> $2\";\r\n                queryParam = [param.email, param.user_id];\r\n            }\r\n            return yield psqlAPM.fnDbQuery('CheckEmail', queryText, queryParam);\r\n        });\r\n    }\r\n    checkEmailLinkVerified(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText, queryParam;\r\n            queryText = \"SELECT * from waka.login_user WHERE lower(email) = lower($1)\";\r\n            queryParam = [param.email];\r\n            return yield psqlAPM.fnDbQuery('checkEmailLinkVerified', queryText, queryParam);\r\n        });\r\n    }\r\n    insVerifyLink(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.verify_link (email, verify_type, verify_code, validated_on, created_on, is_valid) values ($1, $2, $3, now(), now(), false)\";\r\n            const queryParam = [param.email, param.type, param.verify_code];\r\n            return yield psqlAPM.fnDbQuery('insVerifyLink', queryText, queryParam);\r\n        });\r\n    }\r\n    updVerifyLink(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"Update waka.verify_link set verify_type = $2, verify_code = $3, modified_on = now(), is_valid = false WHERE email ilike $1\";\r\n            const queryParam = [param.email, param.type, param.verify_code];\r\n            return yield psqlAPM.fnDbQuery('updVerifyLink', queryText, queryParam);\r\n        });\r\n    }\r\n    checkVerifyLink(email) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select * from waka.verify_link where email = '$1' and created_on > current_timestamp - interval '3 hours\";\r\n            const queryParam = [email];\r\n            return yield psqlAPM.fnDbQuery('getOTP', queryText, queryParam);\r\n        });\r\n    }\r\n    getVerifyLinkDetails(email) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT verify_code, is_valid, CASE WHEN validated_on >= now() - interval '3 hours' THEN true ELSE false END AS is_valid_on FROM waka.verify_link WHERE email ilike $1 \";\r\n            const queryParam = [email];\r\n            return yield psqlAPM.fnDbQuery('getVerifyLinkDetails', queryText, queryParam);\r\n        });\r\n    }\r\n    validateOTP(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.verify_link SET validated_on = now(), is_valid = true WHERE email =$1 and verify_type =$2 and verify_code = $3\";\r\n            const queryParam = [param.email, param.type, param.otp];\r\n            return yield psqlAPM.fnDbQuery('validateOTP', queryText, queryParam);\r\n        });\r\n    }\r\n    changeForgottenPassword(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.login_user SET hash_password = $2, salt = $3 WHERE email =$1\";\r\n            const queryParam = [param.email, param.hash_password, param.salt];\r\n            return yield psqlAPM.fnDbQuery('changeForgottenPassword', queryText, queryParam);\r\n        });\r\n    }\r\n    changePassword(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.login_user SET hash_password = $2, salt = $3 WHERE user_id =$1\";\r\n            const queryParam = [param.userId, param.hash_password, param.salt];\r\n            return yield psqlAPM.fnDbQuery('changePassword', queryText, queryParam);\r\n        });\r\n    }\r\n    updateProfile(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // const queryText = \"UPDATE waka.login_user SET email = $1, full_name = $2, mobile = $3, wechat_id = $4 WHERE user_id = $5\";\r\n            // const queryText = \"WITH temp as (UPDATE waka.login_user SET email = $1, full_name = $2, mobile = $3, wechat_id = $4 WHERE user_id = $5 RETURNING user_id, email, full_name) UPDATE waka.contact_invite SET contact_name = t.full_name FROM temp t WHERE waka.contact_invite.invitee_user_id = $5;\";\r\n            const queryText = \"WITH temp as (UPDATE waka.login_user SET email = $1, full_name = $2, mobile = $3, wechat_id = $4 WHERE user_id = $5 RETURNING user_id, email, full_name) UPDATE waka.company_invite SET invitee_contact_name = t.full_name FROM temp t WHERE waka.company_invite.invitee_user_id = $5;\";\r\n            const queryParam = [param.email, param.user_name, param.mobile, param.wechat_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('updateProfile', queryText, queryParam);\r\n        });\r\n    }\r\n    fetchProfileInfo(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT full_name , mobile, wechat_id FROM waka.login_user WHERE user_id = $1;\";\r\n            const queryParam = [param.userId];\r\n            return yield psqlAPM.fnDbQuery('fetchProfileInfo', queryText, queryParam);\r\n        });\r\n    }\r\n    getSubModulesForSelModule(moduleId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT module_id,sub_module_id,sub_module_name,sub_module_description,module_id,icon FROM waka.sub_modules_list Where module_id = $1 AND is_visible = true AND is_admin_owned = false\";\r\n            const queryParam = [moduleId];\r\n            return yield psqlAPM.fnDbQuery('getSubModulesForSelModule', queryText, queryParam);\r\n        });\r\n    }\r\n    getEventsForSubModule(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select em_id,section_name,event_name,event_description from waka.event_master where module_id=$1 and sub_module_id= $2;\";\r\n            const queryParam = [param.module_id, param.sub_module_id];\r\n            return yield psqlAPM.fnDbQuery('getEventsForSubModule', queryText, queryParam);\r\n        });\r\n    }\r\n    getSectionNames(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"select distinct section_name from waka.event_master where module_id=$1 and sub_module_id= $2;\";\r\n            const queryParam = [param.module_id, param.sub_module_id];\r\n            return yield psqlAPM.fnDbQuery('getSectionNames', queryText, queryParam);\r\n        });\r\n    }\r\n    insUserRole(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.roles_master (role_name,company_id, created_by) VALUES ($1,$2,$3) returning role_id\";\r\n            const queryParam = [param.role_name, param.company_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insUserRole', queryText, queryParam);\r\n        });\r\n    }\r\n    // async insUserRoleModuleMapping(param: any){\r\n    //     let rmm_ids = [];\r\n    //     let queryText;\r\n    //     for (let submod of param.sub_module_ids){\r\n    //         queryText = `INSERT INTO waka.role_module_mapping_new (role_id, module_id, sub_module_id, created_by) VALUES (${param.role_id}, ${param.module_id}, ${submod}, ${param.userId}) returning rmm_id;`\r\n    //         let data = await psqlAPM.fnDbQuery('insUserRoleModuleMapping', queryText, []);\r\n    //         rmm_ids.push(data.rows[0].rmm_id)\r\n    //     }\r\n    //     return rmm_ids;\r\n    // }\r\n    insUserRoleModuleMapping(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.role_module_mapping_new (role_id,module_id,sub_module_id,created_by) VALUES \";\r\n            for (let idx in param.sub_module_ids) {\r\n                queryText += `(${param.role_id}, (SELECT module_id FROM waka.sub_modules_list WHERE sub_module_id = ${param.sub_module_ids[idx]} LIMIT 1), ${param.sub_module_ids[idx]},${param.userId})`;\r\n                if (parseInt(idx) < param.sub_module_ids.length - 1) {\r\n                    queryText += ',';\r\n                }\r\n            }\r\n            queryText += ';';\r\n            return yield psqlAPM.fnDbQuery('insUserRoleModuleMapping', queryText, []);\r\n        });\r\n    }\r\n    // async insUserRoleEventMapping(param: any){\r\n    //     let queryText;\r\n    //     for (let [i,rmm_id] of param.rmm_ids.entries()){\r\n    //         for (let event of param[param.sub_module_names[i]]){\r\n    //             queryText = `INSERT INTO waka.role_module_event_mapping (rmm_id, event_id, created_by) VALUES (${rmm_id}, ${event}, ${param.userId})`\r\n    //             await psqlAPM.fnDbQuery('insUserRoleModuleMapping', queryText, []);\r\n    //         }\r\n    //     }\r\n    // }\r\n    delUserRoleModuleMapping(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `DELETE FROM waka.role_module_event_mapping  WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE rmm.sub_module_id IN (SELECT em.sub_module_id FROM waka.role_module_mapping_new em WHERE rmm.role_id = ${param.role_id}))`;\r\n            return yield psqlAPM.fnDbQuery('insUserRoleEventMapping', queryText, []);\r\n        });\r\n    }\r\n    insUserRoleEventMapping(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"INSERT INTO waka.role_module_event_mapping (rmm_id,event_id,created_by) VALUES \";\r\n            for (let idx in param.event_ids) {\r\n                queryText += `((SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE rmm.sub_module_id IN (SELECT em.sub_module_id FROM waka.event_master em WHERE em_id = ${param.event_ids[idx]} AND rmm.role_id = ${param.role_id})),${param.event_ids[idx]},${param.userId})`;\r\n                if (parseInt(idx) < param.event_ids.length - 1) {\r\n                    queryText += ',';\r\n                }\r\n            }\r\n            queryText += ';';\r\n            return yield psqlAPM.fnDbQuery('insUserRoleEventMapping', queryText, []);\r\n        });\r\n    }\r\n    updUserEventMapping(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.role_user_mapping SET role_id =$1, event_ids = (SELECT array_agg(event_id) as event_ids FROM waka.role_module_event_mapping WHERE rmm_id IN (SELECT rmm_id from waka.role_module_mapping_new WHERE role_id = $1)), modified_by = $2, modified_on = NOW();\";\r\n            let queryParam = [param.role_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('insUserEventMapping', queryText, queryParam);\r\n        });\r\n    }\r\n    getRolesOfCompany(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT role_name, role_id from waka.roles_master WHERE company_id = $1;\";\r\n            const queryParam = [param.company_id];\r\n            return yield psqlAPM.fnDbQuery('getRolesOfCompany', queryText, queryParam);\r\n        });\r\n    }\r\n    getRoleModuleMapping(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT array_agg(sub_module_id) as sub_module_ids, array_agg(rmm_id)as rmm_ids from waka.role_module_mapping_new WHERE role_id = $1 AND module_id = $2 AND created_by = $3;\";\r\n            const queryParam = [param.role_id, param.module_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('getRoleModuleMapping', queryText, queryParam);\r\n        });\r\n    }\r\n    getEventsPermission(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText, event_ids = [];\r\n            for (let rmm_id of param.rmm_ids) {\r\n                queryText = `SELECT array_agg(event_id) as event_ids from waka.role_module_event_mapping WHERE rmm_id = ${rmm_id}`;\r\n                let data = yield psqlAPM.fnDbQuery('getEventsPermission', queryText, []);\r\n                event_ids.push(data.rows[0]);\r\n            }\r\n            return event_ids;\r\n        });\r\n    }\r\n    updUserRole(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            for (let [i, rmm_id] of param.rmm_ids.entries()) {\r\n                if (param[param.sub_module_names[i] + '_remove'] != undefined) {\r\n                    for (let event of param[param.sub_module_names[i] + '_remove']) {\r\n                        queryText = `DELETE FROM waka.role_module_event_mapping WHERE rmm_id = ${rmm_id} AND event_id = ${event};`;\r\n                        yield psqlAPM.fnDbQuery('updUserRole', queryText, []);\r\n                    }\r\n                }\r\n                if (param[param.sub_module_names[i] + '_update'] != undefined) {\r\n                    for (let event of param[param.sub_module_names[i] + '_update']) {\r\n                        queryText = `INSERT INTO waka.role_module_event_mapping (rmm_id, event_id, created_by) VALUES (${rmm_id}, ${event}, ${param.userId})`;\r\n                        yield psqlAPM.fnDbQuery('updUserRole', queryText, []);\r\n                    }\r\n                }\r\n            }\r\n            return { success: true, message: \"Updated\" };\r\n        });\r\n    }\r\n    getUserRoles(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT rm.role_name, c.company_name, ml.module_name, array_agg(sml.sub_module_name) as sub_module_names, ml.module_id, array_agg(sml.sub_module_id) as sub_module_ids FROM waka.roles_master rm JOIN waka.company c ON c.company_id = rm.company_id JOIN waka.role_module_mapping_new rmm ON rmm.role_id = rm.role_id JOIN waka.modules_list ml ON rmm.module_id = ml.module_id JOIN waka.sub_modules_list sml ON rmm.sub_module_id = sml.sub_module_id WHERE rm.created_by = $1 GROUP BY rm.role_name, ml.module_name, c.company_name, ml.module_id ;\";\r\n            const queryParam = [param.userId];\r\n            return yield psqlAPM.fnDbQuery('getUserRoles', queryText, queryParam);\r\n        });\r\n    }\r\n    getRolesForGrid(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // let queryText = `SELECT rm.role_name, rm.role_id, c.company_name,(SELECT CASE WHEN c.owned_by IN (${param.userId}) then TRUE ELSE FALSE END as is_own_company) , jsonb_agg(DISTINCT jsonb_build_object('module_name',ml.module_name,'module_id',ml.module_id)) as modules, jsonb_agg(jsonb_build_object('sub_module_name',sml.sub_module_name,'sub_module_id',sml.sub_module_id))as sub_modules ,(SELECT CASE WHEN created_by = 1 THEN true ELSE false END FROM waka.role_module_mapping_new where role_id = rm.role_id limit 1) as is_admin_role, ( SELECT case when view.event_id is null then false else true end as is_view FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN (${param.userId}) AND (company_id = rm.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'VIEW_ROLES' LIMIT 1)) as view), ( SELECT case when delete.event_id is null then false else true end as is_delete FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN (${param.userId}) AND (company_id = rm.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'DELETE_ROLE' LIMIT 1)) as delete) FROM waka.roles_master rm JOIN waka.company c ON c.company_id = rm.company_id JOIN waka.role_module_mapping_new rmm ON rmm.role_id = rm.role_id JOIN waka.modules_list ml ON rmm.module_id = ml.module_id JOIN waka.sub_modules_list sml ON rmm.sub_module_id = sml.sub_module_id WHERE rm.company_id IN (${param.company_ids}) OR rm.created_by = 1 GROUP BY rm.role_name,rm.role_id, c.company_name,is_admin_role,is_view, is_own_company;`;\r\n            let queryText = `SELECT rm.role_name, rm.role_id, c.company_name,(SELECT CASE WHEN c.owned_by IN (${param.userId}) then TRUE ELSE FALSE END as is_own_company), (SELECT CASE WHEN rm.created_by IN (${param.userId}) then TRUE ELSE FALSE END as is_own_role) , jsonb_agg(DISTINCT jsonb_build_object('module_name',ml.module_name,'module_id',ml.module_id)) as modules, jsonb_agg(jsonb_build_object('sub_module_name',sml.sub_module_name,'sub_module_id',sml.sub_module_id))as sub_modules ,(SELECT CASE WHEN created_by = 1 THEN true ELSE false END FROM waka.role_module_mapping_new where role_id = rm.role_id limit 1) as is_admin_role, ( SELECT case when view.event_id is null then false else true end as is_view FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN (${param.userId}) AND (company_id = rm.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'VIEW_ROLES' LIMIT 1)) as view), ( SELECT case when delete.event_id is null then false else true end as is_delete FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN (${param.userId}) AND (company_id = rm.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'DELETE_ROLE' LIMIT 1)) as delete), ( SELECT case when edit.event_id is null then false else true end as is_edit FROM (SELECT DISTINCT em.em_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id IN(SELECT role_id from waka.role_user_mapping  WHERE assigned_user_id IN (${param.userId}) AND (company_id = rm.company_id)))) AS x ON x.event_id = em.em_id WHERE em_id IN(SELECT em_id from waka.event_master WHERE event_name = 'EDIT_ROLE' LIMIT 1)) as edit) FROM waka.roles_master rm JOIN waka.company c ON c.company_id = rm.company_id JOIN waka.role_module_mapping_new rmm ON rmm.role_id = rm.role_id JOIN waka.modules_list ml ON rmm.module_id = ml.module_id JOIN waka.sub_modules_list sml ON rmm.sub_module_id = sml.sub_module_id WHERE rm.company_id IN (${param.company_ids}) OR rm.created_by = 1 GROUP BY rm.role_name,rm.role_id, c.company_name,is_admin_role,is_view, is_own_company;`;\r\n            return yield psqlAPM.fnDbQuery('getRolesForGrid', queryText, []);\r\n        });\r\n    }\r\n    getEventForView(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"SELECT em.section_name, jsonb_agg(DISTINCT  jsonb_build_object('event_id',em.em_id,'event_description',em.event_description,'is_selected',true)) as events, em.sub_module_id FROM waka.event_master em WHERE em.em_id IN (SELECT rmem.event_id FROM waka.role_module_event_mapping as rmem WHERE rmem.rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new as rmm WHERE role_id =$1)) GROUP BY 1,3\";\r\n            return yield psqlAPM.fnDbQuery('getEventForView', queryText, [param.role_id]);\r\n        });\r\n    }\r\n    deleteRoleUser(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.roles_master WHERE role_id = $1\";\r\n            const queryParam = [param.role_id];\r\n            return yield psqlAPM.fnDbQuery('deleteRole', queryText, queryParam);\r\n        });\r\n    }\r\n    getAssignedRoles(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT rum.role_id, rum.event_ids, array_agg(rmmn.module_id) as module_ids, ci.is_accepted FROM waka.role_user_mapping rum JOIN waka.role_module_mapping_new rmmn ON rum.role_id =rmmn.role_id JOIN waka.contact_invite ci ON ci.invitee_user_id = rum.invitee_user_id WHERE rum.invitee_user_id = $1 AND ci.is_accepted GROUP BY 1,2,4;\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('getAssignedRoles', queryText, queryParam);\r\n        });\r\n    }\r\n    getCompanyIds(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT array_agg(c.company_id) as company_ids FROM waka.company c JOIN waka.lookup_name oc ON oc.lookup_name_id = c.office_category_id LEFT JOIN waka.company pc ON pc.company_id = c.parent_company_id WHERE c.owned_by IN (select created_by from waka.contact_invite where invitee_user_id = $1 AND is_accepted = true AND company_id = c.company_id) OR c.owned_by = $1 AND oc.lookup_name = 'head quarters';\";\r\n            const queryParam = [param.userId];\r\n            return yield psqlAPM.fnDbQuery('getCompanyIds', queryText, queryParam);\r\n        });\r\n    }\r\n    getEventsForSelSubModules(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `SELECT em.section_name, jsonb_agg(DISTINCT  jsonb_build_object('event_id',em.em_id,'event_description',em.event_description,'is_selected',true)) as events, em.sub_module_id FROM waka.event_master em WHERE em.sub_module_id IN (${param.sub_module_ids}) GROUP BY 1,3;`;\r\n            return yield psqlAPM.fnDbQuery('getEventsForSelSubModules', queryText, []);\r\n        });\r\n    }\r\n    getEventsPermissionForRole(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText;\r\n            if (param.role_id != undefined) {\r\n                queryText = `SELECT a.section_name, jsonb_agg(DISTINCT jsonb_build_object('event_id',a.em_id,'event_description',a.event_description,'is_selected',case when a.event_id is null then false else true end)) as events, a.sub_module_id FROM ( SELECT em.section_name, em.em_id, em.event_description, em.sub_module_id, x.event_id FROM waka.event_master em LEFT JOIN (SELECT rmem.event_id AS event_id FROM waka.role_module_event_mapping rmem WHERE rmm_id IN (SELECT rmm.rmm_id FROM waka.role_module_mapping_new rmm WHERE role_id= ${param.role_id})) AS x ON x.event_id = em.em_id WHERE em.module_id IN (SELECT DISTINCT module_id FROM waka.role_module_mapping_new WHERE role_id = ${param.role_id}) AND em.sub_module_id IN (SELECT DISTINCT sub_module_id FROM waka.role_module_mapping_new WHERE role_id = ${param.role_id})) as a GROUP BY 1,3;`;\r\n            }\r\n            else {\r\n                queryText = `SELECT em.section_name, jsonb_agg(DISTINCT  jsonb_build_object('event_id',em.em_id,'event_description',em.event_description,'is_selected',true)) as events, em.sub_module_id FROM waka.event_master em WHERE em.module_id IN (${param.module_ids}) AND em.sub_module_id IN (${param.sub_module_ids}) GROUP BY 1,3;`;\r\n            }\r\n            return yield psqlAPM.fnDbQuery('getMyParentCompany', queryText, []);\r\n        });\r\n    }\r\n    getSubModulesForView(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = `SELECT ml.module_name, ml.module_id, jsonb_agg(DISTINCT jsonb_build_object('sub_module_id',sml.sub_module_id,'module_id',sml.module_id,'sub_module_name',sml.sub_module_name,'seq',sml.seq,'sub_module_description',sml.sub_module_description,'icon',sml.icon,'disabled',CASE WHEN em.sub_module_id is null THEN true ELSE false END)) as sub_modules FROM waka.sub_modules_list sml JOIN waka.modules_list ml ON ml.module_id = sml.module_id LEFT JOIN waka.event_master em ON sml.sub_module_id = em.sub_module_id WHERE sml.module_id IN (${param.module_ids}) AND sml.is_admin_owned = false AND sml.is_visible GROUP BY 1,2 ORDER BY ml.seq;`;\r\n            return yield psqlAPM.fnDbQuery('getSubModulesForView', queryText, []);\r\n        });\r\n    }\r\n    addDetailsForUserMapping(user_id, email) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.role_user_mapping SET assigned_user_id = $1 WHERE email = $2;\";\r\n            const queryParam = [user_id, email];\r\n            return yield psqlAPM.fnDbQuery('addDetailsForUserMapping', queryText, queryParam);\r\n        });\r\n    }\r\n    updContactInviteDetails(user_id, email) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let queryText = \"UPDATE waka.contact_invite SET invitee_user_id = $1 WHERE email = $2;\";\r\n            const queryParam = [user_id, email];\r\n            return yield psqlAPM.fnDbQuery('addDetailsForUserMapping', queryText, queryParam);\r\n        });\r\n    }\r\n    mapServices(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"INSERT INTO waka.map_services_temp (account_type_id, service_type_id, selected_services, created_by) VALUES ($1, $2, $3, $4);\";\r\n            const queryParam = [param.account_type_id, param.service_type_id, param.selected_services, param.userId];\r\n            return yield psqlAPM.fnDbQuery('mapServices', queryText, queryParam);\r\n        });\r\n    }\r\n    updMappedServices(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"UPDATE waka.map_services_temp SET account_type_id = $1, service_type_id = $2, selected_services = $3 WHERE ms_id = $4\";\r\n            const queryParam = [param.account_type_id, param.service_type_id, param.selected_services, param.ms_id];\r\n            return yield psqlAPM.fnDbQuery('updMappedServices', queryText, queryParam);\r\n        });\r\n    }\r\n    delMappedServices(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"DELETE FROM waka.map_services_temp WHERE ms_id = $1 AND created_by = $2\";\r\n            const queryParam = [param.ms_id, param.userId];\r\n            return yield psqlAPM.fnDbQuery('delMappedServices', queryText, queryParam);\r\n        });\r\n    }\r\n    viewMappedServices(userId) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            // const queryText = \"SELECT ms.*, ln.display_name as account_type FROM waka.map_services_temp ms JOIN waka.lookup_name ln ON ln.lookup_name_id = ms.account_type_id WHERE ms.created_by = $1\"\r\n            const queryText = \"SELECT ms.*, ln.display_name as account_type, array_agg(lnn.lookup_name) AS service_types FROM waka.map_services_temp ms JOIN waka.lookup_name ln ON ln.lookup_name_id = ms.account_type_id JOIN waka.lookup_name lnn ON lnn.lookup_name_id = ANY(ms.service_type_id) WHERE ms.created_by = $1 GROUP BY ms.ms_id, ln.display_name;\";\r\n            const queryParam = [userId];\r\n            return yield psqlAPM.fnDbQuery('viewMappedServices', queryText, queryParam);\r\n        });\r\n    }\r\n    getAvailableServices(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT service_id, service_name, unq_name FROM waka.services s JOIN waka.lookup_name ln ON ln.lookup_name_id = s.service_type_id WHERE ln.lookup_name = '\" + param.service_type + \"' ORDER BY 1;\";\r\n            return yield psqlAPM.fnDbQuery('getAvailableServices', queryText, []);\r\n        });\r\n    }\r\n    checkForSelfInvite(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT c.company_id , lu.email FROM waka.login_user lu JOIN waka.company c ON c.owned_by = lu.user_id  WHERE lu.email = '\" + param + \"' ;\";\r\n            return yield psqlAPM.fnDbQuery('getAvailableServices', queryText, []);\r\n        });\r\n    }\r\n    getAccessProvidedUsers(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT array_agg(DISTINCT com.owned_by) as event_provided_users, array_agg(DISTINCT com.company_id) as accessible_companies FROM waka.role_user_mapping rum JOIN waka.company com ON com.company_id = rum.company_id JOIN waka.role_module_mapping_new rmm ON rum.role_id = rmm.role_id WHERE rum.assigned_user_id = $1 AND rmm.module_id = $2;\";\r\n            const queryParam = [param.userId, param.module_id];\r\n            return yield psqlAPM.fnDbQuery('getAccessProvidedUsers', queryText, queryParam);\r\n        });\r\n    }\r\n    getRegisteredSchedulers() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const queryText = \"SELECT * FROM waka.scheduler_availability_status;\";\r\n            return yield psqlAPM.fnDbQuery('getRegisteredSchedulers', queryText, []);\r\n        });\r\n    }\r\n    getSchedulerLog(param) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let type = param.type == 'PO Ingestion' ? \"waka.poi_scheduler_running_status\" : \"waka.sb_scheduler_running_status\";\r\n            const queryText = \"SELECT * FROM \" + type + \" ORDER BY received_on DESC LIMIT $1 OFFSET $2\";\r\n            return yield psqlAPM.fnDbQuery('getSchedulerLog', queryText, [param.limit, param.offset]);\r\n        });\r\n    }\r\n}\r\nexports.UserModel = UserModel;\r\n\n\n//# sourceURL=webpack://tsserver/./src/models/userModel.ts?");

/***/ }),

/***/ "./src/scheduler/accountVerificationMonitor.ts":
/*!*****************************************************!*\
  !*** ./src/scheduler/accountVerificationMonitor.ts ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst psqlAPM = __webpack_require__(/*! ../../src/models/psqlAPM */ \"./src/models/psqlAPM.ts\");\r\nfunction deleteInactiveAccounts() {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let queryText = \"DELETE FROM waka.login_user WHERE active_flag = false AND created_on < now() - interval '48 hours'\"; // Make Sure active_flag set to true for old Users\r\n        yield psqlAPM.fnDbQuery('checkDBAtLaunch', queryText, []);\r\n    });\r\n}\r\nmodule.exports = { deleteInactiveAccounts };\r\n\n\n//# sourceURL=webpack://tsserver/./src/scheduler/accountVerificationMonitor.ts?");

/***/ }),

/***/ "compression":
/*!******************************!*\
  !*** external "compression" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("compression");;

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("cors");;

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");;

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("express");;

/***/ }),

/***/ "express-promise-router":
/*!*****************************************!*\
  !*** external "express-promise-router" ***!
  \*****************************************/
/***/ ((module) => {

module.exports = require("express-promise-router");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");;

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");;

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-fetch");;

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");;

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");;

/***/ }),

/***/ "winston":
/*!**************************!*\
  !*** external "winston" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("winston");;

/***/ }),

/***/ "winston-daily-rotate-file":
/*!********************************************!*\
  !*** external "winston-daily-rotate-file" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("winston-daily-rotate-file");;

/***/ }),

/***/ "xml2js":
/*!*************************!*\
  !*** external "xml2js" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("xml2js");;

/***/ }),

/***/ "zip-a-folder":
/*!*******************************!*\
  !*** external "zip-a-folder" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("zip-a-folder");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;